Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
Rule 2     start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
Rule 3     startaux -> function startaux
Rule 4     startaux -> empty
Rule 5     block -> OPENCURL blockaux CLOSECURL
Rule 6     blockaux -> action blockaux
Rule 7     blockaux -> empty
Rule 8     action -> input
Rule 9     action -> output
Rule 10    action -> statement
Rule 11    input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
Rule 12    output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
Rule 13    outputaux -> expression func_print
Rule 14    outputaux -> expression func_print COMA outputaux
Rule 15    declare -> DEC decaux
Rule 16    decaux -> type ID func_declare_var declareaux
Rule 17    decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
Rule 18    declareaux -> ENDSTMT
Rule 19    declareaux -> COMA decaux
Rule 20    assign -> SET ID func_constantID EQUAL func_assign assignaux
Rule 21    assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
Rule 22    assignaux -> exp func_assign_value ENDSTMT
Rule 23    assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
Rule 24    assignaux -> callfunction func_assign_value
Rule 25    assiaux -> exp func_assign_array
Rule 26    assiaux -> exp func_assign_array COMA assiaux
Rule 27    cte -> ID func_constantID
Rule 28    cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
Rule 29    cte -> BOOLCTE func_boolCte func_constant
Rule 30    cte -> NUMBERCTE func_numberCte func_constant
Rule 31    cte -> WORDCTE func_wordCte func_constant
Rule 32    cte -> SENTENCECTE func_sentenceCte func_constant
Rule 33    type -> BOOL func_type
Rule 34    type -> NUMBER func_type
Rule 35    type -> WORD func_type
Rule 36    type -> SENTENCE func_type
Rule 37    statement -> assign
Rule 38    statement -> expression
Rule 39    statement -> condition
Rule 40    statement -> cycle
Rule 41    statement -> callfunction
Rule 42    statement -> returnaux
Rule 43    expression -> logexpression
Rule 44    expression -> NOT func_logicOp_operation logexpression func_logicOP
Rule 45    logexpression -> relopexpression
Rule 46    logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP
Rule 47    logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP
Rule 48    relopexpression -> exp
Rule 49    relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop
Rule 50    exp -> term
Rule 51    exp -> term PLUS func_term_operation exp func_term
Rule 52    exp -> term MINUS func_term_operation exp func_term
Rule 53    term -> factor
Rule 54    term -> factor MULT func_factor_operation term func_factor
Rule 55    term -> factor DIV func_factor_operation term func_factor
Rule 56    factor -> OPENPAREN expression CLOSEPAREN
Rule 57    factor -> cte
Rule 58    condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
Rule 59    condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
Rule 60    cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
Rule 61    cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
Rule 62    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
Rule 63    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
Rule 64    funcaux -> type
Rule 65    funcaux -> VOID func_type
Rule 66    parameter -> type ID func_declare_par parameteraux
Rule 67    parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
Rule 68    parameter -> empty
Rule 69    parameteraux -> COMA parameter
Rule 70    parameteraux -> empty
Rule 71    returnaux -> RETURN expression func_return ENDSTMT
Rule 72    callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
Rule 73    callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
Rule 74    spaux -> cte func_callFuncParameter
Rule 75    spaux -> cte func_callFuncParameter COMA spaux
Rule 76    spaux -> empty
Rule 77    special -> LENGTH func_special
Rule 78    special -> FREQUENCY func_special
Rule 79    special -> SEARCH func_special
Rule 80    special -> EXISTS func_special
Rule 81    special -> MEAN func_special
Rule 82    special -> MEDIAN func_special
Rule 83    special -> MODE func_special
Rule 84    special -> WORDCOUNT func_special
Rule 85    special -> TOKENIZE func_special
Rule 86    special -> REMOVE func_special
Rule 87    special -> SORT func_special
Rule 88    empty -> <empty>
Rule 89    func_start -> <empty>
Rule 90    func_isSize -> <empty>
Rule 91    func_declare_var -> <empty>
Rule 92    func_declare_array -> <empty>
Rule 93    func_declare_par -> <empty>
Rule 94    func_declare_function -> <empty>
Rule 95    func_type -> <empty>
Rule 96    func_constant -> <empty>
Rule 97    func_constantID -> <empty>
Rule 98    func_constantIDArray -> <empty>
Rule 99    func_boolCte -> <empty>
Rule 100   func_numberCte -> <empty>
Rule 101   func_wordCte -> <empty>
Rule 102   func_sentenceCte -> <empty>
Rule 103   func_begin_main -> <empty>
Rule 104   func_read -> <empty>
Rule 105   func_print -> <empty>
Rule 106   func_assign -> <empty>
Rule 107   func_assign_value -> <empty>
Rule 108   func_assign_array -> <empty>
Rule 109   func_assign_array_end -> <empty>
Rule 110   func_term_operation -> <empty>
Rule 111   func_term -> <empty>
Rule 112   func_factor_operation -> <empty>
Rule 113   func_factor -> <empty>
Rule 114   func_relop_operation -> <empty>
Rule 115   func_relop -> <empty>
Rule 116   func_logicOp_operation -> <empty>
Rule 117   func_logicOP -> <empty>
Rule 118   func_if -> <empty>
Rule 119   func_endIf -> <empty>
Rule 120   func_else -> <empty>
Rule 121   func_endElse -> <empty>
Rule 122   func_do -> <empty>
Rule 123   func_endDoWhile -> <empty>
Rule 124   func_while -> <empty>
Rule 125   func_whileExp -> <empty>
Rule 126   func_endWhile -> <empty>
Rule 127   func_callFunc -> <empty>
Rule 128   func_callFuncParameter -> <empty>
Rule 129   func_endCallFunction -> <empty>
Rule 130   func_special -> <empty>
Rule 131   func_callSpecial -> <empty>
Rule 132   func_return -> <empty>
Rule 133   func_end -> <empty>

Terminals, with rules where they appear

AND                  : 46
BEGIN                : 1 2
BOOL                 : 33
BOOLCTE              : 29
CALL                 : 72 73
CLOSEBRAC            : 17 21 28 67
CLOSECURL            : 5 23 62 63
CLOSEPAREN           : 11 12 56 58 59 60 61 62 63 72 73
COMA                 : 14 19 26 69 75
DEC                  : 15
DIV                  : 55
DO                   : 61
DOT                  : 72
ELSE                 : 59
END                  : 1 2
ENDSTMT              : 1 2 11 12 18 22 23 61 71 72 73
EQUAL                : 20 21
EXISTS               : 80
FREQUENCY            : 78
FUNC                 : 62 63
ID                   : 1 2 11 16 17 20 21 27 28 62 63 66 67 72 73
IF                   : 58 59
KOTOBA               : 1 2
LENGTH               : 77
MEAN                 : 81
MEDIAN               : 82
MINUS                : 52
MODE                 : 83
MULT                 : 54
NOT                  : 44
NUMBER               : 34
NUMBERCTE            : 21 28 30
OPENBRAC             : 17 21 28 67
OPENCURL             : 5 23 62 63
OPENPAREN            : 11 12 56 58 59 60 61 62 63 72 73
OR                   : 47
PLUS                 : 51
READ                 : 11
RELOP                : 49
REMOVE               : 86
RETURN               : 71
SEARCH               : 79
SENTENCE             : 36
SENTENCECTE          : 32
SET                  : 20 21
SORT                 : 87
TOKENIZE             : 85
VOID                 : 65
WHILE                : 60 61
WORD                 : 35
WORDCOUNT            : 84
WORDCTE              : 31
WRITE                : 12
error                : 

Nonterminals, with rules where they appear

action               : 6
assiaux              : 23 26
assign               : 37
assignaux            : 20 21
block                : 1 2 58 59 59 60 61
blockaux             : 5 6 62 63
callfunction         : 24 41
condition            : 39
cte                  : 17 57 67 74 75
cycle                : 40
decaux               : 15 19
declare              : 1 62
declareaux           : 16 17
empty                : 4 7 68 70 76
exp                  : 22 25 26 48 49 49 51 52
expression           : 13 14 38 56 58 59 60 61 71
factor               : 53 54 55
func_assign          : 20 21
func_assign_array    : 25 26
func_assign_array_end : 23
func_assign_value    : 22 24
func_begin_main      : 1 2
func_boolCte         : 29
func_callFunc        : 73
func_callFuncParameter : 74 75
func_callSpecial     : 72
func_constant        : 29 30 31 32
func_constantID      : 20 27
func_constantIDArray : 21 28
func_declare_array   : 17 67
func_declare_function : 62 63
func_declare_par     : 66
func_declare_var     : 16
func_do              : 61
func_else            : 59
func_end             : 1 2
func_endCallFunction : 73
func_endDoWhile      : 61
func_endElse         : 59
func_endIf           : 58
func_endWhile        : 60
func_factor          : 54 55
func_factor_operation : 54 55
func_if              : 58 59
func_isSize          : 17 67
func_logicOP         : 44 46 47
func_logicOp_operation : 44 46 47
func_numberCte       : 30
func_print           : 13 14
func_read            : 11
func_relop           : 49 49
func_relop_operation : 49
func_return          : 71
func_sentenceCte     : 32
func_special         : 77 78 79 80 81 82 83 84 85 86 87
func_start           : 1 2
func_term            : 51 52
func_term_operation  : 51 52
func_type            : 33 34 35 36 65
func_while           : 60
func_whileExp        : 60
func_wordCte         : 31
funcaux              : 62 63
function             : 3
input                : 8
logexpression        : 43 44 46 47
output               : 9
outputaux            : 12 14
parameter            : 62 63 69
parameteraux         : 66 67
relopexpression      : 45 46 47
returnaux            : 42
spaux                : 72 73 75
special              : 72
start                : 0
startaux             : 1 2 3
statement            : 10
term                 : 50 51 52 54 55
type                 : 16 17 64 66 67

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> . KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    KOTOBA          shift and go to state 1

    start                          shift and go to state 2

state 1

    (1) start -> KOTOBA . ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA . ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    ID              shift and go to state 3


state 2

    (0) S' -> start .



state 3

    (1) start -> KOTOBA ID . func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID . func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
    (89) func_start -> .

    ENDSTMT         reduce using rule 89 (func_start -> .)

    func_start                     shift and go to state 4

state 4

    (1) start -> KOTOBA ID func_start . ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start . ENDSTMT startaux BEGIN func_begin_main block END func_end

    ENDSTMT         shift and go to state 5


state 5

    (1) start -> KOTOBA ID func_start ENDSTMT . declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start ENDSTMT . startaux BEGIN func_begin_main block END func_end
    (15) declare -> . DEC decaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (62) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (88) empty -> .

    DEC             shift and go to state 6
    FUNC            shift and go to state 10
    BEGIN           reduce using rule 88 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 7
    declare                        shift and go to state 11

state 6

    (15) declare -> DEC . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (33) type -> . BOOL func_type
    (34) type -> . NUMBER func_type
    (35) type -> . WORD func_type
    (36) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 15
    type                           shift and go to state 17

state 7

    (2) start -> KOTOBA ID func_start ENDSTMT startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 18


state 8

    (4) startaux -> empty .

    BEGIN           reduce using rule 4 (startaux -> empty .)


state 9

    (3) startaux -> function . startaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (62) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (88) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 88 (empty -> .)

    function                       shift and go to state 9
    startaux                       shift and go to state 19
    empty                          shift and go to state 8

state 10

    (62) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (64) funcaux -> . type
    (65) funcaux -> . VOID func_type
    (33) type -> . BOOL func_type
    (34) type -> . NUMBER func_type
    (35) type -> . WORD func_type
    (36) type -> . SENTENCE func_type

    VOID            shift and go to state 21
    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    funcaux                        shift and go to state 22
    type                           shift and go to state 20

state 11

    (1) start -> KOTOBA ID func_start ENDSTMT declare . startaux BEGIN func_begin_main block END func_end
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (62) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (88) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 88 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 23

state 12

    (36) type -> SENTENCE . func_type
    (95) func_type -> .

    ID              reduce using rule 95 (func_type -> .)

    func_type                      shift and go to state 24

state 13

    (34) type -> NUMBER . func_type
    (95) func_type -> .

    ID              reduce using rule 95 (func_type -> .)

    func_type                      shift and go to state 25

state 14

    (33) type -> BOOL . func_type
    (95) func_type -> .

    ID              reduce using rule 95 (func_type -> .)

    func_type                      shift and go to state 26

state 15

    (15) declare -> DEC decaux .

    FUNC            reduce using rule 15 (declare -> DEC decaux .)
    BEGIN           reduce using rule 15 (declare -> DEC decaux .)
    READ            reduce using rule 15 (declare -> DEC decaux .)
    WRITE           reduce using rule 15 (declare -> DEC decaux .)
    SET             reduce using rule 15 (declare -> DEC decaux .)
    NOT             reduce using rule 15 (declare -> DEC decaux .)
    IF              reduce using rule 15 (declare -> DEC decaux .)
    WHILE           reduce using rule 15 (declare -> DEC decaux .)
    DO              reduce using rule 15 (declare -> DEC decaux .)
    CALL            reduce using rule 15 (declare -> DEC decaux .)
    RETURN          reduce using rule 15 (declare -> DEC decaux .)
    OPENPAREN       reduce using rule 15 (declare -> DEC decaux .)
    ID              reduce using rule 15 (declare -> DEC decaux .)
    BOOLCTE         reduce using rule 15 (declare -> DEC decaux .)
    NUMBERCTE       reduce using rule 15 (declare -> DEC decaux .)
    WORDCTE         reduce using rule 15 (declare -> DEC decaux .)
    SENTENCECTE     reduce using rule 15 (declare -> DEC decaux .)
    CLOSECURL       reduce using rule 15 (declare -> DEC decaux .)


state 16

    (35) type -> WORD . func_type
    (95) func_type -> .

    ID              reduce using rule 95 (func_type -> .)

    func_type                      shift and go to state 27

state 17

    (16) decaux -> type . ID func_declare_var declareaux
    (17) decaux -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux

    ID              shift and go to state 28


state 18

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN . func_begin_main block END func_end
    (103) func_begin_main -> .

    OPENCURL        reduce using rule 103 (func_begin_main -> .)

    func_begin_main                shift and go to state 29

state 19

    (3) startaux -> function startaux .

    BEGIN           reduce using rule 3 (startaux -> function startaux .)


state 20

    (64) funcaux -> type .

    ID              reduce using rule 64 (funcaux -> type .)


state 21

    (65) funcaux -> VOID . func_type
    (95) func_type -> .

    ID              reduce using rule 95 (func_type -> .)

    func_type                      shift and go to state 30

state 22

    (62) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL

    ID              shift and go to state 31


state 23

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 32


state 24

    (36) type -> SENTENCE func_type .

    ID              reduce using rule 36 (type -> SENTENCE func_type .)


state 25

    (34) type -> NUMBER func_type .

    ID              reduce using rule 34 (type -> NUMBER func_type .)


state 26

    (33) type -> BOOL func_type .

    ID              reduce using rule 33 (type -> BOOL func_type .)


state 27

    (35) type -> WORD func_type .

    ID              reduce using rule 35 (type -> WORD func_type .)


state 28

    (16) decaux -> type ID . func_declare_var declareaux
    (17) decaux -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (91) func_declare_var -> .

    OPENBRAC        shift and go to state 33
    ENDSTMT         reduce using rule 91 (func_declare_var -> .)
    COMA            reduce using rule 91 (func_declare_var -> .)

    func_declare_var               shift and go to state 34

state 29

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 36

state 30

    (65) funcaux -> VOID func_type .

    ID              reduce using rule 65 (funcaux -> VOID func_type .)


state 31

    (62) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (94) func_declare_function -> .

    OPENPAREN       reduce using rule 94 (func_declare_function -> .)

    func_declare_function          shift and go to state 37

state 32

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN . func_begin_main block END func_end
    (103) func_begin_main -> .

    OPENCURL        reduce using rule 103 (func_begin_main -> .)

    func_begin_main                shift and go to state 38

state 33

    (17) decaux -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array declareaux
    (90) func_isSize -> .

    ID              reduce using rule 90 (func_isSize -> .)
    BOOLCTE         reduce using rule 90 (func_isSize -> .)
    NUMBERCTE       reduce using rule 90 (func_isSize -> .)
    WORDCTE         reduce using rule 90 (func_isSize -> .)
    SENTENCECTE     reduce using rule 90 (func_isSize -> .)

    func_isSize                    shift and go to state 39

state 34

    (16) decaux -> type ID func_declare_var . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 40
    COMA            shift and go to state 41

    declareaux                     shift and go to state 42

state 35

    (5) block -> OPENCURL . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (88) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (37) statement -> . assign
    (38) statement -> . expression
    (39) statement -> . condition
    (40) statement -> . cycle
    (41) statement -> . callfunction
    (42) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (58) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (59) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (60) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (61) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (71) returnaux -> . RETURN expression func_return ENDSTMT
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 88 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 60
    SET             shift and go to state 50
    NOT             shift and go to state 61
    IF              shift and go to state 55
    WHILE           shift and go to state 68
    DO              shift and go to state 43
    CALL            shift and go to state 70
    RETURN          shift and go to state 48
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    returnaux                      shift and go to state 51
    callfunction                   shift and go to state 52
    statement                      shift and go to state 53
    input                          shift and go to state 54
    blockaux                       shift and go to state 57
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    cte                            shift and go to state 69
    empty                          shift and go to state 56
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    expression                     shift and go to state 74
    assign                         shift and go to state 75

state 36

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 76


state 37

    (62) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL

    OPENPAREN       shift and go to state 77


state 38

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 78

state 39

    (17) decaux -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array declareaux
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    cte                            shift and go to state 79

state 40

    (18) declareaux -> ENDSTMT .

    FUNC            reduce using rule 18 (declareaux -> ENDSTMT .)
    BEGIN           reduce using rule 18 (declareaux -> ENDSTMT .)
    READ            reduce using rule 18 (declareaux -> ENDSTMT .)
    WRITE           reduce using rule 18 (declareaux -> ENDSTMT .)
    SET             reduce using rule 18 (declareaux -> ENDSTMT .)
    NOT             reduce using rule 18 (declareaux -> ENDSTMT .)
    IF              reduce using rule 18 (declareaux -> ENDSTMT .)
    WHILE           reduce using rule 18 (declareaux -> ENDSTMT .)
    DO              reduce using rule 18 (declareaux -> ENDSTMT .)
    CALL            reduce using rule 18 (declareaux -> ENDSTMT .)
    RETURN          reduce using rule 18 (declareaux -> ENDSTMT .)
    OPENPAREN       reduce using rule 18 (declareaux -> ENDSTMT .)
    ID              reduce using rule 18 (declareaux -> ENDSTMT .)
    BOOLCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    NUMBERCTE       reduce using rule 18 (declareaux -> ENDSTMT .)
    WORDCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    SENTENCECTE     reduce using rule 18 (declareaux -> ENDSTMT .)
    CLOSECURL       reduce using rule 18 (declareaux -> ENDSTMT .)


state 41

    (19) declareaux -> COMA . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (33) type -> . BOOL func_type
    (34) type -> . NUMBER func_type
    (35) type -> . WORD func_type
    (36) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 80
    type                           shift and go to state 17

state 42

    (16) decaux -> type ID func_declare_var declareaux .

    FUNC            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BEGIN           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    READ            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WRITE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SET             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NOT             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    IF              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WHILE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    DO              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CALL            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    RETURN          reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    OPENPAREN       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ID              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BOOLCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NUMBERCTE       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WORDCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SENTENCECTE     reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CLOSECURL       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)


state 43

    (61) cycle -> DO . func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (122) func_do -> .

    OPENCURL        reduce using rule 122 (func_do -> .)

    func_do                        shift and go to state 81

state 44

    (31) cte -> WORDCTE . func_wordCte func_constant
    (101) func_wordCte -> .

    MULT            reduce using rule 101 (func_wordCte -> .)
    DIV             reduce using rule 101 (func_wordCte -> .)
    PLUS            reduce using rule 101 (func_wordCte -> .)
    MINUS           reduce using rule 101 (func_wordCte -> .)
    RELOP           reduce using rule 101 (func_wordCte -> .)
    AND             reduce using rule 101 (func_wordCte -> .)
    OR              reduce using rule 101 (func_wordCte -> .)
    READ            reduce using rule 101 (func_wordCte -> .)
    WRITE           reduce using rule 101 (func_wordCte -> .)
    SET             reduce using rule 101 (func_wordCte -> .)
    NOT             reduce using rule 101 (func_wordCte -> .)
    IF              reduce using rule 101 (func_wordCte -> .)
    WHILE           reduce using rule 101 (func_wordCte -> .)
    DO              reduce using rule 101 (func_wordCte -> .)
    CALL            reduce using rule 101 (func_wordCte -> .)
    RETURN          reduce using rule 101 (func_wordCte -> .)
    OPENPAREN       reduce using rule 101 (func_wordCte -> .)
    ID              reduce using rule 101 (func_wordCte -> .)
    BOOLCTE         reduce using rule 101 (func_wordCte -> .)
    NUMBERCTE       reduce using rule 101 (func_wordCte -> .)
    WORDCTE         reduce using rule 101 (func_wordCte -> .)
    SENTENCECTE     reduce using rule 101 (func_wordCte -> .)
    CLOSECURL       reduce using rule 101 (func_wordCte -> .)
    CLOSEBRAC       reduce using rule 101 (func_wordCte -> .)
    ENDSTMT         reduce using rule 101 (func_wordCte -> .)
    CLOSEPAREN      reduce using rule 101 (func_wordCte -> .)
    COMA            reduce using rule 101 (func_wordCte -> .)

    func_wordCte                   shift and go to state 82

state 45

    (29) cte -> BOOLCTE . func_boolCte func_constant
    (99) func_boolCte -> .

    MULT            reduce using rule 99 (func_boolCte -> .)
    DIV             reduce using rule 99 (func_boolCte -> .)
    PLUS            reduce using rule 99 (func_boolCte -> .)
    MINUS           reduce using rule 99 (func_boolCte -> .)
    RELOP           reduce using rule 99 (func_boolCte -> .)
    AND             reduce using rule 99 (func_boolCte -> .)
    OR              reduce using rule 99 (func_boolCte -> .)
    READ            reduce using rule 99 (func_boolCte -> .)
    WRITE           reduce using rule 99 (func_boolCte -> .)
    SET             reduce using rule 99 (func_boolCte -> .)
    NOT             reduce using rule 99 (func_boolCte -> .)
    IF              reduce using rule 99 (func_boolCte -> .)
    WHILE           reduce using rule 99 (func_boolCte -> .)
    DO              reduce using rule 99 (func_boolCte -> .)
    CALL            reduce using rule 99 (func_boolCte -> .)
    RETURN          reduce using rule 99 (func_boolCte -> .)
    OPENPAREN       reduce using rule 99 (func_boolCte -> .)
    ID              reduce using rule 99 (func_boolCte -> .)
    BOOLCTE         reduce using rule 99 (func_boolCte -> .)
    NUMBERCTE       reduce using rule 99 (func_boolCte -> .)
    WORDCTE         reduce using rule 99 (func_boolCte -> .)
    SENTENCECTE     reduce using rule 99 (func_boolCte -> .)
    CLOSECURL       reduce using rule 99 (func_boolCte -> .)
    CLOSEBRAC       reduce using rule 99 (func_boolCte -> .)
    ENDSTMT         reduce using rule 99 (func_boolCte -> .)
    CLOSEPAREN      reduce using rule 99 (func_boolCte -> .)
    COMA            reduce using rule 99 (func_boolCte -> .)

    func_boolCte                   shift and go to state 83

state 46

    (11) input -> READ . OPENPAREN ID func_read CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 84


state 47

    (32) cte -> SENTENCECTE . func_sentenceCte func_constant
    (102) func_sentenceCte -> .

    MULT            reduce using rule 102 (func_sentenceCte -> .)
    DIV             reduce using rule 102 (func_sentenceCte -> .)
    PLUS            reduce using rule 102 (func_sentenceCte -> .)
    MINUS           reduce using rule 102 (func_sentenceCte -> .)
    RELOP           reduce using rule 102 (func_sentenceCte -> .)
    AND             reduce using rule 102 (func_sentenceCte -> .)
    OR              reduce using rule 102 (func_sentenceCte -> .)
    READ            reduce using rule 102 (func_sentenceCte -> .)
    WRITE           reduce using rule 102 (func_sentenceCte -> .)
    SET             reduce using rule 102 (func_sentenceCte -> .)
    NOT             reduce using rule 102 (func_sentenceCte -> .)
    IF              reduce using rule 102 (func_sentenceCte -> .)
    WHILE           reduce using rule 102 (func_sentenceCte -> .)
    DO              reduce using rule 102 (func_sentenceCte -> .)
    CALL            reduce using rule 102 (func_sentenceCte -> .)
    RETURN          reduce using rule 102 (func_sentenceCte -> .)
    OPENPAREN       reduce using rule 102 (func_sentenceCte -> .)
    ID              reduce using rule 102 (func_sentenceCte -> .)
    BOOLCTE         reduce using rule 102 (func_sentenceCte -> .)
    NUMBERCTE       reduce using rule 102 (func_sentenceCte -> .)
    WORDCTE         reduce using rule 102 (func_sentenceCte -> .)
    SENTENCECTE     reduce using rule 102 (func_sentenceCte -> .)
    CLOSECURL       reduce using rule 102 (func_sentenceCte -> .)
    CLOSEBRAC       reduce using rule 102 (func_sentenceCte -> .)
    ENDSTMT         reduce using rule 102 (func_sentenceCte -> .)
    CLOSEPAREN      reduce using rule 102 (func_sentenceCte -> .)
    COMA            reduce using rule 102 (func_sentenceCte -> .)

    func_sentenceCte               shift and go to state 85

state 48

    (71) returnaux -> RETURN . expression func_return ENDSTMT
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 86

state 49

    (56) factor -> OPENPAREN . expression CLOSEPAREN
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 87

state 50

    (20) assign -> SET . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> SET . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    ID              shift and go to state 88


state 51

    (42) statement -> returnaux .

    READ            reduce using rule 42 (statement -> returnaux .)
    WRITE           reduce using rule 42 (statement -> returnaux .)
    SET             reduce using rule 42 (statement -> returnaux .)
    NOT             reduce using rule 42 (statement -> returnaux .)
    IF              reduce using rule 42 (statement -> returnaux .)
    WHILE           reduce using rule 42 (statement -> returnaux .)
    DO              reduce using rule 42 (statement -> returnaux .)
    CALL            reduce using rule 42 (statement -> returnaux .)
    RETURN          reduce using rule 42 (statement -> returnaux .)
    OPENPAREN       reduce using rule 42 (statement -> returnaux .)
    ID              reduce using rule 42 (statement -> returnaux .)
    BOOLCTE         reduce using rule 42 (statement -> returnaux .)
    NUMBERCTE       reduce using rule 42 (statement -> returnaux .)
    WORDCTE         reduce using rule 42 (statement -> returnaux .)
    SENTENCECTE     reduce using rule 42 (statement -> returnaux .)
    CLOSECURL       reduce using rule 42 (statement -> returnaux .)


state 52

    (41) statement -> callfunction .

    READ            reduce using rule 41 (statement -> callfunction .)
    WRITE           reduce using rule 41 (statement -> callfunction .)
    SET             reduce using rule 41 (statement -> callfunction .)
    NOT             reduce using rule 41 (statement -> callfunction .)
    IF              reduce using rule 41 (statement -> callfunction .)
    WHILE           reduce using rule 41 (statement -> callfunction .)
    DO              reduce using rule 41 (statement -> callfunction .)
    CALL            reduce using rule 41 (statement -> callfunction .)
    RETURN          reduce using rule 41 (statement -> callfunction .)
    OPENPAREN       reduce using rule 41 (statement -> callfunction .)
    ID              reduce using rule 41 (statement -> callfunction .)
    BOOLCTE         reduce using rule 41 (statement -> callfunction .)
    NUMBERCTE       reduce using rule 41 (statement -> callfunction .)
    WORDCTE         reduce using rule 41 (statement -> callfunction .)
    SENTENCECTE     reduce using rule 41 (statement -> callfunction .)
    CLOSECURL       reduce using rule 41 (statement -> callfunction .)


state 53

    (10) action -> statement .

    READ            reduce using rule 10 (action -> statement .)
    WRITE           reduce using rule 10 (action -> statement .)
    SET             reduce using rule 10 (action -> statement .)
    NOT             reduce using rule 10 (action -> statement .)
    IF              reduce using rule 10 (action -> statement .)
    WHILE           reduce using rule 10 (action -> statement .)
    DO              reduce using rule 10 (action -> statement .)
    CALL            reduce using rule 10 (action -> statement .)
    RETURN          reduce using rule 10 (action -> statement .)
    OPENPAREN       reduce using rule 10 (action -> statement .)
    ID              reduce using rule 10 (action -> statement .)
    BOOLCTE         reduce using rule 10 (action -> statement .)
    NUMBERCTE       reduce using rule 10 (action -> statement .)
    WORDCTE         reduce using rule 10 (action -> statement .)
    SENTENCECTE     reduce using rule 10 (action -> statement .)
    CLOSECURL       reduce using rule 10 (action -> statement .)


state 54

    (8) action -> input .

    READ            reduce using rule 8 (action -> input .)
    WRITE           reduce using rule 8 (action -> input .)
    SET             reduce using rule 8 (action -> input .)
    NOT             reduce using rule 8 (action -> input .)
    IF              reduce using rule 8 (action -> input .)
    WHILE           reduce using rule 8 (action -> input .)
    DO              reduce using rule 8 (action -> input .)
    CALL            reduce using rule 8 (action -> input .)
    RETURN          reduce using rule 8 (action -> input .)
    OPENPAREN       reduce using rule 8 (action -> input .)
    ID              reduce using rule 8 (action -> input .)
    BOOLCTE         reduce using rule 8 (action -> input .)
    NUMBERCTE       reduce using rule 8 (action -> input .)
    WORDCTE         reduce using rule 8 (action -> input .)
    SENTENCECTE     reduce using rule 8 (action -> input .)
    CLOSECURL       reduce using rule 8 (action -> input .)


state 55

    (58) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (59) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse

    OPENPAREN       shift and go to state 89


state 56

    (7) blockaux -> empty .

    CLOSECURL       reduce using rule 7 (blockaux -> empty .)


state 57

    (5) block -> OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 90


state 58

    (53) term -> factor .
    (54) term -> factor . MULT func_factor_operation term func_factor
    (55) term -> factor . DIV func_factor_operation term func_factor

    PLUS            reduce using rule 53 (term -> factor .)
    MINUS           reduce using rule 53 (term -> factor .)
    ENDSTMT         reduce using rule 53 (term -> factor .)
    RELOP           reduce using rule 53 (term -> factor .)
    AND             reduce using rule 53 (term -> factor .)
    OR              reduce using rule 53 (term -> factor .)
    CLOSEPAREN      reduce using rule 53 (term -> factor .)
    READ            reduce using rule 53 (term -> factor .)
    WRITE           reduce using rule 53 (term -> factor .)
    SET             reduce using rule 53 (term -> factor .)
    NOT             reduce using rule 53 (term -> factor .)
    IF              reduce using rule 53 (term -> factor .)
    WHILE           reduce using rule 53 (term -> factor .)
    DO              reduce using rule 53 (term -> factor .)
    CALL            reduce using rule 53 (term -> factor .)
    RETURN          reduce using rule 53 (term -> factor .)
    OPENPAREN       reduce using rule 53 (term -> factor .)
    ID              reduce using rule 53 (term -> factor .)
    BOOLCTE         reduce using rule 53 (term -> factor .)
    NUMBERCTE       reduce using rule 53 (term -> factor .)
    WORDCTE         reduce using rule 53 (term -> factor .)
    SENTENCECTE     reduce using rule 53 (term -> factor .)
    CLOSECURL       reduce using rule 53 (term -> factor .)
    COMA            reduce using rule 53 (term -> factor .)
    MULT            shift and go to state 92
    DIV             shift and go to state 91


state 59

    (43) expression -> logexpression .

    READ            reduce using rule 43 (expression -> logexpression .)
    WRITE           reduce using rule 43 (expression -> logexpression .)
    SET             reduce using rule 43 (expression -> logexpression .)
    NOT             reduce using rule 43 (expression -> logexpression .)
    IF              reduce using rule 43 (expression -> logexpression .)
    WHILE           reduce using rule 43 (expression -> logexpression .)
    DO              reduce using rule 43 (expression -> logexpression .)
    CALL            reduce using rule 43 (expression -> logexpression .)
    RETURN          reduce using rule 43 (expression -> logexpression .)
    OPENPAREN       reduce using rule 43 (expression -> logexpression .)
    ID              reduce using rule 43 (expression -> logexpression .)
    BOOLCTE         reduce using rule 43 (expression -> logexpression .)
    NUMBERCTE       reduce using rule 43 (expression -> logexpression .)
    WORDCTE         reduce using rule 43 (expression -> logexpression .)
    SENTENCECTE     reduce using rule 43 (expression -> logexpression .)
    CLOSECURL       reduce using rule 43 (expression -> logexpression .)
    CLOSEPAREN      reduce using rule 43 (expression -> logexpression .)
    COMA            reduce using rule 43 (expression -> logexpression .)
    ENDSTMT         reduce using rule 43 (expression -> logexpression .)


state 60

    (12) output -> WRITE . OPENPAREN outputaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 93


state 61

    (44) expression -> NOT . func_logicOp_operation logexpression func_logicOP
    (116) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 116 (func_logicOp_operation -> .)
    ID              reduce using rule 116 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 116 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 116 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 116 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 116 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 94

state 62

    (45) logexpression -> relopexpression .
    (46) logexpression -> relopexpression . AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> relopexpression . OR func_logicOp_operation logexpression func_logicOP

    READ            reduce using rule 45 (logexpression -> relopexpression .)
    WRITE           reduce using rule 45 (logexpression -> relopexpression .)
    SET             reduce using rule 45 (logexpression -> relopexpression .)
    NOT             reduce using rule 45 (logexpression -> relopexpression .)
    IF              reduce using rule 45 (logexpression -> relopexpression .)
    WHILE           reduce using rule 45 (logexpression -> relopexpression .)
    DO              reduce using rule 45 (logexpression -> relopexpression .)
    CALL            reduce using rule 45 (logexpression -> relopexpression .)
    RETURN          reduce using rule 45 (logexpression -> relopexpression .)
    OPENPAREN       reduce using rule 45 (logexpression -> relopexpression .)
    ID              reduce using rule 45 (logexpression -> relopexpression .)
    BOOLCTE         reduce using rule 45 (logexpression -> relopexpression .)
    NUMBERCTE       reduce using rule 45 (logexpression -> relopexpression .)
    WORDCTE         reduce using rule 45 (logexpression -> relopexpression .)
    SENTENCECTE     reduce using rule 45 (logexpression -> relopexpression .)
    CLOSECURL       reduce using rule 45 (logexpression -> relopexpression .)
    COMA            reduce using rule 45 (logexpression -> relopexpression .)
    CLOSEPAREN      reduce using rule 45 (logexpression -> relopexpression .)
    ENDSTMT         reduce using rule 45 (logexpression -> relopexpression .)
    AND             shift and go to state 95
    OR              shift and go to state 96


state 63

    (30) cte -> NUMBERCTE . func_numberCte func_constant
    (100) func_numberCte -> .

    MULT            reduce using rule 100 (func_numberCte -> .)
    DIV             reduce using rule 100 (func_numberCte -> .)
    PLUS            reduce using rule 100 (func_numberCte -> .)
    MINUS           reduce using rule 100 (func_numberCte -> .)
    RELOP           reduce using rule 100 (func_numberCte -> .)
    AND             reduce using rule 100 (func_numberCte -> .)
    OR              reduce using rule 100 (func_numberCte -> .)
    READ            reduce using rule 100 (func_numberCte -> .)
    WRITE           reduce using rule 100 (func_numberCte -> .)
    SET             reduce using rule 100 (func_numberCte -> .)
    NOT             reduce using rule 100 (func_numberCte -> .)
    IF              reduce using rule 100 (func_numberCte -> .)
    WHILE           reduce using rule 100 (func_numberCte -> .)
    DO              reduce using rule 100 (func_numberCte -> .)
    CALL            reduce using rule 100 (func_numberCte -> .)
    RETURN          reduce using rule 100 (func_numberCte -> .)
    OPENPAREN       reduce using rule 100 (func_numberCte -> .)
    ID              reduce using rule 100 (func_numberCte -> .)
    BOOLCTE         reduce using rule 100 (func_numberCte -> .)
    NUMBERCTE       reduce using rule 100 (func_numberCte -> .)
    WORDCTE         reduce using rule 100 (func_numberCte -> .)
    SENTENCECTE     reduce using rule 100 (func_numberCte -> .)
    CLOSECURL       reduce using rule 100 (func_numberCte -> .)
    CLOSEBRAC       reduce using rule 100 (func_numberCte -> .)
    ENDSTMT         reduce using rule 100 (func_numberCte -> .)
    CLOSEPAREN      reduce using rule 100 (func_numberCte -> .)
    COMA            reduce using rule 100 (func_numberCte -> .)

    func_numberCte                 shift and go to state 97

state 64

    (27) cte -> ID . func_constantID
    (28) cte -> ID . OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (97) func_constantID -> .

    OPENBRAC        shift and go to state 98
    MULT            reduce using rule 97 (func_constantID -> .)
    DIV             reduce using rule 97 (func_constantID -> .)
    PLUS            reduce using rule 97 (func_constantID -> .)
    MINUS           reduce using rule 97 (func_constantID -> .)
    RELOP           reduce using rule 97 (func_constantID -> .)
    AND             reduce using rule 97 (func_constantID -> .)
    OR              reduce using rule 97 (func_constantID -> .)
    READ            reduce using rule 97 (func_constantID -> .)
    WRITE           reduce using rule 97 (func_constantID -> .)
    SET             reduce using rule 97 (func_constantID -> .)
    NOT             reduce using rule 97 (func_constantID -> .)
    IF              reduce using rule 97 (func_constantID -> .)
    WHILE           reduce using rule 97 (func_constantID -> .)
    DO              reduce using rule 97 (func_constantID -> .)
    CALL            reduce using rule 97 (func_constantID -> .)
    RETURN          reduce using rule 97 (func_constantID -> .)
    OPENPAREN       reduce using rule 97 (func_constantID -> .)
    ID              reduce using rule 97 (func_constantID -> .)
    BOOLCTE         reduce using rule 97 (func_constantID -> .)
    NUMBERCTE       reduce using rule 97 (func_constantID -> .)
    WORDCTE         reduce using rule 97 (func_constantID -> .)
    SENTENCECTE     reduce using rule 97 (func_constantID -> .)
    CLOSECURL       reduce using rule 97 (func_constantID -> .)
    CLOSEBRAC       reduce using rule 97 (func_constantID -> .)
    ENDSTMT         reduce using rule 97 (func_constantID -> .)
    CLOSEPAREN      reduce using rule 97 (func_constantID -> .)
    COMA            reduce using rule 97 (func_constantID -> .)

    func_constantID                shift and go to state 99

state 65

    (39) statement -> condition .

    READ            reduce using rule 39 (statement -> condition .)
    WRITE           reduce using rule 39 (statement -> condition .)
    SET             reduce using rule 39 (statement -> condition .)
    NOT             reduce using rule 39 (statement -> condition .)
    IF              reduce using rule 39 (statement -> condition .)
    WHILE           reduce using rule 39 (statement -> condition .)
    DO              reduce using rule 39 (statement -> condition .)
    CALL            reduce using rule 39 (statement -> condition .)
    RETURN          reduce using rule 39 (statement -> condition .)
    OPENPAREN       reduce using rule 39 (statement -> condition .)
    ID              reduce using rule 39 (statement -> condition .)
    BOOLCTE         reduce using rule 39 (statement -> condition .)
    NUMBERCTE       reduce using rule 39 (statement -> condition .)
    WORDCTE         reduce using rule 39 (statement -> condition .)
    SENTENCECTE     reduce using rule 39 (statement -> condition .)
    CLOSECURL       reduce using rule 39 (statement -> condition .)


state 66

    (40) statement -> cycle .

    READ            reduce using rule 40 (statement -> cycle .)
    WRITE           reduce using rule 40 (statement -> cycle .)
    SET             reduce using rule 40 (statement -> cycle .)
    NOT             reduce using rule 40 (statement -> cycle .)
    IF              reduce using rule 40 (statement -> cycle .)
    WHILE           reduce using rule 40 (statement -> cycle .)
    DO              reduce using rule 40 (statement -> cycle .)
    CALL            reduce using rule 40 (statement -> cycle .)
    RETURN          reduce using rule 40 (statement -> cycle .)
    OPENPAREN       reduce using rule 40 (statement -> cycle .)
    ID              reduce using rule 40 (statement -> cycle .)
    BOOLCTE         reduce using rule 40 (statement -> cycle .)
    NUMBERCTE       reduce using rule 40 (statement -> cycle .)
    WORDCTE         reduce using rule 40 (statement -> cycle .)
    SENTENCECTE     reduce using rule 40 (statement -> cycle .)
    CLOSECURL       reduce using rule 40 (statement -> cycle .)


state 67

    (50) exp -> term .
    (51) exp -> term . PLUS func_term_operation exp func_term
    (52) exp -> term . MINUS func_term_operation exp func_term

    RELOP           reduce using rule 50 (exp -> term .)
    AND             reduce using rule 50 (exp -> term .)
    OR              reduce using rule 50 (exp -> term .)
    CLOSEPAREN      reduce using rule 50 (exp -> term .)
    ENDSTMT         reduce using rule 50 (exp -> term .)
    READ            reduce using rule 50 (exp -> term .)
    WRITE           reduce using rule 50 (exp -> term .)
    SET             reduce using rule 50 (exp -> term .)
    NOT             reduce using rule 50 (exp -> term .)
    IF              reduce using rule 50 (exp -> term .)
    WHILE           reduce using rule 50 (exp -> term .)
    DO              reduce using rule 50 (exp -> term .)
    CALL            reduce using rule 50 (exp -> term .)
    RETURN          reduce using rule 50 (exp -> term .)
    OPENPAREN       reduce using rule 50 (exp -> term .)
    ID              reduce using rule 50 (exp -> term .)
    BOOLCTE         reduce using rule 50 (exp -> term .)
    NUMBERCTE       reduce using rule 50 (exp -> term .)
    WORDCTE         reduce using rule 50 (exp -> term .)
    SENTENCECTE     reduce using rule 50 (exp -> term .)
    CLOSECURL       reduce using rule 50 (exp -> term .)
    COMA            reduce using rule 50 (exp -> term .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101


state 68

    (60) cycle -> WHILE . func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (124) func_while -> .

    OPENPAREN       reduce using rule 124 (func_while -> .)

    func_while                     shift and go to state 102

state 69

    (57) factor -> cte .

    MULT            reduce using rule 57 (factor -> cte .)
    DIV             reduce using rule 57 (factor -> cte .)
    PLUS            reduce using rule 57 (factor -> cte .)
    MINUS           reduce using rule 57 (factor -> cte .)
    RELOP           reduce using rule 57 (factor -> cte .)
    AND             reduce using rule 57 (factor -> cte .)
    OR              reduce using rule 57 (factor -> cte .)
    READ            reduce using rule 57 (factor -> cte .)
    WRITE           reduce using rule 57 (factor -> cte .)
    SET             reduce using rule 57 (factor -> cte .)
    NOT             reduce using rule 57 (factor -> cte .)
    IF              reduce using rule 57 (factor -> cte .)
    WHILE           reduce using rule 57 (factor -> cte .)
    DO              reduce using rule 57 (factor -> cte .)
    CALL            reduce using rule 57 (factor -> cte .)
    RETURN          reduce using rule 57 (factor -> cte .)
    OPENPAREN       reduce using rule 57 (factor -> cte .)
    ID              reduce using rule 57 (factor -> cte .)
    BOOLCTE         reduce using rule 57 (factor -> cte .)
    NUMBERCTE       reduce using rule 57 (factor -> cte .)
    WORDCTE         reduce using rule 57 (factor -> cte .)
    SENTENCECTE     reduce using rule 57 (factor -> cte .)
    CLOSECURL       reduce using rule 57 (factor -> cte .)
    ENDSTMT         reduce using rule 57 (factor -> cte .)
    CLOSEPAREN      reduce using rule 57 (factor -> cte .)
    COMA            reduce using rule 57 (factor -> cte .)


state 70

    (72) callfunction -> CALL . ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> CALL . ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    ID              shift and go to state 103


state 71

    (48) relopexpression -> exp .
    (49) relopexpression -> exp . func_relop RELOP func_relop_operation exp func_relop
    (115) func_relop -> .

    AND             reduce using rule 48 (relopexpression -> exp .)
    OR              reduce using rule 48 (relopexpression -> exp .)
    READ            reduce using rule 48 (relopexpression -> exp .)
    WRITE           reduce using rule 48 (relopexpression -> exp .)
    SET             reduce using rule 48 (relopexpression -> exp .)
    NOT             reduce using rule 48 (relopexpression -> exp .)
    IF              reduce using rule 48 (relopexpression -> exp .)
    WHILE           reduce using rule 48 (relopexpression -> exp .)
    DO              reduce using rule 48 (relopexpression -> exp .)
    CALL            reduce using rule 48 (relopexpression -> exp .)
    RETURN          reduce using rule 48 (relopexpression -> exp .)
    OPENPAREN       reduce using rule 48 (relopexpression -> exp .)
    ID              reduce using rule 48 (relopexpression -> exp .)
    BOOLCTE         reduce using rule 48 (relopexpression -> exp .)
    NUMBERCTE       reduce using rule 48 (relopexpression -> exp .)
    WORDCTE         reduce using rule 48 (relopexpression -> exp .)
    SENTENCECTE     reduce using rule 48 (relopexpression -> exp .)
    CLOSECURL       reduce using rule 48 (relopexpression -> exp .)
    ENDSTMT         reduce using rule 48 (relopexpression -> exp .)
    CLOSEPAREN      reduce using rule 48 (relopexpression -> exp .)
    COMA            reduce using rule 48 (relopexpression -> exp .)
    RELOP           reduce using rule 115 (func_relop -> .)

    func_relop                     shift and go to state 104

state 72

    (6) blockaux -> action . blockaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (88) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (37) statement -> . assign
    (38) statement -> . expression
    (39) statement -> . condition
    (40) statement -> . cycle
    (41) statement -> . callfunction
    (42) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (58) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (59) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (60) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (61) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (71) returnaux -> . RETURN expression func_return ENDSTMT
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 88 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 60
    SET             shift and go to state 50
    NOT             shift and go to state 61
    IF              shift and go to state 55
    WHILE           shift and go to state 68
    DO              shift and go to state 43
    CALL            shift and go to state 70
    RETURN          shift and go to state 48
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    returnaux                      shift and go to state 51
    callfunction                   shift and go to state 52
    statement                      shift and go to state 53
    input                          shift and go to state 54
    blockaux                       shift and go to state 105
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    cte                            shift and go to state 69
    empty                          shift and go to state 56
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    expression                     shift and go to state 74
    assign                         shift and go to state 75

state 73

    (9) action -> output .

    READ            reduce using rule 9 (action -> output .)
    WRITE           reduce using rule 9 (action -> output .)
    SET             reduce using rule 9 (action -> output .)
    NOT             reduce using rule 9 (action -> output .)
    IF              reduce using rule 9 (action -> output .)
    WHILE           reduce using rule 9 (action -> output .)
    DO              reduce using rule 9 (action -> output .)
    CALL            reduce using rule 9 (action -> output .)
    RETURN          reduce using rule 9 (action -> output .)
    OPENPAREN       reduce using rule 9 (action -> output .)
    ID              reduce using rule 9 (action -> output .)
    BOOLCTE         reduce using rule 9 (action -> output .)
    NUMBERCTE       reduce using rule 9 (action -> output .)
    WORDCTE         reduce using rule 9 (action -> output .)
    SENTENCECTE     reduce using rule 9 (action -> output .)
    CLOSECURL       reduce using rule 9 (action -> output .)


state 74

    (38) statement -> expression .

    READ            reduce using rule 38 (statement -> expression .)
    WRITE           reduce using rule 38 (statement -> expression .)
    SET             reduce using rule 38 (statement -> expression .)
    NOT             reduce using rule 38 (statement -> expression .)
    IF              reduce using rule 38 (statement -> expression .)
    WHILE           reduce using rule 38 (statement -> expression .)
    DO              reduce using rule 38 (statement -> expression .)
    CALL            reduce using rule 38 (statement -> expression .)
    RETURN          reduce using rule 38 (statement -> expression .)
    OPENPAREN       reduce using rule 38 (statement -> expression .)
    ID              reduce using rule 38 (statement -> expression .)
    BOOLCTE         reduce using rule 38 (statement -> expression .)
    NUMBERCTE       reduce using rule 38 (statement -> expression .)
    WORDCTE         reduce using rule 38 (statement -> expression .)
    SENTENCECTE     reduce using rule 38 (statement -> expression .)
    CLOSECURL       reduce using rule 38 (statement -> expression .)


state 75

    (37) statement -> assign .

    READ            reduce using rule 37 (statement -> assign .)
    WRITE           reduce using rule 37 (statement -> assign .)
    SET             reduce using rule 37 (statement -> assign .)
    NOT             reduce using rule 37 (statement -> assign .)
    IF              reduce using rule 37 (statement -> assign .)
    WHILE           reduce using rule 37 (statement -> assign .)
    DO              reduce using rule 37 (statement -> assign .)
    CALL            reduce using rule 37 (statement -> assign .)
    RETURN          reduce using rule 37 (statement -> assign .)
    OPENPAREN       reduce using rule 37 (statement -> assign .)
    ID              reduce using rule 37 (statement -> assign .)
    BOOLCTE         reduce using rule 37 (statement -> assign .)
    NUMBERCTE       reduce using rule 37 (statement -> assign .)
    WORDCTE         reduce using rule 37 (statement -> assign .)
    SENTENCECTE     reduce using rule 37 (statement -> assign .)
    CLOSECURL       reduce using rule 37 (statement -> assign .)


state 76

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END . func_end
    (133) func_end -> .

    $end            reduce using rule 133 (func_end -> .)

    func_end                       shift and go to state 106

state 77

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (66) parameter -> . type ID func_declare_par parameteraux
    (67) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (68) parameter -> . empty
    (33) type -> . BOOL func_type
    (34) type -> . NUMBER func_type
    (35) type -> . WORD func_type
    (36) type -> . SENTENCE func_type
    (88) empty -> .

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    parameter                      shift and go to state 109
    type                           shift and go to state 107
    empty                          shift and go to state 108

state 78

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 110


state 79

    (17) decaux -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array declareaux

    CLOSEBRAC       shift and go to state 111


state 80

    (19) declareaux -> COMA decaux .

    FUNC            reduce using rule 19 (declareaux -> COMA decaux .)
    BEGIN           reduce using rule 19 (declareaux -> COMA decaux .)
    READ            reduce using rule 19 (declareaux -> COMA decaux .)
    WRITE           reduce using rule 19 (declareaux -> COMA decaux .)
    SET             reduce using rule 19 (declareaux -> COMA decaux .)
    NOT             reduce using rule 19 (declareaux -> COMA decaux .)
    IF              reduce using rule 19 (declareaux -> COMA decaux .)
    WHILE           reduce using rule 19 (declareaux -> COMA decaux .)
    DO              reduce using rule 19 (declareaux -> COMA decaux .)
    CALL            reduce using rule 19 (declareaux -> COMA decaux .)
    RETURN          reduce using rule 19 (declareaux -> COMA decaux .)
    OPENPAREN       reduce using rule 19 (declareaux -> COMA decaux .)
    ID              reduce using rule 19 (declareaux -> COMA decaux .)
    BOOLCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    NUMBERCTE       reduce using rule 19 (declareaux -> COMA decaux .)
    WORDCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    SENTENCECTE     reduce using rule 19 (declareaux -> COMA decaux .)
    CLOSECURL       reduce using rule 19 (declareaux -> COMA decaux .)


state 81

    (61) cycle -> DO func_do . block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 112

state 82

    (31) cte -> WORDCTE func_wordCte . func_constant
    (96) func_constant -> .

    MULT            reduce using rule 96 (func_constant -> .)
    DIV             reduce using rule 96 (func_constant -> .)
    PLUS            reduce using rule 96 (func_constant -> .)
    MINUS           reduce using rule 96 (func_constant -> .)
    RELOP           reduce using rule 96 (func_constant -> .)
    AND             reduce using rule 96 (func_constant -> .)
    OR              reduce using rule 96 (func_constant -> .)
    READ            reduce using rule 96 (func_constant -> .)
    WRITE           reduce using rule 96 (func_constant -> .)
    SET             reduce using rule 96 (func_constant -> .)
    NOT             reduce using rule 96 (func_constant -> .)
    IF              reduce using rule 96 (func_constant -> .)
    WHILE           reduce using rule 96 (func_constant -> .)
    DO              reduce using rule 96 (func_constant -> .)
    CALL            reduce using rule 96 (func_constant -> .)
    RETURN          reduce using rule 96 (func_constant -> .)
    OPENPAREN       reduce using rule 96 (func_constant -> .)
    ID              reduce using rule 96 (func_constant -> .)
    BOOLCTE         reduce using rule 96 (func_constant -> .)
    NUMBERCTE       reduce using rule 96 (func_constant -> .)
    WORDCTE         reduce using rule 96 (func_constant -> .)
    SENTENCECTE     reduce using rule 96 (func_constant -> .)
    CLOSECURL       reduce using rule 96 (func_constant -> .)
    CLOSEBRAC       reduce using rule 96 (func_constant -> .)
    ENDSTMT         reduce using rule 96 (func_constant -> .)
    CLOSEPAREN      reduce using rule 96 (func_constant -> .)
    COMA            reduce using rule 96 (func_constant -> .)

    func_constant                  shift and go to state 113

state 83

    (29) cte -> BOOLCTE func_boolCte . func_constant
    (96) func_constant -> .

    MULT            reduce using rule 96 (func_constant -> .)
    DIV             reduce using rule 96 (func_constant -> .)
    PLUS            reduce using rule 96 (func_constant -> .)
    MINUS           reduce using rule 96 (func_constant -> .)
    RELOP           reduce using rule 96 (func_constant -> .)
    AND             reduce using rule 96 (func_constant -> .)
    OR              reduce using rule 96 (func_constant -> .)
    READ            reduce using rule 96 (func_constant -> .)
    WRITE           reduce using rule 96 (func_constant -> .)
    SET             reduce using rule 96 (func_constant -> .)
    NOT             reduce using rule 96 (func_constant -> .)
    IF              reduce using rule 96 (func_constant -> .)
    WHILE           reduce using rule 96 (func_constant -> .)
    DO              reduce using rule 96 (func_constant -> .)
    CALL            reduce using rule 96 (func_constant -> .)
    RETURN          reduce using rule 96 (func_constant -> .)
    OPENPAREN       reduce using rule 96 (func_constant -> .)
    ID              reduce using rule 96 (func_constant -> .)
    BOOLCTE         reduce using rule 96 (func_constant -> .)
    NUMBERCTE       reduce using rule 96 (func_constant -> .)
    WORDCTE         reduce using rule 96 (func_constant -> .)
    SENTENCECTE     reduce using rule 96 (func_constant -> .)
    CLOSECURL       reduce using rule 96 (func_constant -> .)
    CLOSEBRAC       reduce using rule 96 (func_constant -> .)
    ENDSTMT         reduce using rule 96 (func_constant -> .)
    CLOSEPAREN      reduce using rule 96 (func_constant -> .)
    COMA            reduce using rule 96 (func_constant -> .)

    func_constant                  shift and go to state 114

state 84

    (11) input -> READ OPENPAREN . ID func_read CLOSEPAREN ENDSTMT

    ID              shift and go to state 115


state 85

    (32) cte -> SENTENCECTE func_sentenceCte . func_constant
    (96) func_constant -> .

    MULT            reduce using rule 96 (func_constant -> .)
    DIV             reduce using rule 96 (func_constant -> .)
    PLUS            reduce using rule 96 (func_constant -> .)
    MINUS           reduce using rule 96 (func_constant -> .)
    RELOP           reduce using rule 96 (func_constant -> .)
    AND             reduce using rule 96 (func_constant -> .)
    OR              reduce using rule 96 (func_constant -> .)
    READ            reduce using rule 96 (func_constant -> .)
    WRITE           reduce using rule 96 (func_constant -> .)
    SET             reduce using rule 96 (func_constant -> .)
    NOT             reduce using rule 96 (func_constant -> .)
    IF              reduce using rule 96 (func_constant -> .)
    WHILE           reduce using rule 96 (func_constant -> .)
    DO              reduce using rule 96 (func_constant -> .)
    CALL            reduce using rule 96 (func_constant -> .)
    RETURN          reduce using rule 96 (func_constant -> .)
    OPENPAREN       reduce using rule 96 (func_constant -> .)
    ID              reduce using rule 96 (func_constant -> .)
    BOOLCTE         reduce using rule 96 (func_constant -> .)
    NUMBERCTE       reduce using rule 96 (func_constant -> .)
    WORDCTE         reduce using rule 96 (func_constant -> .)
    SENTENCECTE     reduce using rule 96 (func_constant -> .)
    CLOSECURL       reduce using rule 96 (func_constant -> .)
    CLOSEBRAC       reduce using rule 96 (func_constant -> .)
    ENDSTMT         reduce using rule 96 (func_constant -> .)
    CLOSEPAREN      reduce using rule 96 (func_constant -> .)
    COMA            reduce using rule 96 (func_constant -> .)

    func_constant                  shift and go to state 116

state 86

    (71) returnaux -> RETURN expression . func_return ENDSTMT
    (132) func_return -> .

    ENDSTMT         reduce using rule 132 (func_return -> .)

    func_return                    shift and go to state 117

state 87

    (56) factor -> OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 118


state 88

    (20) assign -> SET ID . func_constantID EQUAL func_assign assignaux
    (21) assign -> SET ID . OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (97) func_constantID -> .

    OPENBRAC        shift and go to state 119
    EQUAL           reduce using rule 97 (func_constantID -> .)

    func_constantID                shift and go to state 120

state 89

    (58) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block func_endIf
    (59) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 121

state 90

    (5) block -> OPENCURL blockaux CLOSECURL .

    END             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ELSE            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    READ            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WRITE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SET             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NOT             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    IF              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WHILE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    DO              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CALL            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    RETURN          reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    OPENPAREN       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ID              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    BOOLCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NUMBERCTE       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WORDCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SENTENCECTE     reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CLOSECURL       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)


state 91

    (55) term -> factor DIV . func_factor_operation term func_factor
    (112) func_factor_operation -> .

    OPENPAREN       reduce using rule 112 (func_factor_operation -> .)
    ID              reduce using rule 112 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 112 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 112 (func_factor_operation -> .)
    WORDCTE         reduce using rule 112 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 112 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 122

state 92

    (54) term -> factor MULT . func_factor_operation term func_factor
    (112) func_factor_operation -> .

    OPENPAREN       reduce using rule 112 (func_factor_operation -> .)
    ID              reduce using rule 112 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 112 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 112 (func_factor_operation -> .)
    WORDCTE         reduce using rule 112 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 112 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 123

state 93

    (12) output -> WRITE OPENPAREN . outputaux CLOSEPAREN ENDSTMT
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    outputaux                      shift and go to state 124
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 125

state 94

    (44) expression -> NOT func_logicOp_operation . logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 126
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 95

    (46) logexpression -> relopexpression AND . func_logicOp_operation logexpression func_logicOP
    (116) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 116 (func_logicOp_operation -> .)
    ID              reduce using rule 116 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 116 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 116 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 116 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 116 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 127

state 96

    (47) logexpression -> relopexpression OR . func_logicOp_operation logexpression func_logicOP
    (116) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 116 (func_logicOp_operation -> .)
    ID              reduce using rule 116 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 116 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 116 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 116 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 116 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 128

state 97

    (30) cte -> NUMBERCTE func_numberCte . func_constant
    (96) func_constant -> .

    MULT            reduce using rule 96 (func_constant -> .)
    DIV             reduce using rule 96 (func_constant -> .)
    PLUS            reduce using rule 96 (func_constant -> .)
    MINUS           reduce using rule 96 (func_constant -> .)
    RELOP           reduce using rule 96 (func_constant -> .)
    AND             reduce using rule 96 (func_constant -> .)
    OR              reduce using rule 96 (func_constant -> .)
    READ            reduce using rule 96 (func_constant -> .)
    WRITE           reduce using rule 96 (func_constant -> .)
    SET             reduce using rule 96 (func_constant -> .)
    NOT             reduce using rule 96 (func_constant -> .)
    IF              reduce using rule 96 (func_constant -> .)
    WHILE           reduce using rule 96 (func_constant -> .)
    DO              reduce using rule 96 (func_constant -> .)
    CALL            reduce using rule 96 (func_constant -> .)
    RETURN          reduce using rule 96 (func_constant -> .)
    OPENPAREN       reduce using rule 96 (func_constant -> .)
    ID              reduce using rule 96 (func_constant -> .)
    BOOLCTE         reduce using rule 96 (func_constant -> .)
    NUMBERCTE       reduce using rule 96 (func_constant -> .)
    WORDCTE         reduce using rule 96 (func_constant -> .)
    SENTENCECTE     reduce using rule 96 (func_constant -> .)
    CLOSECURL       reduce using rule 96 (func_constant -> .)
    CLOSEBRAC       reduce using rule 96 (func_constant -> .)
    ENDSTMT         reduce using rule 96 (func_constant -> .)
    CLOSEPAREN      reduce using rule 96 (func_constant -> .)
    COMA            reduce using rule 96 (func_constant -> .)

    func_constant                  shift and go to state 129

state 98

    (28) cte -> ID OPENBRAC . NUMBERCTE CLOSEBRAC func_constantIDArray

    NUMBERCTE       shift and go to state 130


state 99

    (27) cte -> ID func_constantID .

    MULT            reduce using rule 27 (cte -> ID func_constantID .)
    DIV             reduce using rule 27 (cte -> ID func_constantID .)
    PLUS            reduce using rule 27 (cte -> ID func_constantID .)
    MINUS           reduce using rule 27 (cte -> ID func_constantID .)
    RELOP           reduce using rule 27 (cte -> ID func_constantID .)
    AND             reduce using rule 27 (cte -> ID func_constantID .)
    OR              reduce using rule 27 (cte -> ID func_constantID .)
    READ            reduce using rule 27 (cte -> ID func_constantID .)
    WRITE           reduce using rule 27 (cte -> ID func_constantID .)
    SET             reduce using rule 27 (cte -> ID func_constantID .)
    NOT             reduce using rule 27 (cte -> ID func_constantID .)
    IF              reduce using rule 27 (cte -> ID func_constantID .)
    WHILE           reduce using rule 27 (cte -> ID func_constantID .)
    DO              reduce using rule 27 (cte -> ID func_constantID .)
    CALL            reduce using rule 27 (cte -> ID func_constantID .)
    RETURN          reduce using rule 27 (cte -> ID func_constantID .)
    OPENPAREN       reduce using rule 27 (cte -> ID func_constantID .)
    ID              reduce using rule 27 (cte -> ID func_constantID .)
    BOOLCTE         reduce using rule 27 (cte -> ID func_constantID .)
    NUMBERCTE       reduce using rule 27 (cte -> ID func_constantID .)
    WORDCTE         reduce using rule 27 (cte -> ID func_constantID .)
    SENTENCECTE     reduce using rule 27 (cte -> ID func_constantID .)
    CLOSECURL       reduce using rule 27 (cte -> ID func_constantID .)
    ENDSTMT         reduce using rule 27 (cte -> ID func_constantID .)
    CLOSEPAREN      reduce using rule 27 (cte -> ID func_constantID .)
    COMA            reduce using rule 27 (cte -> ID func_constantID .)
    CLOSEBRAC       reduce using rule 27 (cte -> ID func_constantID .)


state 100

    (51) exp -> term PLUS . func_term_operation exp func_term
    (110) func_term_operation -> .

    OPENPAREN       reduce using rule 110 (func_term_operation -> .)
    ID              reduce using rule 110 (func_term_operation -> .)
    BOOLCTE         reduce using rule 110 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 110 (func_term_operation -> .)
    WORDCTE         reduce using rule 110 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 110 (func_term_operation -> .)

    func_term_operation            shift and go to state 131

state 101

    (52) exp -> term MINUS . func_term_operation exp func_term
    (110) func_term_operation -> .

    OPENPAREN       reduce using rule 110 (func_term_operation -> .)
    ID              reduce using rule 110 (func_term_operation -> .)
    BOOLCTE         reduce using rule 110 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 110 (func_term_operation -> .)
    WORDCTE         reduce using rule 110 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 110 (func_term_operation -> .)

    func_term_operation            shift and go to state 132

state 102

    (60) cycle -> WHILE func_while . OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile

    OPENPAREN       shift and go to state 133


state 103

    (72) callfunction -> CALL ID . DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> CALL ID . func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (127) func_callFunc -> .

    DOT             shift and go to state 134
    OPENPAREN       reduce using rule 127 (func_callFunc -> .)

    func_callFunc                  shift and go to state 135

state 104

    (49) relopexpression -> exp func_relop . RELOP func_relop_operation exp func_relop

    RELOP           shift and go to state 136


state 105

    (6) blockaux -> action blockaux .

    CLOSECURL       reduce using rule 6 (blockaux -> action blockaux .)


state 106

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 2 (start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .)


state 107

    (66) parameter -> type . ID func_declare_par parameteraux
    (67) parameter -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux

    ID              shift and go to state 137


state 108

    (68) parameter -> empty .

    CLOSEPAREN      reduce using rule 68 (parameter -> empty .)


state 109

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL blockaux CLOSECURL

    CLOSEPAREN      shift and go to state 138


state 110

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END . func_end
    (133) func_end -> .

    $end            reduce using rule 133 (func_end -> .)

    func_end                       shift and go to state 139

state 111

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array declareaux
    (92) func_declare_array -> .

    ENDSTMT         reduce using rule 92 (func_declare_array -> .)
    COMA            reduce using rule 92 (func_declare_array -> .)

    func_declare_array             shift and go to state 140

state 112

    (61) cycle -> DO func_do block . WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    WHILE           shift and go to state 141


state 113

    (31) cte -> WORDCTE func_wordCte func_constant .

    MULT            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    DIV             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    PLUS            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    MINUS           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    RELOP           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    AND             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    OR              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    READ            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WRITE           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    SET             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    NOT             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    IF              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WHILE           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    DO              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CALL            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    RETURN          reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    OPENPAREN       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    ID              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    BOOLCTE         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    NUMBERCTE       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WORDCTE         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    SENTENCECTE     reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSECURL       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    ENDSTMT         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEPAREN      reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    COMA            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEBRAC       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)


state 114

    (29) cte -> BOOLCTE func_boolCte func_constant .

    MULT            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    DIV             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    PLUS            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    MINUS           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    RELOP           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    AND             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    OR              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    READ            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WRITE           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    SET             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    NOT             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    IF              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WHILE           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    DO              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CALL            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    RETURN          reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    OPENPAREN       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    ID              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    BOOLCTE         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    NUMBERCTE       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WORDCTE         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    SENTENCECTE     reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSECURL       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    ENDSTMT         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEPAREN      reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    COMA            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEBRAC       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)


state 115

    (11) input -> READ OPENPAREN ID . func_read CLOSEPAREN ENDSTMT
    (104) func_read -> .

    CLOSEPAREN      reduce using rule 104 (func_read -> .)

    func_read                      shift and go to state 142

state 116

    (32) cte -> SENTENCECTE func_sentenceCte func_constant .

    MULT            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DIV             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    PLUS            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    MINUS           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RELOP           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    AND             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OR              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    READ            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WRITE           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SET             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NOT             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    IF              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WHILE           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DO              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CALL            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RETURN          reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OPENPAREN       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ID              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    BOOLCTE         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NUMBERCTE       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WORDCTE         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SENTENCECTE     reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSECURL       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ENDSTMT         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEPAREN      reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    COMA            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEBRAC       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)


state 117

    (71) returnaux -> RETURN expression func_return . ENDSTMT

    ENDSTMT         shift and go to state 143


state 118

    (56) factor -> OPENPAREN expression CLOSEPAREN .

    MULT            reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    DIV             reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    PLUS            reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    MINUS           reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    RELOP           reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    AND             reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    OR              reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    READ            reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    WRITE           reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    SET             reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    NOT             reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    WHILE           reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    DO              reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    CALL            reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    RETURN          reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    ID              reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    BOOLCTE         reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    NUMBERCTE       reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    WORDCTE         reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    SENTENCECTE     reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSECURL       reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    ENDSTMT         reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)
    COMA            reduce using rule 56 (factor -> OPENPAREN expression CLOSEPAREN .)


state 119

    (21) assign -> SET ID OPENBRAC . NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    NUMBERCTE       shift and go to state 144


state 120

    (20) assign -> SET ID func_constantID . EQUAL func_assign assignaux

    EQUAL           shift and go to state 145


state 121

    (58) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block func_endIf
    (59) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block ELSE func_else block func_endElse

    CLOSEPAREN      shift and go to state 146


state 122

    (55) term -> factor DIV func_factor_operation . term func_factor
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 147
    cte                            shift and go to state 69
    factor                         shift and go to state 58

state 123

    (54) term -> factor MULT func_factor_operation . term func_factor
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 148
    cte                            shift and go to state 69
    factor                         shift and go to state 58

state 124

    (12) output -> WRITE OPENPAREN outputaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 149


state 125

    (13) outputaux -> expression . func_print
    (14) outputaux -> expression . func_print COMA outputaux
    (105) func_print -> .

    COMA            reduce using rule 105 (func_print -> .)
    CLOSEPAREN      reduce using rule 105 (func_print -> .)

    func_print                     shift and go to state 150

state 126

    (44) expression -> NOT func_logicOp_operation logexpression . func_logicOP
    (117) func_logicOP -> .

    READ            reduce using rule 117 (func_logicOP -> .)
    WRITE           reduce using rule 117 (func_logicOP -> .)
    SET             reduce using rule 117 (func_logicOP -> .)
    NOT             reduce using rule 117 (func_logicOP -> .)
    IF              reduce using rule 117 (func_logicOP -> .)
    WHILE           reduce using rule 117 (func_logicOP -> .)
    DO              reduce using rule 117 (func_logicOP -> .)
    CALL            reduce using rule 117 (func_logicOP -> .)
    RETURN          reduce using rule 117 (func_logicOP -> .)
    OPENPAREN       reduce using rule 117 (func_logicOP -> .)
    ID              reduce using rule 117 (func_logicOP -> .)
    BOOLCTE         reduce using rule 117 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 117 (func_logicOP -> .)
    WORDCTE         reduce using rule 117 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 117 (func_logicOP -> .)
    CLOSECURL       reduce using rule 117 (func_logicOP -> .)
    ENDSTMT         reduce using rule 117 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 117 (func_logicOP -> .)
    COMA            reduce using rule 117 (func_logicOP -> .)

    func_logicOP                   shift and go to state 151

state 127

    (46) logexpression -> relopexpression AND func_logicOp_operation . logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 152
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 128

    (47) logexpression -> relopexpression OR func_logicOp_operation . logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 153
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 129

    (30) cte -> NUMBERCTE func_numberCte func_constant .

    MULT            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    DIV             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    PLUS            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    MINUS           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    RELOP           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    AND             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    OR              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    READ            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WRITE           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    SET             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    NOT             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    IF              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WHILE           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    DO              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CALL            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    RETURN          reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    OPENPAREN       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    ID              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    BOOLCTE         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    NUMBERCTE       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WORDCTE         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    SENTENCECTE     reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSECURL       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    ENDSTMT         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEPAREN      reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    COMA            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEBRAC       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)


state 130

    (28) cte -> ID OPENBRAC NUMBERCTE . CLOSEBRAC func_constantIDArray

    CLOSEBRAC       shift and go to state 154


state 131

    (51) exp -> term PLUS func_term_operation . exp func_term
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 155
    factor                         shift and go to state 58

state 132

    (52) exp -> term MINUS func_term_operation . exp func_term
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 156
    factor                         shift and go to state 58

state 133

    (60) cycle -> WHILE func_while OPENPAREN . expression CLOSEPAREN func_whileExp block func_endWhile
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 157

state 134

    (72) callfunction -> CALL ID DOT . special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (77) special -> . LENGTH func_special
    (78) special -> . FREQUENCY func_special
    (79) special -> . SEARCH func_special
    (80) special -> . EXISTS func_special
    (81) special -> . MEAN func_special
    (82) special -> . MEDIAN func_special
    (83) special -> . MODE func_special
    (84) special -> . WORDCOUNT func_special
    (85) special -> . TOKENIZE func_special
    (86) special -> . REMOVE func_special
    (87) special -> . SORT func_special

    LENGTH          shift and go to state 165
    FREQUENCY       shift and go to state 166
    SEARCH          shift and go to state 160
    EXISTS          shift and go to state 161
    MEAN            shift and go to state 169
    MEDIAN          shift and go to state 163
    MODE            shift and go to state 167
    WORDCOUNT       shift and go to state 162
    TOKENIZE        shift and go to state 164
    REMOVE          shift and go to state 159
    SORT            shift and go to state 158

    special                        shift and go to state 168

state 135

    (73) callfunction -> CALL ID func_callFunc . OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    OPENPAREN       shift and go to state 170


state 136

    (49) relopexpression -> exp func_relop RELOP . func_relop_operation exp func_relop
    (114) func_relop_operation -> .

    OPENPAREN       reduce using rule 114 (func_relop_operation -> .)
    ID              reduce using rule 114 (func_relop_operation -> .)
    BOOLCTE         reduce using rule 114 (func_relop_operation -> .)
    NUMBERCTE       reduce using rule 114 (func_relop_operation -> .)
    WORDCTE         reduce using rule 114 (func_relop_operation -> .)
    SENTENCECTE     reduce using rule 114 (func_relop_operation -> .)

    func_relop_operation           shift and go to state 171

state 137

    (66) parameter -> type ID . func_declare_par parameteraux
    (67) parameter -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (93) func_declare_par -> .

    OPENBRAC        shift and go to state 173
    COMA            reduce using rule 93 (func_declare_par -> .)
    CLOSEPAREN      reduce using rule 93 (func_declare_par -> .)

    func_declare_par               shift and go to state 172

state 138

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 174


state 139

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 1 (start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .)


state 140

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 40
    COMA            shift and go to state 41

    declareaux                     shift and go to state 175

state 141

    (61) cycle -> DO func_do block WHILE . OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    OPENPAREN       shift and go to state 176


state 142

    (11) input -> READ OPENPAREN ID func_read . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 177


state 143

    (71) returnaux -> RETURN expression func_return ENDSTMT .

    READ            reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    WRITE           reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    SET             reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    NOT             reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    IF              reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    WHILE           reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    DO              reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    CALL            reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    RETURN          reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    OPENPAREN       reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    ID              reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    BOOLCTE         reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    NUMBERCTE       reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    WORDCTE         reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    SENTENCECTE     reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)
    CLOSECURL       reduce using rule 71 (returnaux -> RETURN expression func_return ENDSTMT .)


state 144

    (21) assign -> SET ID OPENBRAC NUMBERCTE . CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    CLOSEBRAC       shift and go to state 178


state 145

    (20) assign -> SET ID func_constantID EQUAL . func_assign assignaux
    (106) func_assign -> .

    OPENCURL        reduce using rule 106 (func_assign -> .)
    CALL            reduce using rule 106 (func_assign -> .)
    OPENPAREN       reduce using rule 106 (func_assign -> .)
    ID              reduce using rule 106 (func_assign -> .)
    BOOLCTE         reduce using rule 106 (func_assign -> .)
    NUMBERCTE       reduce using rule 106 (func_assign -> .)
    WORDCTE         reduce using rule 106 (func_assign -> .)
    SENTENCECTE     reduce using rule 106 (func_assign -> .)

    func_assign                    shift and go to state 179

state 146

    (58) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block func_endIf
    (59) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block ELSE func_else block func_endElse
    (118) func_if -> .

    OPENCURL        reduce using rule 118 (func_if -> .)

    func_if                        shift and go to state 180

state 147

    (55) term -> factor DIV func_factor_operation term . func_factor
    (113) func_factor -> .

    PLUS            reduce using rule 113 (func_factor -> .)
    MINUS           reduce using rule 113 (func_factor -> .)
    RELOP           reduce using rule 113 (func_factor -> .)
    AND             reduce using rule 113 (func_factor -> .)
    OR              reduce using rule 113 (func_factor -> .)
    READ            reduce using rule 113 (func_factor -> .)
    WRITE           reduce using rule 113 (func_factor -> .)
    SET             reduce using rule 113 (func_factor -> .)
    NOT             reduce using rule 113 (func_factor -> .)
    IF              reduce using rule 113 (func_factor -> .)
    WHILE           reduce using rule 113 (func_factor -> .)
    DO              reduce using rule 113 (func_factor -> .)
    CALL            reduce using rule 113 (func_factor -> .)
    RETURN          reduce using rule 113 (func_factor -> .)
    OPENPAREN       reduce using rule 113 (func_factor -> .)
    ID              reduce using rule 113 (func_factor -> .)
    BOOLCTE         reduce using rule 113 (func_factor -> .)
    NUMBERCTE       reduce using rule 113 (func_factor -> .)
    WORDCTE         reduce using rule 113 (func_factor -> .)
    SENTENCECTE     reduce using rule 113 (func_factor -> .)
    CLOSECURL       reduce using rule 113 (func_factor -> .)
    ENDSTMT         reduce using rule 113 (func_factor -> .)
    CLOSEPAREN      reduce using rule 113 (func_factor -> .)
    COMA            reduce using rule 113 (func_factor -> .)

    func_factor                    shift and go to state 181

state 148

    (54) term -> factor MULT func_factor_operation term . func_factor
    (113) func_factor -> .

    PLUS            reduce using rule 113 (func_factor -> .)
    MINUS           reduce using rule 113 (func_factor -> .)
    RELOP           reduce using rule 113 (func_factor -> .)
    AND             reduce using rule 113 (func_factor -> .)
    OR              reduce using rule 113 (func_factor -> .)
    READ            reduce using rule 113 (func_factor -> .)
    WRITE           reduce using rule 113 (func_factor -> .)
    SET             reduce using rule 113 (func_factor -> .)
    NOT             reduce using rule 113 (func_factor -> .)
    IF              reduce using rule 113 (func_factor -> .)
    WHILE           reduce using rule 113 (func_factor -> .)
    DO              reduce using rule 113 (func_factor -> .)
    CALL            reduce using rule 113 (func_factor -> .)
    RETURN          reduce using rule 113 (func_factor -> .)
    OPENPAREN       reduce using rule 113 (func_factor -> .)
    ID              reduce using rule 113 (func_factor -> .)
    BOOLCTE         reduce using rule 113 (func_factor -> .)
    NUMBERCTE       reduce using rule 113 (func_factor -> .)
    WORDCTE         reduce using rule 113 (func_factor -> .)
    SENTENCECTE     reduce using rule 113 (func_factor -> .)
    CLOSECURL       reduce using rule 113 (func_factor -> .)
    ENDSTMT         reduce using rule 113 (func_factor -> .)
    CLOSEPAREN      reduce using rule 113 (func_factor -> .)
    COMA            reduce using rule 113 (func_factor -> .)

    func_factor                    shift and go to state 182

state 149

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 183


state 150

    (13) outputaux -> expression func_print .
    (14) outputaux -> expression func_print . COMA outputaux

    CLOSEPAREN      reduce using rule 13 (outputaux -> expression func_print .)
    COMA            shift and go to state 184


state 151

    (44) expression -> NOT func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 44 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)


state 152

    (46) logexpression -> relopexpression AND func_logicOp_operation logexpression . func_logicOP
    (117) func_logicOP -> .

    READ            reduce using rule 117 (func_logicOP -> .)
    WRITE           reduce using rule 117 (func_logicOP -> .)
    SET             reduce using rule 117 (func_logicOP -> .)
    NOT             reduce using rule 117 (func_logicOP -> .)
    IF              reduce using rule 117 (func_logicOP -> .)
    WHILE           reduce using rule 117 (func_logicOP -> .)
    DO              reduce using rule 117 (func_logicOP -> .)
    CALL            reduce using rule 117 (func_logicOP -> .)
    RETURN          reduce using rule 117 (func_logicOP -> .)
    OPENPAREN       reduce using rule 117 (func_logicOP -> .)
    ID              reduce using rule 117 (func_logicOP -> .)
    BOOLCTE         reduce using rule 117 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 117 (func_logicOP -> .)
    WORDCTE         reduce using rule 117 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 117 (func_logicOP -> .)
    CLOSECURL       reduce using rule 117 (func_logicOP -> .)
    ENDSTMT         reduce using rule 117 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 117 (func_logicOP -> .)
    COMA            reduce using rule 117 (func_logicOP -> .)

    func_logicOP                   shift and go to state 185

state 153

    (47) logexpression -> relopexpression OR func_logicOp_operation logexpression . func_logicOP
    (117) func_logicOP -> .

    READ            reduce using rule 117 (func_logicOP -> .)
    WRITE           reduce using rule 117 (func_logicOP -> .)
    SET             reduce using rule 117 (func_logicOP -> .)
    NOT             reduce using rule 117 (func_logicOP -> .)
    IF              reduce using rule 117 (func_logicOP -> .)
    WHILE           reduce using rule 117 (func_logicOP -> .)
    DO              reduce using rule 117 (func_logicOP -> .)
    CALL            reduce using rule 117 (func_logicOP -> .)
    RETURN          reduce using rule 117 (func_logicOP -> .)
    OPENPAREN       reduce using rule 117 (func_logicOP -> .)
    ID              reduce using rule 117 (func_logicOP -> .)
    BOOLCTE         reduce using rule 117 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 117 (func_logicOP -> .)
    WORDCTE         reduce using rule 117 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 117 (func_logicOP -> .)
    CLOSECURL       reduce using rule 117 (func_logicOP -> .)
    ENDSTMT         reduce using rule 117 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 117 (func_logicOP -> .)
    COMA            reduce using rule 117 (func_logicOP -> .)

    func_logicOP                   shift and go to state 186

state 154

    (28) cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC . func_constantIDArray
    (98) func_constantIDArray -> .

    MULT            reduce using rule 98 (func_constantIDArray -> .)
    DIV             reduce using rule 98 (func_constantIDArray -> .)
    PLUS            reduce using rule 98 (func_constantIDArray -> .)
    MINUS           reduce using rule 98 (func_constantIDArray -> .)
    RELOP           reduce using rule 98 (func_constantIDArray -> .)
    AND             reduce using rule 98 (func_constantIDArray -> .)
    OR              reduce using rule 98 (func_constantIDArray -> .)
    READ            reduce using rule 98 (func_constantIDArray -> .)
    WRITE           reduce using rule 98 (func_constantIDArray -> .)
    SET             reduce using rule 98 (func_constantIDArray -> .)
    NOT             reduce using rule 98 (func_constantIDArray -> .)
    IF              reduce using rule 98 (func_constantIDArray -> .)
    WHILE           reduce using rule 98 (func_constantIDArray -> .)
    DO              reduce using rule 98 (func_constantIDArray -> .)
    CALL            reduce using rule 98 (func_constantIDArray -> .)
    RETURN          reduce using rule 98 (func_constantIDArray -> .)
    OPENPAREN       reduce using rule 98 (func_constantIDArray -> .)
    ID              reduce using rule 98 (func_constantIDArray -> .)
    BOOLCTE         reduce using rule 98 (func_constantIDArray -> .)
    NUMBERCTE       reduce using rule 98 (func_constantIDArray -> .)
    WORDCTE         reduce using rule 98 (func_constantIDArray -> .)
    SENTENCECTE     reduce using rule 98 (func_constantIDArray -> .)
    CLOSECURL       reduce using rule 98 (func_constantIDArray -> .)
    CLOSEBRAC       reduce using rule 98 (func_constantIDArray -> .)
    ENDSTMT         reduce using rule 98 (func_constantIDArray -> .)
    CLOSEPAREN      reduce using rule 98 (func_constantIDArray -> .)
    COMA            reduce using rule 98 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 187

state 155

    (51) exp -> term PLUS func_term_operation exp . func_term
    (111) func_term -> .

    RELOP           reduce using rule 111 (func_term -> .)
    AND             reduce using rule 111 (func_term -> .)
    OR              reduce using rule 111 (func_term -> .)
    READ            reduce using rule 111 (func_term -> .)
    WRITE           reduce using rule 111 (func_term -> .)
    SET             reduce using rule 111 (func_term -> .)
    NOT             reduce using rule 111 (func_term -> .)
    IF              reduce using rule 111 (func_term -> .)
    WHILE           reduce using rule 111 (func_term -> .)
    DO              reduce using rule 111 (func_term -> .)
    CALL            reduce using rule 111 (func_term -> .)
    RETURN          reduce using rule 111 (func_term -> .)
    OPENPAREN       reduce using rule 111 (func_term -> .)
    ID              reduce using rule 111 (func_term -> .)
    BOOLCTE         reduce using rule 111 (func_term -> .)
    NUMBERCTE       reduce using rule 111 (func_term -> .)
    WORDCTE         reduce using rule 111 (func_term -> .)
    SENTENCECTE     reduce using rule 111 (func_term -> .)
    CLOSECURL       reduce using rule 111 (func_term -> .)
    ENDSTMT         reduce using rule 111 (func_term -> .)
    CLOSEPAREN      reduce using rule 111 (func_term -> .)
    COMA            reduce using rule 111 (func_term -> .)

    func_term                      shift and go to state 188

state 156

    (52) exp -> term MINUS func_term_operation exp . func_term
    (111) func_term -> .

    RELOP           reduce using rule 111 (func_term -> .)
    AND             reduce using rule 111 (func_term -> .)
    OR              reduce using rule 111 (func_term -> .)
    READ            reduce using rule 111 (func_term -> .)
    WRITE           reduce using rule 111 (func_term -> .)
    SET             reduce using rule 111 (func_term -> .)
    NOT             reduce using rule 111 (func_term -> .)
    IF              reduce using rule 111 (func_term -> .)
    WHILE           reduce using rule 111 (func_term -> .)
    DO              reduce using rule 111 (func_term -> .)
    CALL            reduce using rule 111 (func_term -> .)
    RETURN          reduce using rule 111 (func_term -> .)
    OPENPAREN       reduce using rule 111 (func_term -> .)
    ID              reduce using rule 111 (func_term -> .)
    BOOLCTE         reduce using rule 111 (func_term -> .)
    NUMBERCTE       reduce using rule 111 (func_term -> .)
    WORDCTE         reduce using rule 111 (func_term -> .)
    SENTENCECTE     reduce using rule 111 (func_term -> .)
    CLOSECURL       reduce using rule 111 (func_term -> .)
    ENDSTMT         reduce using rule 111 (func_term -> .)
    CLOSEPAREN      reduce using rule 111 (func_term -> .)
    COMA            reduce using rule 111 (func_term -> .)

    func_term                      shift and go to state 189

state 157

    (60) cycle -> WHILE func_while OPENPAREN expression . CLOSEPAREN func_whileExp block func_endWhile

    CLOSEPAREN      shift and go to state 190


state 158

    (87) special -> SORT . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 191

state 159

    (86) special -> REMOVE . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 192

state 160

    (79) special -> SEARCH . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 193

state 161

    (80) special -> EXISTS . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 194

state 162

    (84) special -> WORDCOUNT . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 195

state 163

    (82) special -> MEDIAN . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 196

state 164

    (85) special -> TOKENIZE . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 197

state 165

    (77) special -> LENGTH . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 198

state 166

    (78) special -> FREQUENCY . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 199

state 167

    (83) special -> MODE . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 200

state 168

    (72) callfunction -> CALL ID DOT special . OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT

    OPENPAREN       shift and go to state 201


state 169

    (81) special -> MEAN . func_special
    (130) func_special -> .

    OPENPAREN       reduce using rule 130 (func_special -> .)

    func_special                   shift and go to state 202

state 170

    (73) callfunction -> CALL ID func_callFunc OPENPAREN . spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (74) spaux -> . cte func_callFuncParameter
    (75) spaux -> . cte func_callFuncParameter COMA spaux
    (76) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (88) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    spaux                          shift and go to state 203
    cte                            shift and go to state 205
    empty                          shift and go to state 204

state 171

    (49) relopexpression -> exp func_relop RELOP func_relop_operation . exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 206
    factor                         shift and go to state 58

state 172

    (66) parameter -> type ID func_declare_par . parameteraux
    (69) parameteraux -> . COMA parameter
    (70) parameteraux -> . empty
    (88) empty -> .

    COMA            shift and go to state 207
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    empty                          shift and go to state 209
    parameteraux                   shift and go to state 208

state 173

    (67) parameter -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (90) func_isSize -> .

    ID              reduce using rule 90 (func_isSize -> .)
    BOOLCTE         reduce using rule 90 (func_isSize -> .)
    NUMBERCTE       reduce using rule 90 (func_isSize -> .)
    WORDCTE         reduce using rule 90 (func_isSize -> .)
    SENTENCECTE     reduce using rule 90 (func_isSize -> .)

    func_isSize                    shift and go to state 210

state 174

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . declare blockaux CLOSECURL
    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . blockaux CLOSECURL
    (15) declare -> . DEC decaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (88) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (37) statement -> . assign
    (38) statement -> . expression
    (39) statement -> . condition
    (40) statement -> . cycle
    (41) statement -> . callfunction
    (42) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (58) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (59) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (60) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (61) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (71) returnaux -> . RETURN expression func_return ENDSTMT
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    DEC             shift and go to state 6
    CLOSECURL       reduce using rule 88 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 60
    SET             shift and go to state 50
    NOT             shift and go to state 61
    IF              shift and go to state 55
    WHILE           shift and go to state 68
    DO              shift and go to state 43
    CALL            shift and go to state 70
    RETURN          shift and go to state 48
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    returnaux                      shift and go to state 51
    callfunction                   shift and go to state 52
    statement                      shift and go to state 53
    input                          shift and go to state 54
    blockaux                       shift and go to state 211
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    expression                     shift and go to state 74
    declare                        shift and go to state 212
    cte                            shift and go to state 69
    empty                          shift and go to state 56
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    assign                         shift and go to state 75

state 175

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .

    FUNC            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BEGIN           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    READ            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WRITE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SET             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NOT             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    IF              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WHILE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    DO              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CALL            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    RETURN          reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    OPENPAREN       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ID              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BOOLCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NUMBERCTE       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WORDCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SENTENCECTE     reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CLOSECURL       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)


state 176

    (61) cycle -> DO func_do block WHILE OPENPAREN . expression CLOSEPAREN func_endDoWhile ENDSTMT
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 213

state 177

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 214


state 178

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC . func_constantIDArray EQUAL func_assign assignaux
    (98) func_constantIDArray -> .

    EQUAL           reduce using rule 98 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 215

state 179

    (20) assign -> SET ID func_constantID EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (24) assignaux -> . callfunction func_assign_value
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 216
    CALL            shift and go to state 70
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    callfunction                   shift and go to state 217
    factor                         shift and go to state 58
    assignaux                      shift and go to state 218
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 219

state 180

    (58) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block func_endIf
    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block ELSE func_else block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 220

state 181

    (55) term -> factor DIV func_factor_operation term func_factor .

    PLUS            reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    MINUS           reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    RELOP           reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    AND             reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    OR              reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    READ            reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    WRITE           reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    SET             reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    NOT             reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    IF              reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    WHILE           reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    DO              reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    CALL            reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    RETURN          reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    ID              reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)
    COMA            reduce using rule 55 (term -> factor DIV func_factor_operation term func_factor .)


state 182

    (54) term -> factor MULT func_factor_operation term func_factor .

    PLUS            reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    MINUS           reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    RELOP           reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    AND             reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    OR              reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    READ            reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    WRITE           reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    SET             reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    NOT             reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    IF              reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    WHILE           reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    DO              reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    CALL            reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    RETURN          reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    ID              reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)
    COMA            reduce using rule 54 (term -> factor MULT func_factor_operation term func_factor .)


state 183

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)


state 184

    (14) outputaux -> expression func_print COMA . outputaux
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 61
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    outputaux                      shift and go to state 221
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 125

state 185

    (46) logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 46 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)


state 186

    (47) logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 47 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)


state 187

    (28) cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .

    MULT            reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    DIV             reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    PLUS            reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    MINUS           reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    RELOP           reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    AND             reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    OR              reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    READ            reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WRITE           reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    SET             reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    NOT             reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    IF              reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WHILE           reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    DO              reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CALL            reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    RETURN          reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    OPENPAREN       reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    ID              reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    BOOLCTE         reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    NUMBERCTE       reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WORDCTE         reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    SENTENCECTE     reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSECURL       reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    ENDSTMT         reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSEPAREN      reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    COMA            reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSEBRAC       reduce using rule 28 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)


state 188

    (51) exp -> term PLUS func_term_operation exp func_term .

    RELOP           reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    AND             reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    OR              reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    READ            reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    WRITE           reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    SET             reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    NOT             reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    IF              reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    WHILE           reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    DO              reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    CALL            reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    RETURN          reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    ID              reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)
    COMA            reduce using rule 51 (exp -> term PLUS func_term_operation exp func_term .)


state 189

    (52) exp -> term MINUS func_term_operation exp func_term .

    RELOP           reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    AND             reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    OR              reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    READ            reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    WRITE           reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    SET             reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    NOT             reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    IF              reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    WHILE           reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    DO              reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    CALL            reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    RETURN          reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    ID              reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)
    COMA            reduce using rule 52 (exp -> term MINUS func_term_operation exp func_term .)


state 190

    (60) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN . func_whileExp block func_endWhile
    (125) func_whileExp -> .

    OPENCURL        reduce using rule 125 (func_whileExp -> .)

    func_whileExp                  shift and go to state 222

state 191

    (87) special -> SORT func_special .

    OPENPAREN       reduce using rule 87 (special -> SORT func_special .)


state 192

    (86) special -> REMOVE func_special .

    OPENPAREN       reduce using rule 86 (special -> REMOVE func_special .)


state 193

    (79) special -> SEARCH func_special .

    OPENPAREN       reduce using rule 79 (special -> SEARCH func_special .)


state 194

    (80) special -> EXISTS func_special .

    OPENPAREN       reduce using rule 80 (special -> EXISTS func_special .)


state 195

    (84) special -> WORDCOUNT func_special .

    OPENPAREN       reduce using rule 84 (special -> WORDCOUNT func_special .)


state 196

    (82) special -> MEDIAN func_special .

    OPENPAREN       reduce using rule 82 (special -> MEDIAN func_special .)


state 197

    (85) special -> TOKENIZE func_special .

    OPENPAREN       reduce using rule 85 (special -> TOKENIZE func_special .)


state 198

    (77) special -> LENGTH func_special .

    OPENPAREN       reduce using rule 77 (special -> LENGTH func_special .)


state 199

    (78) special -> FREQUENCY func_special .

    OPENPAREN       reduce using rule 78 (special -> FREQUENCY func_special .)


state 200

    (83) special -> MODE func_special .

    OPENPAREN       reduce using rule 83 (special -> MODE func_special .)


state 201

    (72) callfunction -> CALL ID DOT special OPENPAREN . spaux CLOSEPAREN func_callSpecial ENDSTMT
    (74) spaux -> . cte func_callFuncParameter
    (75) spaux -> . cte func_callFuncParameter COMA spaux
    (76) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (88) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    spaux                          shift and go to state 223
    cte                            shift and go to state 205
    empty                          shift and go to state 204

state 202

    (81) special -> MEAN func_special .

    OPENPAREN       reduce using rule 81 (special -> MEAN func_special .)


state 203

    (73) callfunction -> CALL ID func_callFunc OPENPAREN spaux . CLOSEPAREN func_endCallFunction ENDSTMT

    CLOSEPAREN      shift and go to state 224


state 204

    (76) spaux -> empty .

    CLOSEPAREN      reduce using rule 76 (spaux -> empty .)


state 205

    (74) spaux -> cte . func_callFuncParameter
    (75) spaux -> cte . func_callFuncParameter COMA spaux
    (128) func_callFuncParameter -> .

    COMA            reduce using rule 128 (func_callFuncParameter -> .)
    CLOSEPAREN      reduce using rule 128 (func_callFuncParameter -> .)

    func_callFuncParameter         shift and go to state 225

state 206

    (49) relopexpression -> exp func_relop RELOP func_relop_operation exp . func_relop
    (115) func_relop -> .

    AND             reduce using rule 115 (func_relop -> .)
    OR              reduce using rule 115 (func_relop -> .)
    READ            reduce using rule 115 (func_relop -> .)
    WRITE           reduce using rule 115 (func_relop -> .)
    SET             reduce using rule 115 (func_relop -> .)
    NOT             reduce using rule 115 (func_relop -> .)
    IF              reduce using rule 115 (func_relop -> .)
    WHILE           reduce using rule 115 (func_relop -> .)
    DO              reduce using rule 115 (func_relop -> .)
    CALL            reduce using rule 115 (func_relop -> .)
    RETURN          reduce using rule 115 (func_relop -> .)
    OPENPAREN       reduce using rule 115 (func_relop -> .)
    ID              reduce using rule 115 (func_relop -> .)
    BOOLCTE         reduce using rule 115 (func_relop -> .)
    NUMBERCTE       reduce using rule 115 (func_relop -> .)
    WORDCTE         reduce using rule 115 (func_relop -> .)
    SENTENCECTE     reduce using rule 115 (func_relop -> .)
    CLOSECURL       reduce using rule 115 (func_relop -> .)
    ENDSTMT         reduce using rule 115 (func_relop -> .)
    CLOSEPAREN      reduce using rule 115 (func_relop -> .)
    COMA            reduce using rule 115 (func_relop -> .)

    func_relop                     shift and go to state 226

state 207

    (69) parameteraux -> COMA . parameter
    (66) parameter -> . type ID func_declare_par parameteraux
    (67) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (68) parameter -> . empty
    (33) type -> . BOOL func_type
    (34) type -> . NUMBER func_type
    (35) type -> . WORD func_type
    (36) type -> . SENTENCE func_type
    (88) empty -> .

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    parameter                      shift and go to state 227
    type                           shift and go to state 107
    empty                          shift and go to state 108

state 208

    (66) parameter -> type ID func_declare_par parameteraux .

    CLOSEPAREN      reduce using rule 66 (parameter -> type ID func_declare_par parameteraux .)


state 209

    (70) parameteraux -> empty .

    CLOSEPAREN      reduce using rule 70 (parameteraux -> empty .)


state 210

    (67) parameter -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array parameteraux
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    cte                            shift and go to state 228

state 211

    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 229


state 212

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (88) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (37) statement -> . assign
    (38) statement -> . expression
    (39) statement -> . condition
    (40) statement -> . cycle
    (41) statement -> . callfunction
    (42) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (43) expression -> . logexpression
    (44) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (58) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (59) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (60) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (61) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (71) returnaux -> . RETURN expression func_return ENDSTMT
    (45) logexpression -> . relopexpression
    (46) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (48) relopexpression -> . exp
    (49) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 88 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 60
    SET             shift and go to state 50
    NOT             shift and go to state 61
    IF              shift and go to state 55
    WHILE           shift and go to state 68
    DO              shift and go to state 43
    CALL            shift and go to state 70
    RETURN          shift and go to state 48
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    returnaux                      shift and go to state 51
    callfunction                   shift and go to state 52
    statement                      shift and go to state 53
    input                          shift and go to state 54
    blockaux                       shift and go to state 230
    factor                         shift and go to state 58
    logexpression                  shift and go to state 59
    relopexpression                shift and go to state 62
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    expression                     shift and go to state 74
    cte                            shift and go to state 69
    empty                          shift and go to state 56
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    assign                         shift and go to state 75

state 213

    (61) cycle -> DO func_do block WHILE OPENPAREN expression . CLOSEPAREN func_endDoWhile ENDSTMT

    CLOSEPAREN      shift and go to state 231


state 214

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .

    READ            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)


state 215

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray . EQUAL func_assign assignaux

    EQUAL           shift and go to state 232


state 216

    (23) assignaux -> OPENCURL . assiaux CLOSECURL ENDSTMT func_assign_array_end
    (25) assiaux -> . exp func_assign_array
    (26) assiaux -> . exp func_assign_array COMA assiaux
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 67
    assiaux                        shift and go to state 233
    cte                            shift and go to state 69
    exp                            shift and go to state 234
    factor                         shift and go to state 58

state 217

    (24) assignaux -> callfunction . func_assign_value
    (107) func_assign_value -> .

    READ            reduce using rule 107 (func_assign_value -> .)
    WRITE           reduce using rule 107 (func_assign_value -> .)
    SET             reduce using rule 107 (func_assign_value -> .)
    NOT             reduce using rule 107 (func_assign_value -> .)
    IF              reduce using rule 107 (func_assign_value -> .)
    WHILE           reduce using rule 107 (func_assign_value -> .)
    DO              reduce using rule 107 (func_assign_value -> .)
    CALL            reduce using rule 107 (func_assign_value -> .)
    RETURN          reduce using rule 107 (func_assign_value -> .)
    OPENPAREN       reduce using rule 107 (func_assign_value -> .)
    ID              reduce using rule 107 (func_assign_value -> .)
    BOOLCTE         reduce using rule 107 (func_assign_value -> .)
    NUMBERCTE       reduce using rule 107 (func_assign_value -> .)
    WORDCTE         reduce using rule 107 (func_assign_value -> .)
    SENTENCECTE     reduce using rule 107 (func_assign_value -> .)
    CLOSECURL       reduce using rule 107 (func_assign_value -> .)

    func_assign_value              shift and go to state 235

state 218

    (20) assign -> SET ID func_constantID EQUAL func_assign assignaux .

    READ            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WRITE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SET             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NOT             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    IF              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WHILE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    DO              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CALL            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    RETURN          reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    ID              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)


state 219

    (22) assignaux -> exp . func_assign_value ENDSTMT
    (107) func_assign_value -> .

    ENDSTMT         reduce using rule 107 (func_assign_value -> .)

    func_assign_value              shift and go to state 236

state 220

    (58) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . func_endIf
    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . ELSE func_else block func_endElse
    (119) func_endIf -> .

    ELSE            shift and go to state 238
    READ            reduce using rule 119 (func_endIf -> .)
    WRITE           reduce using rule 119 (func_endIf -> .)
    SET             reduce using rule 119 (func_endIf -> .)
    NOT             reduce using rule 119 (func_endIf -> .)
    IF              reduce using rule 119 (func_endIf -> .)
    WHILE           reduce using rule 119 (func_endIf -> .)
    DO              reduce using rule 119 (func_endIf -> .)
    CALL            reduce using rule 119 (func_endIf -> .)
    RETURN          reduce using rule 119 (func_endIf -> .)
    OPENPAREN       reduce using rule 119 (func_endIf -> .)
    ID              reduce using rule 119 (func_endIf -> .)
    BOOLCTE         reduce using rule 119 (func_endIf -> .)
    NUMBERCTE       reduce using rule 119 (func_endIf -> .)
    WORDCTE         reduce using rule 119 (func_endIf -> .)
    SENTENCECTE     reduce using rule 119 (func_endIf -> .)
    CLOSECURL       reduce using rule 119 (func_endIf -> .)

    func_endIf                     shift and go to state 237

state 221

    (14) outputaux -> expression func_print COMA outputaux .

    CLOSEPAREN      reduce using rule 14 (outputaux -> expression func_print COMA outputaux .)


state 222

    (60) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp . block func_endWhile
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 239

state 223

    (72) callfunction -> CALL ID DOT special OPENPAREN spaux . CLOSEPAREN func_callSpecial ENDSTMT

    CLOSEPAREN      shift and go to state 240


state 224

    (73) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN . func_endCallFunction ENDSTMT
    (129) func_endCallFunction -> .

    ENDSTMT         reduce using rule 129 (func_endCallFunction -> .)

    func_endCallFunction           shift and go to state 241

state 225

    (74) spaux -> cte func_callFuncParameter .
    (75) spaux -> cte func_callFuncParameter . COMA spaux

    CLOSEPAREN      reduce using rule 74 (spaux -> cte func_callFuncParameter .)
    COMA            shift and go to state 242


state 226

    (49) relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .

    AND             reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OR              reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    READ            reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WRITE           reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SET             reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NOT             reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    IF              reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WHILE           reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    DO              reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CALL            reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    RETURN          reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OPENPAREN       reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ID              reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    BOOLCTE         reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NUMBERCTE       reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WORDCTE         reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SENTENCECTE     reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSECURL       reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ENDSTMT         reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSEPAREN      reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    COMA            reduce using rule 49 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)


state 227

    (69) parameteraux -> COMA parameter .

    CLOSEPAREN      reduce using rule 69 (parameteraux -> COMA parameter .)


state 228

    (67) parameter -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array parameteraux

    CLOSEBRAC       shift and go to state 243


state 229

    (63) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .

    FUNC            reduce using rule 63 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .)
    BEGIN           reduce using rule 63 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .)


state 230

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux . CLOSECURL

    CLOSECURL       shift and go to state 244


state 231

    (61) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN . func_endDoWhile ENDSTMT
    (123) func_endDoWhile -> .

    ENDSTMT         reduce using rule 123 (func_endDoWhile -> .)

    func_endDoWhile                shift and go to state 245

state 232

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL . func_assign assignaux
    (106) func_assign -> .

    OPENCURL        reduce using rule 106 (func_assign -> .)
    CALL            reduce using rule 106 (func_assign -> .)
    OPENPAREN       reduce using rule 106 (func_assign -> .)
    ID              reduce using rule 106 (func_assign -> .)
    BOOLCTE         reduce using rule 106 (func_assign -> .)
    NUMBERCTE       reduce using rule 106 (func_assign -> .)
    WORDCTE         reduce using rule 106 (func_assign -> .)
    SENTENCECTE     reduce using rule 106 (func_assign -> .)

    func_assign                    shift and go to state 246

state 233

    (23) assignaux -> OPENCURL assiaux . CLOSECURL ENDSTMT func_assign_array_end

    CLOSECURL       shift and go to state 247


state 234

    (25) assiaux -> exp . func_assign_array
    (26) assiaux -> exp . func_assign_array COMA assiaux
    (108) func_assign_array -> .

    COMA            reduce using rule 108 (func_assign_array -> .)
    CLOSECURL       reduce using rule 108 (func_assign_array -> .)

    func_assign_array              shift and go to state 248

state 235

    (24) assignaux -> callfunction func_assign_value .

    READ            reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WRITE           reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    SET             reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    NOT             reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    IF              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WHILE           reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    DO              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    CALL            reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    RETURN          reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    OPENPAREN       reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    ID              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    BOOLCTE         reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    NUMBERCTE       reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WORDCTE         reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    SENTENCECTE     reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    CLOSECURL       reduce using rule 24 (assignaux -> callfunction func_assign_value .)


state 236

    (22) assignaux -> exp func_assign_value . ENDSTMT

    ENDSTMT         shift and go to state 249


state 237

    (58) condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .

    READ            reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WRITE           reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SET             reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NOT             reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    IF              reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WHILE           reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    DO              reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CALL            reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    RETURN          reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    OPENPAREN       reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ID              reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    BOOLCTE         reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NUMBERCTE       reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WORDCTE         reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SENTENCECTE     reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CLOSECURL       reduce using rule 58 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)


state 238

    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE . func_else block func_endElse
    (120) func_else -> .

    OPENCURL        reduce using rule 120 (func_else -> .)

    func_else                      shift and go to state 250

state 239

    (60) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block . func_endWhile
    (126) func_endWhile -> .

    READ            reduce using rule 126 (func_endWhile -> .)
    WRITE           reduce using rule 126 (func_endWhile -> .)
    SET             reduce using rule 126 (func_endWhile -> .)
    NOT             reduce using rule 126 (func_endWhile -> .)
    IF              reduce using rule 126 (func_endWhile -> .)
    WHILE           reduce using rule 126 (func_endWhile -> .)
    DO              reduce using rule 126 (func_endWhile -> .)
    CALL            reduce using rule 126 (func_endWhile -> .)
    RETURN          reduce using rule 126 (func_endWhile -> .)
    OPENPAREN       reduce using rule 126 (func_endWhile -> .)
    ID              reduce using rule 126 (func_endWhile -> .)
    BOOLCTE         reduce using rule 126 (func_endWhile -> .)
    NUMBERCTE       reduce using rule 126 (func_endWhile -> .)
    WORDCTE         reduce using rule 126 (func_endWhile -> .)
    SENTENCECTE     reduce using rule 126 (func_endWhile -> .)
    CLOSECURL       reduce using rule 126 (func_endWhile -> .)

    func_endWhile                  shift and go to state 251

state 240

    (72) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN . func_callSpecial ENDSTMT
    (131) func_callSpecial -> .

    ENDSTMT         reduce using rule 131 (func_callSpecial -> .)

    func_callSpecial               shift and go to state 252

state 241

    (73) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction . ENDSTMT

    ENDSTMT         shift and go to state 253


state 242

    (75) spaux -> cte func_callFuncParameter COMA . spaux
    (74) spaux -> . cte func_callFuncParameter
    (75) spaux -> . cte func_callFuncParameter COMA spaux
    (76) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (88) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    spaux                          shift and go to state 254
    cte                            shift and go to state 205
    empty                          shift and go to state 204

state 243

    (67) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array parameteraux
    (92) func_declare_array -> .

    COMA            reduce using rule 92 (func_declare_array -> .)
    CLOSEPAREN      reduce using rule 92 (func_declare_array -> .)

    func_declare_array             shift and go to state 255

state 244

    (62) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .

    FUNC            reduce using rule 62 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .)
    BEGIN           reduce using rule 62 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .)


state 245

    (61) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile . ENDSTMT

    ENDSTMT         shift and go to state 256


state 246

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (24) assignaux -> . callfunction func_assign_value
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (72) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (73) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 216
    CALL            shift and go to state 70
    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    callfunction                   shift and go to state 217
    factor                         shift and go to state 58
    assignaux                      shift and go to state 257
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 219

state 247

    (23) assignaux -> OPENCURL assiaux CLOSECURL . ENDSTMT func_assign_array_end

    ENDSTMT         shift and go to state 258


state 248

    (25) assiaux -> exp func_assign_array .
    (26) assiaux -> exp func_assign_array . COMA assiaux

    CLOSECURL       reduce using rule 25 (assiaux -> exp func_assign_array .)
    COMA            shift and go to state 259


state 249

    (22) assignaux -> exp func_assign_value ENDSTMT .

    READ            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WRITE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SET             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NOT             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    IF              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WHILE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    DO              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CALL            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    RETURN          reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    OPENPAREN       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ID              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    BOOLCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NUMBERCTE       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WORDCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SENTENCECTE     reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CLOSECURL       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)


state 250

    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else . block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 260

state 251

    (60) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .

    READ            reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WRITE           reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SET             reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NOT             reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    IF              reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WHILE           reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    DO              reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CALL            reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    RETURN          reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    OPENPAREN       reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ID              reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    BOOLCTE         reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NUMBERCTE       reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WORDCTE         reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SENTENCECTE     reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CLOSECURL       reduce using rule 60 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)


state 252

    (72) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial . ENDSTMT

    ENDSTMT         shift and go to state 261


state 253

    (73) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .

    READ            reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WRITE           reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SET             reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NOT             reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    IF              reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WHILE           reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    DO              reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CALL            reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    RETURN          reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    OPENPAREN       reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ID              reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    BOOLCTE         reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NUMBERCTE       reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WORDCTE         reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SENTENCECTE     reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CLOSECURL       reduce using rule 73 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)


state 254

    (75) spaux -> cte func_callFuncParameter COMA spaux .

    CLOSEPAREN      reduce using rule 75 (spaux -> cte func_callFuncParameter COMA spaux .)


state 255

    (67) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . parameteraux
    (69) parameteraux -> . COMA parameter
    (70) parameteraux -> . empty
    (88) empty -> .

    COMA            shift and go to state 207
    CLOSEPAREN      reduce using rule 88 (empty -> .)

    parameteraux                   shift and go to state 262
    empty                          shift and go to state 209

state 256

    (61) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .

    READ            reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WRITE           reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SET             reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NOT             reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    IF              reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WHILE           reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    DO              reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CALL            reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    RETURN          reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    OPENPAREN       reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ID              reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    BOOLCTE         reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NUMBERCTE       reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WORDCTE         reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SENTENCECTE     reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CLOSECURL       reduce using rule 61 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)


state 257

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .

    READ            reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WRITE           reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SET             reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NOT             reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    IF              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WHILE           reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    DO              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CALL            reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    RETURN          reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    ID              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)


state 258

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT . func_assign_array_end
    (109) func_assign_array_end -> .

    READ            reduce using rule 109 (func_assign_array_end -> .)
    WRITE           reduce using rule 109 (func_assign_array_end -> .)
    SET             reduce using rule 109 (func_assign_array_end -> .)
    NOT             reduce using rule 109 (func_assign_array_end -> .)
    IF              reduce using rule 109 (func_assign_array_end -> .)
    WHILE           reduce using rule 109 (func_assign_array_end -> .)
    DO              reduce using rule 109 (func_assign_array_end -> .)
    CALL            reduce using rule 109 (func_assign_array_end -> .)
    RETURN          reduce using rule 109 (func_assign_array_end -> .)
    OPENPAREN       reduce using rule 109 (func_assign_array_end -> .)
    ID              reduce using rule 109 (func_assign_array_end -> .)
    BOOLCTE         reduce using rule 109 (func_assign_array_end -> .)
    NUMBERCTE       reduce using rule 109 (func_assign_array_end -> .)
    WORDCTE         reduce using rule 109 (func_assign_array_end -> .)
    SENTENCECTE     reduce using rule 109 (func_assign_array_end -> .)
    CLOSECURL       reduce using rule 109 (func_assign_array_end -> .)

    func_assign_array_end          shift and go to state 263

state 259

    (26) assiaux -> exp func_assign_array COMA . assiaux
    (25) assiaux -> . exp func_assign_array
    (26) assiaux -> . exp func_assign_array COMA assiaux
    (50) exp -> . term
    (51) exp -> . term PLUS func_term_operation exp func_term
    (52) exp -> . term MINUS func_term_operation exp func_term
    (53) term -> . factor
    (54) term -> . factor MULT func_factor_operation term func_factor
    (55) term -> . factor DIV func_factor_operation term func_factor
    (56) factor -> . OPENPAREN expression CLOSEPAREN
    (57) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 49
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 45
    NUMBERCTE       shift and go to state 63
    WORDCTE         shift and go to state 44
    SENTENCECTE     shift and go to state 47

    term                           shift and go to state 67
    assiaux                        shift and go to state 264
    cte                            shift and go to state 69
    exp                            shift and go to state 234
    factor                         shift and go to state 58

state 260

    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block . func_endElse
    (121) func_endElse -> .

    READ            reduce using rule 121 (func_endElse -> .)
    WRITE           reduce using rule 121 (func_endElse -> .)
    SET             reduce using rule 121 (func_endElse -> .)
    NOT             reduce using rule 121 (func_endElse -> .)
    IF              reduce using rule 121 (func_endElse -> .)
    WHILE           reduce using rule 121 (func_endElse -> .)
    DO              reduce using rule 121 (func_endElse -> .)
    CALL            reduce using rule 121 (func_endElse -> .)
    RETURN          reduce using rule 121 (func_endElse -> .)
    OPENPAREN       reduce using rule 121 (func_endElse -> .)
    ID              reduce using rule 121 (func_endElse -> .)
    BOOLCTE         reduce using rule 121 (func_endElse -> .)
    NUMBERCTE       reduce using rule 121 (func_endElse -> .)
    WORDCTE         reduce using rule 121 (func_endElse -> .)
    SENTENCECTE     reduce using rule 121 (func_endElse -> .)
    CLOSECURL       reduce using rule 121 (func_endElse -> .)

    func_endElse                   shift and go to state 265

state 261

    (72) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .

    READ            reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WRITE           reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    SET             reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    NOT             reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    IF              reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WHILE           reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    DO              reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    CALL            reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    RETURN          reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    OPENPAREN       reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    ID              reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    BOOLCTE         reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    NUMBERCTE       reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WORDCTE         reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    SENTENCECTE     reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    CLOSECURL       reduce using rule 72 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)


state 262

    (67) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .

    CLOSEPAREN      reduce using rule 67 (parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .)


state 263

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .

    READ            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WRITE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SET             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NOT             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    IF              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WHILE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    DO              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CALL            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    RETURN          reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    OPENPAREN       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    ID              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    BOOLCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NUMBERCTE       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WORDCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SENTENCECTE     reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CLOSECURL       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)


state 264

    (26) assiaux -> exp func_assign_array COMA assiaux .

    CLOSECURL       reduce using rule 26 (assiaux -> exp func_assign_array COMA assiaux .)


state 265

    (59) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .

    READ            reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WRITE           reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SET             reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NOT             reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    IF              reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WHILE           reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    DO              reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CALL            reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    RETURN          reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    OPENPAREN       reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ID              reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    BOOLCTE         reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NUMBERCTE       reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WORDCTE         reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SENTENCECTE     reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CLOSECURL       reduce using rule 59 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)

