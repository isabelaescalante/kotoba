Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
Rule 2     start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
Rule 3     startaux -> function startaux
Rule 4     startaux -> empty
Rule 5     block -> OPENCURL blockaux CLOSECURL
Rule 6     blockaux -> action blockaux
Rule 7     blockaux -> empty
Rule 8     action -> input
Rule 9     action -> output
Rule 10    action -> statement
Rule 11    input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
Rule 12    output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
Rule 13    outputaux -> expression func_print
Rule 14    outputaux -> expression func_print COMA outputaux
Rule 15    declare -> DEC decaux
Rule 16    decaux -> type ID func_declare_var declareaux
Rule 17    decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
Rule 18    declareaux -> ENDSTMT
Rule 19    declareaux -> COMA decaux
Rule 20    assign -> SET ID func_constantID EQUAL func_assign assignaux
Rule 21    assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
Rule 22    assignaux -> exp func_assign_value ENDSTMT
Rule 23    assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
Rule 24    assiaux -> exp func_assign_array
Rule 25    assiaux -> exp func_assign_array COMA assiaux
Rule 26    cte -> ID func_constantID
Rule 27    cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
Rule 28    cte -> BOOLCTE func_boolCte func_constant
Rule 29    cte -> NUMBERCTE func_numberCte func_constant
Rule 30    cte -> WORDCTE func_wordCte func_constant
Rule 31    cte -> SENTENCECTE func_sentenceCte func_constant
Rule 32    type -> BOOL func_type
Rule 33    type -> NUMBER func_type
Rule 34    type -> WORD func_type
Rule 35    type -> SENTENCE func_type
Rule 36    statement -> assign
Rule 37    statement -> expression
Rule 38    statement -> condition
Rule 39    statement -> cycle
Rule 40    statement -> callfunction
Rule 41    expression -> logexpression
Rule 42    expression -> NOT func_logicOp_operation logexpression func_logicOP
Rule 43    logexpression -> relopexpression
Rule 44    logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP
Rule 45    logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP
Rule 46    relopexpression -> exp
Rule 47    relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop
Rule 48    exp -> term
Rule 49    exp -> term PLUS func_term_operation exp func_term
Rule 50    exp -> term MINUS func_term_operation exp func_term
Rule 51    term -> factor
Rule 52    term -> factor MULT func_factor_operation term func_factor
Rule 53    term -> factor DIV func_factor_operation term func_factor
Rule 54    factor -> OPENPAREN expression CLOSEPAREN
Rule 55    factor -> cte
Rule 56    condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
Rule 57    condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
Rule 58    cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
Rule 59    cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
Rule 60    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
Rule 61    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
Rule 62    funcaux -> type
Rule 63    funcaux -> VOID
Rule 64    parameter -> type ID func_declare_par parameteraux
Rule 65    parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
Rule 66    parameteraux -> COMA parameter
Rule 67    parameteraux -> empty
Rule 68    returnaux -> RETURN ID func_return
Rule 69    returnaux -> empty
Rule 70    callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
Rule 71    callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
Rule 72    spaux -> cte func_callFuncParameter
Rule 73    spaux -> cte func_callFuncParameter COMA spaux
Rule 74    spaux -> empty
Rule 75    special -> LENGTH
Rule 76    special -> FREQUENCY
Rule 77    special -> SEARCH
Rule 78    special -> EXISTS
Rule 79    special -> MEAN
Rule 80    special -> MEDIAN
Rule 81    special -> MODE
Rule 82    special -> WORDCOUNT
Rule 83    special -> TOKENIZE
Rule 84    special -> REMOVE
Rule 85    empty -> <empty>
Rule 86    func_start -> <empty>
Rule 87    func_isSize -> <empty>
Rule 88    func_declare_var -> <empty>
Rule 89    func_declare_array -> <empty>
Rule 90    func_declare_par -> <empty>
Rule 91    func_declare_function -> <empty>
Rule 92    func_type -> <empty>
Rule 93    func_constant -> <empty>
Rule 94    func_constantID -> <empty>
Rule 95    func_constantIDArray -> <empty>
Rule 96    func_boolCte -> <empty>
Rule 97    func_numberCte -> <empty>
Rule 98    func_wordCte -> <empty>
Rule 99    func_sentenceCte -> <empty>
Rule 100   func_begin_main -> <empty>
Rule 101   func_read -> <empty>
Rule 102   func_print -> <empty>
Rule 103   func_assign -> <empty>
Rule 104   func_assign_value -> <empty>
Rule 105   func_assign_array -> <empty>
Rule 106   func_assign_array_end -> <empty>
Rule 107   func_term_operation -> <empty>
Rule 108   func_term -> <empty>
Rule 109   func_factor_operation -> <empty>
Rule 110   func_factor -> <empty>
Rule 111   func_relop_operation -> <empty>
Rule 112   func_relop -> <empty>
Rule 113   func_logicOp_operation -> <empty>
Rule 114   func_logicOP -> <empty>
Rule 115   func_if -> <empty>
Rule 116   func_endIf -> <empty>
Rule 117   func_else -> <empty>
Rule 118   func_endElse -> <empty>
Rule 119   func_do -> <empty>
Rule 120   func_endDoWhile -> <empty>
Rule 121   func_while -> <empty>
Rule 122   func_whileExp -> <empty>
Rule 123   func_endWhile -> <empty>
Rule 124   func_callFunc -> <empty>
Rule 125   func_callFuncParameter -> <empty>
Rule 126   func_endCallFunction -> <empty>
Rule 127   func_return -> <empty>
Rule 128   func_clear -> <empty>
Rule 129   func_end -> <empty>

Terminals, with rules where they appear

AND                  : 44
BEGIN                : 1 2
BOOL                 : 32
BOOLCTE              : 28
CALL                 : 70 71
CLOSEBRAC            : 17 21 27 65
CLOSECURL            : 5 23 60 61
CLOSEPAREN           : 11 12 54 56 57 58 59 60 61 70 71
COMA                 : 14 19 25 66 73
DEC                  : 15
DIV                  : 53
DO                   : 59
DOT                  : 70
ELSE                 : 57
END                  : 1 2
ENDSTMT              : 1 2 11 12 18 22 23 59 60 61 70 71
EQUAL                : 20 21
EXISTS               : 78
FREQUENCY            : 76
FUNC                 : 60 61
ID                   : 1 2 11 16 17 20 21 26 27 60 61 64 65 68 70 71
IF                   : 56 57
KOTOBA               : 1 2
LENGTH               : 75
MEAN                 : 79
MEDIAN               : 80
MINUS                : 50
MODE                 : 81
MULT                 : 52
NOT                  : 42
NUMBER               : 33
NUMBERCTE            : 21 27 29
OPENBRAC             : 17 21 27 65
OPENCURL             : 5 23 60 61
OPENPAREN            : 11 12 54 56 57 58 59 60 61 70 71
OR                   : 45
PLUS                 : 49
READ                 : 11
RELOP                : 47
REMOVE               : 84
RETURN               : 68
SEARCH               : 77
SENTENCE             : 35
SENTENCECTE          : 31
SET                  : 20 21
TOKENIZE             : 83
VOID                 : 63
WHILE                : 58 59
WORD                 : 34
WORDCOUNT            : 82
WORDCTE              : 30
WRITE                : 12
error                : 

Nonterminals, with rules where they appear

action               : 6
assiaux              : 23 25
assign               : 36
assignaux            : 20 21
block                : 1 2 56 57 57 58 59
blockaux             : 5 6 60 61
callfunction         : 40
condition            : 38
cte                  : 17 55 65 72 73
cycle                : 39
decaux               : 15 19
declare              : 1 60
declareaux           : 16 17
empty                : 4 7 67 69 74
exp                  : 22 24 25 46 47 47 49 50
expression           : 13 14 37 54 56 57 58 59
factor               : 51 52 53
func_assign          : 20 21
func_assign_array    : 24 25
func_assign_array_end : 23
func_assign_value    : 22
func_begin_main      : 1 2
func_boolCte         : 28
func_callFunc        : 71
func_callFuncParameter : 72 73
func_clear           : 60 61
func_constant        : 28 29 30 31
func_constantID      : 20 26
func_constantIDArray : 21 27
func_declare_array   : 17 65
func_declare_function : 60 61
func_declare_par     : 64
func_declare_var     : 16
func_do              : 59
func_else            : 57
func_end             : 1 2
func_endCallFunction : 71
func_endDoWhile      : 59
func_endElse         : 57
func_endIf           : 56
func_endWhile        : 58
func_factor          : 52 53
func_factor_operation : 52 53
func_if              : 56 57
func_isSize          : 17 65
func_logicOP         : 42 44 45
func_logicOp_operation : 42 44 45
func_numberCte       : 29
func_print           : 13 14
func_read            : 11
func_relop           : 47 47
func_relop_operation : 47
func_return          : 68
func_sentenceCte     : 31
func_start           : 1 2
func_term            : 49 50
func_term_operation  : 49 50
func_type            : 32 33 34 35
func_while           : 58
func_whileExp        : 58
func_wordCte         : 30
funcaux              : 60 61
function             : 3
input                : 8
logexpression        : 41 42 44 45
output               : 9
outputaux            : 12 14
parameter            : 60 61 66
parameteraux         : 64 65
relopexpression      : 43 44 45
returnaux            : 60 61
spaux                : 70 71 73
special              : 70
start                : 0
startaux             : 1 2 3
statement            : 10
term                 : 48 49 50 52 53
type                 : 16 17 62 64 65

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> . KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    KOTOBA          shift and go to state 1

    start                          shift and go to state 2

state 1

    (1) start -> KOTOBA . ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA . ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    ID              shift and go to state 3


state 2

    (0) S' -> start .



state 3

    (1) start -> KOTOBA ID . func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID . func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
    (86) func_start -> .

    ENDSTMT         reduce using rule 86 (func_start -> .)

    func_start                     shift and go to state 4

state 4

    (1) start -> KOTOBA ID func_start . ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start . ENDSTMT startaux BEGIN func_begin_main block END func_end

    ENDSTMT         shift and go to state 5


state 5

    (1) start -> KOTOBA ID func_start ENDSTMT . declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start ENDSTMT . startaux BEGIN func_begin_main block END func_end
    (15) declare -> . DEC decaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (85) empty -> .

    DEC             shift and go to state 6
    FUNC            shift and go to state 10
    BEGIN           reduce using rule 85 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 7
    declare                        shift and go to state 11

state 6

    (15) declare -> DEC . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (32) type -> . BOOL func_type
    (33) type -> . NUMBER func_type
    (34) type -> . WORD func_type
    (35) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 15
    type                           shift and go to state 17

state 7

    (2) start -> KOTOBA ID func_start ENDSTMT startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 18


state 8

    (4) startaux -> empty .

    BEGIN           reduce using rule 4 (startaux -> empty .)


state 9

    (3) startaux -> function . startaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (85) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 85 (empty -> .)

    function                       shift and go to state 9
    startaux                       shift and go to state 19
    empty                          shift and go to state 8

state 10

    (60) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (62) funcaux -> . type
    (63) funcaux -> . VOID
    (32) type -> . BOOL func_type
    (33) type -> . NUMBER func_type
    (34) type -> . WORD func_type
    (35) type -> . SENTENCE func_type

    VOID            shift and go to state 21
    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    type                           shift and go to state 20
    funcaux                        shift and go to state 22

state 11

    (1) start -> KOTOBA ID func_start ENDSTMT declare . startaux BEGIN func_begin_main block END func_end
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (85) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 85 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 23

state 12

    (35) type -> SENTENCE . func_type
    (92) func_type -> .

    ID              reduce using rule 92 (func_type -> .)

    func_type                      shift and go to state 24

state 13

    (33) type -> NUMBER . func_type
    (92) func_type -> .

    ID              reduce using rule 92 (func_type -> .)

    func_type                      shift and go to state 25

state 14

    (32) type -> BOOL . func_type
    (92) func_type -> .

    ID              reduce using rule 92 (func_type -> .)

    func_type                      shift and go to state 26

state 15

    (15) declare -> DEC decaux .

    READ            reduce using rule 15 (declare -> DEC decaux .)
    WRITE           reduce using rule 15 (declare -> DEC decaux .)
    SET             reduce using rule 15 (declare -> DEC decaux .)
    NOT             reduce using rule 15 (declare -> DEC decaux .)
    IF              reduce using rule 15 (declare -> DEC decaux .)
    WHILE           reduce using rule 15 (declare -> DEC decaux .)
    DO              reduce using rule 15 (declare -> DEC decaux .)
    CALL            reduce using rule 15 (declare -> DEC decaux .)
    OPENPAREN       reduce using rule 15 (declare -> DEC decaux .)
    ID              reduce using rule 15 (declare -> DEC decaux .)
    BOOLCTE         reduce using rule 15 (declare -> DEC decaux .)
    NUMBERCTE       reduce using rule 15 (declare -> DEC decaux .)
    WORDCTE         reduce using rule 15 (declare -> DEC decaux .)
    SENTENCECTE     reduce using rule 15 (declare -> DEC decaux .)
    RETURN          reduce using rule 15 (declare -> DEC decaux .)
    ENDSTMT         reduce using rule 15 (declare -> DEC decaux .)
    FUNC            reduce using rule 15 (declare -> DEC decaux .)
    BEGIN           reduce using rule 15 (declare -> DEC decaux .)


state 16

    (34) type -> WORD . func_type
    (92) func_type -> .

    ID              reduce using rule 92 (func_type -> .)

    func_type                      shift and go to state 27

state 17

    (16) decaux -> type . ID func_declare_var declareaux
    (17) decaux -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux

    ID              shift and go to state 28


state 18

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN . func_begin_main block END func_end
    (100) func_begin_main -> .

    OPENCURL        reduce using rule 100 (func_begin_main -> .)

    func_begin_main                shift and go to state 29

state 19

    (3) startaux -> function startaux .

    BEGIN           reduce using rule 3 (startaux -> function startaux .)


state 20

    (62) funcaux -> type .

    ID              reduce using rule 62 (funcaux -> type .)


state 21

    (63) funcaux -> VOID .

    ID              reduce using rule 63 (funcaux -> VOID .)


state 22

    (60) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    ID              shift and go to state 30


state 23

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 31


state 24

    (35) type -> SENTENCE func_type .

    ID              reduce using rule 35 (type -> SENTENCE func_type .)


state 25

    (33) type -> NUMBER func_type .

    ID              reduce using rule 33 (type -> NUMBER func_type .)


state 26

    (32) type -> BOOL func_type .

    ID              reduce using rule 32 (type -> BOOL func_type .)


state 27

    (34) type -> WORD func_type .

    ID              reduce using rule 34 (type -> WORD func_type .)


state 28

    (16) decaux -> type ID . func_declare_var declareaux
    (17) decaux -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (88) func_declare_var -> .

    OPENBRAC        shift and go to state 32
    ENDSTMT         reduce using rule 88 (func_declare_var -> .)
    COMA            reduce using rule 88 (func_declare_var -> .)

    func_declare_var               shift and go to state 33

state 29

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 35

state 30

    (60) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (91) func_declare_function -> .

    OPENPAREN       reduce using rule 91 (func_declare_function -> .)

    func_declare_function          shift and go to state 36

state 31

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN . func_begin_main block END func_end
    (100) func_begin_main -> .

    OPENCURL        reduce using rule 100 (func_begin_main -> .)

    func_begin_main                shift and go to state 37

state 32

    (17) decaux -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array declareaux
    (87) func_isSize -> .

    ID              reduce using rule 87 (func_isSize -> .)
    BOOLCTE         reduce using rule 87 (func_isSize -> .)
    NUMBERCTE       reduce using rule 87 (func_isSize -> .)
    WORDCTE         reduce using rule 87 (func_isSize -> .)
    SENTENCECTE     reduce using rule 87 (func_isSize -> .)

    func_isSize                    shift and go to state 38

state 33

    (16) decaux -> type ID func_declare_var . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 39
    COMA            shift and go to state 40

    declareaux                     shift and go to state 41

state 34

    (5) block -> OPENCURL . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (85) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (36) statement -> . assign
    (37) statement -> . expression
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . callfunction
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (57) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (58) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (59) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (70) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 85 (empty -> .)
    READ            shift and go to state 45
    WRITE           shift and go to state 57
    SET             shift and go to state 48
    NOT             shift and go to state 58
    IF              shift and go to state 52
    WHILE           shift and go to state 65
    DO              shift and go to state 42
    CALL            shift and go to state 67
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    callfunction                   shift and go to state 49
    statement                      shift and go to state 50
    input                          shift and go to state 51
    blockaux                       shift and go to state 54
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    condition                      shift and go to state 62
    cycle                          shift and go to state 63
    term                           shift and go to state 64
    cte                            shift and go to state 66
    empty                          shift and go to state 53
    exp                            shift and go to state 68
    action                         shift and go to state 69
    output                         shift and go to state 70
    expression                     shift and go to state 71
    assign                         shift and go to state 72

state 35

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 73


state 36

    (60) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    OPENPAREN       shift and go to state 74


state 37

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 75

state 38

    (17) decaux -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array declareaux
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    cte                            shift and go to state 76

state 39

    (18) declareaux -> ENDSTMT .

    FUNC            reduce using rule 18 (declareaux -> ENDSTMT .)
    BEGIN           reduce using rule 18 (declareaux -> ENDSTMT .)
    READ            reduce using rule 18 (declareaux -> ENDSTMT .)
    WRITE           reduce using rule 18 (declareaux -> ENDSTMT .)
    SET             reduce using rule 18 (declareaux -> ENDSTMT .)
    NOT             reduce using rule 18 (declareaux -> ENDSTMT .)
    IF              reduce using rule 18 (declareaux -> ENDSTMT .)
    WHILE           reduce using rule 18 (declareaux -> ENDSTMT .)
    DO              reduce using rule 18 (declareaux -> ENDSTMT .)
    CALL            reduce using rule 18 (declareaux -> ENDSTMT .)
    OPENPAREN       reduce using rule 18 (declareaux -> ENDSTMT .)
    ID              reduce using rule 18 (declareaux -> ENDSTMT .)
    BOOLCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    NUMBERCTE       reduce using rule 18 (declareaux -> ENDSTMT .)
    WORDCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    SENTENCECTE     reduce using rule 18 (declareaux -> ENDSTMT .)
    RETURN          reduce using rule 18 (declareaux -> ENDSTMT .)
    ENDSTMT         reduce using rule 18 (declareaux -> ENDSTMT .)


state 40

    (19) declareaux -> COMA . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (32) type -> . BOOL func_type
    (33) type -> . NUMBER func_type
    (34) type -> . WORD func_type
    (35) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 77
    type                           shift and go to state 17

state 41

    (16) decaux -> type ID func_declare_var declareaux .

    FUNC            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BEGIN           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    READ            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WRITE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SET             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NOT             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    IF              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WHILE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    DO              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CALL            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    OPENPAREN       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ID              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BOOLCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NUMBERCTE       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WORDCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SENTENCECTE     reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    RETURN          reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ENDSTMT         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)


state 42

    (59) cycle -> DO . func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (119) func_do -> .

    OPENCURL        reduce using rule 119 (func_do -> .)

    func_do                        shift and go to state 78

state 43

    (30) cte -> WORDCTE . func_wordCte func_constant
    (98) func_wordCte -> .

    MULT            reduce using rule 98 (func_wordCte -> .)
    DIV             reduce using rule 98 (func_wordCte -> .)
    PLUS            reduce using rule 98 (func_wordCte -> .)
    MINUS           reduce using rule 98 (func_wordCte -> .)
    RELOP           reduce using rule 98 (func_wordCte -> .)
    AND             reduce using rule 98 (func_wordCte -> .)
    OR              reduce using rule 98 (func_wordCte -> .)
    READ            reduce using rule 98 (func_wordCte -> .)
    WRITE           reduce using rule 98 (func_wordCte -> .)
    SET             reduce using rule 98 (func_wordCte -> .)
    NOT             reduce using rule 98 (func_wordCte -> .)
    IF              reduce using rule 98 (func_wordCte -> .)
    WHILE           reduce using rule 98 (func_wordCte -> .)
    DO              reduce using rule 98 (func_wordCte -> .)
    CALL            reduce using rule 98 (func_wordCte -> .)
    OPENPAREN       reduce using rule 98 (func_wordCte -> .)
    ID              reduce using rule 98 (func_wordCte -> .)
    BOOLCTE         reduce using rule 98 (func_wordCte -> .)
    NUMBERCTE       reduce using rule 98 (func_wordCte -> .)
    WORDCTE         reduce using rule 98 (func_wordCte -> .)
    SENTENCECTE     reduce using rule 98 (func_wordCte -> .)
    CLOSECURL       reduce using rule 98 (func_wordCte -> .)
    CLOSEBRAC       reduce using rule 98 (func_wordCte -> .)
    CLOSEPAREN      reduce using rule 98 (func_wordCte -> .)
    RETURN          reduce using rule 98 (func_wordCte -> .)
    ENDSTMT         reduce using rule 98 (func_wordCte -> .)
    COMA            reduce using rule 98 (func_wordCte -> .)

    func_wordCte                   shift and go to state 79

state 44

    (28) cte -> BOOLCTE . func_boolCte func_constant
    (96) func_boolCte -> .

    MULT            reduce using rule 96 (func_boolCte -> .)
    DIV             reduce using rule 96 (func_boolCte -> .)
    PLUS            reduce using rule 96 (func_boolCte -> .)
    MINUS           reduce using rule 96 (func_boolCte -> .)
    RELOP           reduce using rule 96 (func_boolCte -> .)
    AND             reduce using rule 96 (func_boolCte -> .)
    OR              reduce using rule 96 (func_boolCte -> .)
    READ            reduce using rule 96 (func_boolCte -> .)
    WRITE           reduce using rule 96 (func_boolCte -> .)
    SET             reduce using rule 96 (func_boolCte -> .)
    NOT             reduce using rule 96 (func_boolCte -> .)
    IF              reduce using rule 96 (func_boolCte -> .)
    WHILE           reduce using rule 96 (func_boolCte -> .)
    DO              reduce using rule 96 (func_boolCte -> .)
    CALL            reduce using rule 96 (func_boolCte -> .)
    OPENPAREN       reduce using rule 96 (func_boolCte -> .)
    ID              reduce using rule 96 (func_boolCte -> .)
    BOOLCTE         reduce using rule 96 (func_boolCte -> .)
    NUMBERCTE       reduce using rule 96 (func_boolCte -> .)
    WORDCTE         reduce using rule 96 (func_boolCte -> .)
    SENTENCECTE     reduce using rule 96 (func_boolCte -> .)
    CLOSECURL       reduce using rule 96 (func_boolCte -> .)
    CLOSEBRAC       reduce using rule 96 (func_boolCte -> .)
    CLOSEPAREN      reduce using rule 96 (func_boolCte -> .)
    RETURN          reduce using rule 96 (func_boolCte -> .)
    ENDSTMT         reduce using rule 96 (func_boolCte -> .)
    COMA            reduce using rule 96 (func_boolCte -> .)

    func_boolCte                   shift and go to state 80

state 45

    (11) input -> READ . OPENPAREN ID func_read CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 81


state 46

    (31) cte -> SENTENCECTE . func_sentenceCte func_constant
    (99) func_sentenceCte -> .

    MULT            reduce using rule 99 (func_sentenceCte -> .)
    DIV             reduce using rule 99 (func_sentenceCte -> .)
    PLUS            reduce using rule 99 (func_sentenceCte -> .)
    MINUS           reduce using rule 99 (func_sentenceCte -> .)
    RELOP           reduce using rule 99 (func_sentenceCte -> .)
    AND             reduce using rule 99 (func_sentenceCte -> .)
    OR              reduce using rule 99 (func_sentenceCte -> .)
    READ            reduce using rule 99 (func_sentenceCte -> .)
    WRITE           reduce using rule 99 (func_sentenceCte -> .)
    SET             reduce using rule 99 (func_sentenceCte -> .)
    NOT             reduce using rule 99 (func_sentenceCte -> .)
    IF              reduce using rule 99 (func_sentenceCte -> .)
    WHILE           reduce using rule 99 (func_sentenceCte -> .)
    DO              reduce using rule 99 (func_sentenceCte -> .)
    CALL            reduce using rule 99 (func_sentenceCte -> .)
    OPENPAREN       reduce using rule 99 (func_sentenceCte -> .)
    ID              reduce using rule 99 (func_sentenceCte -> .)
    BOOLCTE         reduce using rule 99 (func_sentenceCte -> .)
    NUMBERCTE       reduce using rule 99 (func_sentenceCte -> .)
    WORDCTE         reduce using rule 99 (func_sentenceCte -> .)
    SENTENCECTE     reduce using rule 99 (func_sentenceCte -> .)
    CLOSECURL       reduce using rule 99 (func_sentenceCte -> .)
    CLOSEBRAC       reduce using rule 99 (func_sentenceCte -> .)
    CLOSEPAREN      reduce using rule 99 (func_sentenceCte -> .)
    RETURN          reduce using rule 99 (func_sentenceCte -> .)
    ENDSTMT         reduce using rule 99 (func_sentenceCte -> .)
    COMA            reduce using rule 99 (func_sentenceCte -> .)

    func_sentenceCte               shift and go to state 82

state 47

    (54) factor -> OPENPAREN . expression CLOSEPAREN
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 83

state 48

    (20) assign -> SET . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> SET . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    ID              shift and go to state 84


state 49

    (40) statement -> callfunction .

    READ            reduce using rule 40 (statement -> callfunction .)
    WRITE           reduce using rule 40 (statement -> callfunction .)
    SET             reduce using rule 40 (statement -> callfunction .)
    NOT             reduce using rule 40 (statement -> callfunction .)
    IF              reduce using rule 40 (statement -> callfunction .)
    WHILE           reduce using rule 40 (statement -> callfunction .)
    DO              reduce using rule 40 (statement -> callfunction .)
    CALL            reduce using rule 40 (statement -> callfunction .)
    OPENPAREN       reduce using rule 40 (statement -> callfunction .)
    ID              reduce using rule 40 (statement -> callfunction .)
    BOOLCTE         reduce using rule 40 (statement -> callfunction .)
    NUMBERCTE       reduce using rule 40 (statement -> callfunction .)
    WORDCTE         reduce using rule 40 (statement -> callfunction .)
    SENTENCECTE     reduce using rule 40 (statement -> callfunction .)
    RETURN          reduce using rule 40 (statement -> callfunction .)
    ENDSTMT         reduce using rule 40 (statement -> callfunction .)
    CLOSECURL       reduce using rule 40 (statement -> callfunction .)


state 50

    (10) action -> statement .

    READ            reduce using rule 10 (action -> statement .)
    WRITE           reduce using rule 10 (action -> statement .)
    SET             reduce using rule 10 (action -> statement .)
    NOT             reduce using rule 10 (action -> statement .)
    IF              reduce using rule 10 (action -> statement .)
    WHILE           reduce using rule 10 (action -> statement .)
    DO              reduce using rule 10 (action -> statement .)
    CALL            reduce using rule 10 (action -> statement .)
    OPENPAREN       reduce using rule 10 (action -> statement .)
    ID              reduce using rule 10 (action -> statement .)
    BOOLCTE         reduce using rule 10 (action -> statement .)
    NUMBERCTE       reduce using rule 10 (action -> statement .)
    WORDCTE         reduce using rule 10 (action -> statement .)
    SENTENCECTE     reduce using rule 10 (action -> statement .)
    CLOSECURL       reduce using rule 10 (action -> statement .)
    RETURN          reduce using rule 10 (action -> statement .)
    ENDSTMT         reduce using rule 10 (action -> statement .)


state 51

    (8) action -> input .

    READ            reduce using rule 8 (action -> input .)
    WRITE           reduce using rule 8 (action -> input .)
    SET             reduce using rule 8 (action -> input .)
    NOT             reduce using rule 8 (action -> input .)
    IF              reduce using rule 8 (action -> input .)
    WHILE           reduce using rule 8 (action -> input .)
    DO              reduce using rule 8 (action -> input .)
    CALL            reduce using rule 8 (action -> input .)
    OPENPAREN       reduce using rule 8 (action -> input .)
    ID              reduce using rule 8 (action -> input .)
    BOOLCTE         reduce using rule 8 (action -> input .)
    NUMBERCTE       reduce using rule 8 (action -> input .)
    WORDCTE         reduce using rule 8 (action -> input .)
    SENTENCECTE     reduce using rule 8 (action -> input .)
    CLOSECURL       reduce using rule 8 (action -> input .)
    RETURN          reduce using rule 8 (action -> input .)
    ENDSTMT         reduce using rule 8 (action -> input .)


state 52

    (56) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (57) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse

    OPENPAREN       shift and go to state 85


state 53

    (7) blockaux -> empty .

    RETURN          reduce using rule 7 (blockaux -> empty .)
    ENDSTMT         reduce using rule 7 (blockaux -> empty .)
    CLOSECURL       reduce using rule 7 (blockaux -> empty .)


state 54

    (5) block -> OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 86


state 55

    (51) term -> factor .
    (52) term -> factor . MULT func_factor_operation term func_factor
    (53) term -> factor . DIV func_factor_operation term func_factor

    PLUS            reduce using rule 51 (term -> factor .)
    MINUS           reduce using rule 51 (term -> factor .)
    RELOP           reduce using rule 51 (term -> factor .)
    AND             reduce using rule 51 (term -> factor .)
    OR              reduce using rule 51 (term -> factor .)
    CLOSEPAREN      reduce using rule 51 (term -> factor .)
    COMA            reduce using rule 51 (term -> factor .)
    CLOSECURL       reduce using rule 51 (term -> factor .)
    READ            reduce using rule 51 (term -> factor .)
    WRITE           reduce using rule 51 (term -> factor .)
    SET             reduce using rule 51 (term -> factor .)
    NOT             reduce using rule 51 (term -> factor .)
    IF              reduce using rule 51 (term -> factor .)
    WHILE           reduce using rule 51 (term -> factor .)
    DO              reduce using rule 51 (term -> factor .)
    CALL            reduce using rule 51 (term -> factor .)
    OPENPAREN       reduce using rule 51 (term -> factor .)
    ID              reduce using rule 51 (term -> factor .)
    BOOLCTE         reduce using rule 51 (term -> factor .)
    NUMBERCTE       reduce using rule 51 (term -> factor .)
    WORDCTE         reduce using rule 51 (term -> factor .)
    SENTENCECTE     reduce using rule 51 (term -> factor .)
    RETURN          reduce using rule 51 (term -> factor .)
    ENDSTMT         reduce using rule 51 (term -> factor .)
    MULT            shift and go to state 88
    DIV             shift and go to state 87


state 56

    (41) expression -> logexpression .

    READ            reduce using rule 41 (expression -> logexpression .)
    WRITE           reduce using rule 41 (expression -> logexpression .)
    SET             reduce using rule 41 (expression -> logexpression .)
    NOT             reduce using rule 41 (expression -> logexpression .)
    IF              reduce using rule 41 (expression -> logexpression .)
    WHILE           reduce using rule 41 (expression -> logexpression .)
    DO              reduce using rule 41 (expression -> logexpression .)
    CALL            reduce using rule 41 (expression -> logexpression .)
    OPENPAREN       reduce using rule 41 (expression -> logexpression .)
    ID              reduce using rule 41 (expression -> logexpression .)
    BOOLCTE         reduce using rule 41 (expression -> logexpression .)
    NUMBERCTE       reduce using rule 41 (expression -> logexpression .)
    WORDCTE         reduce using rule 41 (expression -> logexpression .)
    SENTENCECTE     reduce using rule 41 (expression -> logexpression .)
    RETURN          reduce using rule 41 (expression -> logexpression .)
    ENDSTMT         reduce using rule 41 (expression -> logexpression .)
    CLOSEPAREN      reduce using rule 41 (expression -> logexpression .)
    CLOSECURL       reduce using rule 41 (expression -> logexpression .)
    COMA            reduce using rule 41 (expression -> logexpression .)


state 57

    (12) output -> WRITE . OPENPAREN outputaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 89


state 58

    (42) expression -> NOT . func_logicOp_operation logexpression func_logicOP
    (113) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 113 (func_logicOp_operation -> .)
    ID              reduce using rule 113 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 113 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 113 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 113 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 113 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 90

state 59

    (43) logexpression -> relopexpression .
    (44) logexpression -> relopexpression . AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> relopexpression . OR func_logicOp_operation logexpression func_logicOP

    COMA            reduce using rule 43 (logexpression -> relopexpression .)
    CLOSEPAREN      reduce using rule 43 (logexpression -> relopexpression .)
    READ            reduce using rule 43 (logexpression -> relopexpression .)
    WRITE           reduce using rule 43 (logexpression -> relopexpression .)
    SET             reduce using rule 43 (logexpression -> relopexpression .)
    NOT             reduce using rule 43 (logexpression -> relopexpression .)
    IF              reduce using rule 43 (logexpression -> relopexpression .)
    WHILE           reduce using rule 43 (logexpression -> relopexpression .)
    DO              reduce using rule 43 (logexpression -> relopexpression .)
    CALL            reduce using rule 43 (logexpression -> relopexpression .)
    OPENPAREN       reduce using rule 43 (logexpression -> relopexpression .)
    ID              reduce using rule 43 (logexpression -> relopexpression .)
    BOOLCTE         reduce using rule 43 (logexpression -> relopexpression .)
    NUMBERCTE       reduce using rule 43 (logexpression -> relopexpression .)
    WORDCTE         reduce using rule 43 (logexpression -> relopexpression .)
    SENTENCECTE     reduce using rule 43 (logexpression -> relopexpression .)
    CLOSECURL       reduce using rule 43 (logexpression -> relopexpression .)
    RETURN          reduce using rule 43 (logexpression -> relopexpression .)
    ENDSTMT         reduce using rule 43 (logexpression -> relopexpression .)
    AND             shift and go to state 91
    OR              shift and go to state 92


state 60

    (29) cte -> NUMBERCTE . func_numberCte func_constant
    (97) func_numberCte -> .

    MULT            reduce using rule 97 (func_numberCte -> .)
    DIV             reduce using rule 97 (func_numberCte -> .)
    PLUS            reduce using rule 97 (func_numberCte -> .)
    MINUS           reduce using rule 97 (func_numberCte -> .)
    RELOP           reduce using rule 97 (func_numberCte -> .)
    AND             reduce using rule 97 (func_numberCte -> .)
    OR              reduce using rule 97 (func_numberCte -> .)
    READ            reduce using rule 97 (func_numberCte -> .)
    WRITE           reduce using rule 97 (func_numberCte -> .)
    SET             reduce using rule 97 (func_numberCte -> .)
    NOT             reduce using rule 97 (func_numberCte -> .)
    IF              reduce using rule 97 (func_numberCte -> .)
    WHILE           reduce using rule 97 (func_numberCte -> .)
    DO              reduce using rule 97 (func_numberCte -> .)
    CALL            reduce using rule 97 (func_numberCte -> .)
    OPENPAREN       reduce using rule 97 (func_numberCte -> .)
    ID              reduce using rule 97 (func_numberCte -> .)
    BOOLCTE         reduce using rule 97 (func_numberCte -> .)
    NUMBERCTE       reduce using rule 97 (func_numberCte -> .)
    WORDCTE         reduce using rule 97 (func_numberCte -> .)
    SENTENCECTE     reduce using rule 97 (func_numberCte -> .)
    CLOSECURL       reduce using rule 97 (func_numberCte -> .)
    CLOSEBRAC       reduce using rule 97 (func_numberCte -> .)
    CLOSEPAREN      reduce using rule 97 (func_numberCte -> .)
    RETURN          reduce using rule 97 (func_numberCte -> .)
    ENDSTMT         reduce using rule 97 (func_numberCte -> .)
    COMA            reduce using rule 97 (func_numberCte -> .)

    func_numberCte                 shift and go to state 93

state 61

    (26) cte -> ID . func_constantID
    (27) cte -> ID . OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (94) func_constantID -> .

    OPENBRAC        shift and go to state 94
    MULT            reduce using rule 94 (func_constantID -> .)
    DIV             reduce using rule 94 (func_constantID -> .)
    PLUS            reduce using rule 94 (func_constantID -> .)
    MINUS           reduce using rule 94 (func_constantID -> .)
    RELOP           reduce using rule 94 (func_constantID -> .)
    AND             reduce using rule 94 (func_constantID -> .)
    OR              reduce using rule 94 (func_constantID -> .)
    READ            reduce using rule 94 (func_constantID -> .)
    WRITE           reduce using rule 94 (func_constantID -> .)
    SET             reduce using rule 94 (func_constantID -> .)
    NOT             reduce using rule 94 (func_constantID -> .)
    IF              reduce using rule 94 (func_constantID -> .)
    WHILE           reduce using rule 94 (func_constantID -> .)
    DO              reduce using rule 94 (func_constantID -> .)
    CALL            reduce using rule 94 (func_constantID -> .)
    OPENPAREN       reduce using rule 94 (func_constantID -> .)
    ID              reduce using rule 94 (func_constantID -> .)
    BOOLCTE         reduce using rule 94 (func_constantID -> .)
    NUMBERCTE       reduce using rule 94 (func_constantID -> .)
    WORDCTE         reduce using rule 94 (func_constantID -> .)
    SENTENCECTE     reduce using rule 94 (func_constantID -> .)
    CLOSECURL       reduce using rule 94 (func_constantID -> .)
    CLOSEBRAC       reduce using rule 94 (func_constantID -> .)
    CLOSEPAREN      reduce using rule 94 (func_constantID -> .)
    RETURN          reduce using rule 94 (func_constantID -> .)
    ENDSTMT         reduce using rule 94 (func_constantID -> .)
    COMA            reduce using rule 94 (func_constantID -> .)

    func_constantID                shift and go to state 95

state 62

    (38) statement -> condition .

    READ            reduce using rule 38 (statement -> condition .)
    WRITE           reduce using rule 38 (statement -> condition .)
    SET             reduce using rule 38 (statement -> condition .)
    NOT             reduce using rule 38 (statement -> condition .)
    IF              reduce using rule 38 (statement -> condition .)
    WHILE           reduce using rule 38 (statement -> condition .)
    DO              reduce using rule 38 (statement -> condition .)
    CALL            reduce using rule 38 (statement -> condition .)
    OPENPAREN       reduce using rule 38 (statement -> condition .)
    ID              reduce using rule 38 (statement -> condition .)
    BOOLCTE         reduce using rule 38 (statement -> condition .)
    NUMBERCTE       reduce using rule 38 (statement -> condition .)
    WORDCTE         reduce using rule 38 (statement -> condition .)
    SENTENCECTE     reduce using rule 38 (statement -> condition .)
    RETURN          reduce using rule 38 (statement -> condition .)
    ENDSTMT         reduce using rule 38 (statement -> condition .)
    CLOSECURL       reduce using rule 38 (statement -> condition .)


state 63

    (39) statement -> cycle .

    READ            reduce using rule 39 (statement -> cycle .)
    WRITE           reduce using rule 39 (statement -> cycle .)
    SET             reduce using rule 39 (statement -> cycle .)
    NOT             reduce using rule 39 (statement -> cycle .)
    IF              reduce using rule 39 (statement -> cycle .)
    WHILE           reduce using rule 39 (statement -> cycle .)
    DO              reduce using rule 39 (statement -> cycle .)
    CALL            reduce using rule 39 (statement -> cycle .)
    OPENPAREN       reduce using rule 39 (statement -> cycle .)
    ID              reduce using rule 39 (statement -> cycle .)
    BOOLCTE         reduce using rule 39 (statement -> cycle .)
    NUMBERCTE       reduce using rule 39 (statement -> cycle .)
    WORDCTE         reduce using rule 39 (statement -> cycle .)
    SENTENCECTE     reduce using rule 39 (statement -> cycle .)
    RETURN          reduce using rule 39 (statement -> cycle .)
    ENDSTMT         reduce using rule 39 (statement -> cycle .)
    CLOSECURL       reduce using rule 39 (statement -> cycle .)


state 64

    (48) exp -> term .
    (49) exp -> term . PLUS func_term_operation exp func_term
    (50) exp -> term . MINUS func_term_operation exp func_term

    RELOP           reduce using rule 48 (exp -> term .)
    AND             reduce using rule 48 (exp -> term .)
    OR              reduce using rule 48 (exp -> term .)
    COMA            reduce using rule 48 (exp -> term .)
    CLOSEPAREN      reduce using rule 48 (exp -> term .)
    READ            reduce using rule 48 (exp -> term .)
    WRITE           reduce using rule 48 (exp -> term .)
    SET             reduce using rule 48 (exp -> term .)
    NOT             reduce using rule 48 (exp -> term .)
    IF              reduce using rule 48 (exp -> term .)
    WHILE           reduce using rule 48 (exp -> term .)
    DO              reduce using rule 48 (exp -> term .)
    CALL            reduce using rule 48 (exp -> term .)
    OPENPAREN       reduce using rule 48 (exp -> term .)
    ID              reduce using rule 48 (exp -> term .)
    BOOLCTE         reduce using rule 48 (exp -> term .)
    NUMBERCTE       reduce using rule 48 (exp -> term .)
    WORDCTE         reduce using rule 48 (exp -> term .)
    SENTENCECTE     reduce using rule 48 (exp -> term .)
    RETURN          reduce using rule 48 (exp -> term .)
    ENDSTMT         reduce using rule 48 (exp -> term .)
    CLOSECURL       reduce using rule 48 (exp -> term .)
    PLUS            shift and go to state 96
    MINUS           shift and go to state 97


state 65

    (58) cycle -> WHILE . func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (121) func_while -> .

    OPENPAREN       reduce using rule 121 (func_while -> .)

    func_while                     shift and go to state 98

state 66

    (55) factor -> cte .

    MULT            reduce using rule 55 (factor -> cte .)
    DIV             reduce using rule 55 (factor -> cte .)
    PLUS            reduce using rule 55 (factor -> cte .)
    MINUS           reduce using rule 55 (factor -> cte .)
    RELOP           reduce using rule 55 (factor -> cte .)
    AND             reduce using rule 55 (factor -> cte .)
    OR              reduce using rule 55 (factor -> cte .)
    READ            reduce using rule 55 (factor -> cte .)
    WRITE           reduce using rule 55 (factor -> cte .)
    SET             reduce using rule 55 (factor -> cte .)
    NOT             reduce using rule 55 (factor -> cte .)
    IF              reduce using rule 55 (factor -> cte .)
    WHILE           reduce using rule 55 (factor -> cte .)
    DO              reduce using rule 55 (factor -> cte .)
    CALL            reduce using rule 55 (factor -> cte .)
    OPENPAREN       reduce using rule 55 (factor -> cte .)
    ID              reduce using rule 55 (factor -> cte .)
    BOOLCTE         reduce using rule 55 (factor -> cte .)
    NUMBERCTE       reduce using rule 55 (factor -> cte .)
    WORDCTE         reduce using rule 55 (factor -> cte .)
    SENTENCECTE     reduce using rule 55 (factor -> cte .)
    CLOSECURL       reduce using rule 55 (factor -> cte .)
    CLOSEPAREN      reduce using rule 55 (factor -> cte .)
    RETURN          reduce using rule 55 (factor -> cte .)
    ENDSTMT         reduce using rule 55 (factor -> cte .)
    COMA            reduce using rule 55 (factor -> cte .)


state 67

    (70) callfunction -> CALL . ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> CALL . ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    ID              shift and go to state 99


state 68

    (46) relopexpression -> exp .
    (47) relopexpression -> exp . func_relop RELOP func_relop_operation exp func_relop
    (112) func_relop -> .

    AND             reduce using rule 46 (relopexpression -> exp .)
    OR              reduce using rule 46 (relopexpression -> exp .)
    READ            reduce using rule 46 (relopexpression -> exp .)
    WRITE           reduce using rule 46 (relopexpression -> exp .)
    SET             reduce using rule 46 (relopexpression -> exp .)
    NOT             reduce using rule 46 (relopexpression -> exp .)
    IF              reduce using rule 46 (relopexpression -> exp .)
    WHILE           reduce using rule 46 (relopexpression -> exp .)
    DO              reduce using rule 46 (relopexpression -> exp .)
    CALL            reduce using rule 46 (relopexpression -> exp .)
    OPENPAREN       reduce using rule 46 (relopexpression -> exp .)
    ID              reduce using rule 46 (relopexpression -> exp .)
    BOOLCTE         reduce using rule 46 (relopexpression -> exp .)
    NUMBERCTE       reduce using rule 46 (relopexpression -> exp .)
    WORDCTE         reduce using rule 46 (relopexpression -> exp .)
    SENTENCECTE     reduce using rule 46 (relopexpression -> exp .)
    RETURN          reduce using rule 46 (relopexpression -> exp .)
    ENDSTMT         reduce using rule 46 (relopexpression -> exp .)
    CLOSECURL       reduce using rule 46 (relopexpression -> exp .)
    CLOSEPAREN      reduce using rule 46 (relopexpression -> exp .)
    COMA            reduce using rule 46 (relopexpression -> exp .)
    RELOP           reduce using rule 112 (func_relop -> .)

    func_relop                     shift and go to state 100

state 69

    (6) blockaux -> action . blockaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (85) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (36) statement -> . assign
    (37) statement -> . expression
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . callfunction
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (57) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (58) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (59) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (70) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 85 (empty -> .)
    RETURN          reduce using rule 85 (empty -> .)
    ENDSTMT         reduce using rule 85 (empty -> .)
    READ            shift and go to state 45
    WRITE           shift and go to state 57
    SET             shift and go to state 48
    NOT             shift and go to state 58
    IF              shift and go to state 52
    WHILE           shift and go to state 65
    DO              shift and go to state 42
    CALL            shift and go to state 67
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    callfunction                   shift and go to state 49
    statement                      shift and go to state 50
    input                          shift and go to state 51
    blockaux                       shift and go to state 101
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    condition                      shift and go to state 62
    cycle                          shift and go to state 63
    term                           shift and go to state 64
    cte                            shift and go to state 66
    empty                          shift and go to state 53
    exp                            shift and go to state 68
    action                         shift and go to state 69
    output                         shift and go to state 70
    expression                     shift and go to state 71
    assign                         shift and go to state 72

state 70

    (9) action -> output .

    READ            reduce using rule 9 (action -> output .)
    WRITE           reduce using rule 9 (action -> output .)
    SET             reduce using rule 9 (action -> output .)
    NOT             reduce using rule 9 (action -> output .)
    IF              reduce using rule 9 (action -> output .)
    WHILE           reduce using rule 9 (action -> output .)
    DO              reduce using rule 9 (action -> output .)
    CALL            reduce using rule 9 (action -> output .)
    OPENPAREN       reduce using rule 9 (action -> output .)
    ID              reduce using rule 9 (action -> output .)
    BOOLCTE         reduce using rule 9 (action -> output .)
    NUMBERCTE       reduce using rule 9 (action -> output .)
    WORDCTE         reduce using rule 9 (action -> output .)
    SENTENCECTE     reduce using rule 9 (action -> output .)
    CLOSECURL       reduce using rule 9 (action -> output .)
    RETURN          reduce using rule 9 (action -> output .)
    ENDSTMT         reduce using rule 9 (action -> output .)


state 71

    (37) statement -> expression .

    READ            reduce using rule 37 (statement -> expression .)
    WRITE           reduce using rule 37 (statement -> expression .)
    SET             reduce using rule 37 (statement -> expression .)
    NOT             reduce using rule 37 (statement -> expression .)
    IF              reduce using rule 37 (statement -> expression .)
    WHILE           reduce using rule 37 (statement -> expression .)
    DO              reduce using rule 37 (statement -> expression .)
    CALL            reduce using rule 37 (statement -> expression .)
    OPENPAREN       reduce using rule 37 (statement -> expression .)
    ID              reduce using rule 37 (statement -> expression .)
    BOOLCTE         reduce using rule 37 (statement -> expression .)
    NUMBERCTE       reduce using rule 37 (statement -> expression .)
    WORDCTE         reduce using rule 37 (statement -> expression .)
    SENTENCECTE     reduce using rule 37 (statement -> expression .)
    RETURN          reduce using rule 37 (statement -> expression .)
    ENDSTMT         reduce using rule 37 (statement -> expression .)
    CLOSECURL       reduce using rule 37 (statement -> expression .)


state 72

    (36) statement -> assign .

    READ            reduce using rule 36 (statement -> assign .)
    WRITE           reduce using rule 36 (statement -> assign .)
    SET             reduce using rule 36 (statement -> assign .)
    NOT             reduce using rule 36 (statement -> assign .)
    IF              reduce using rule 36 (statement -> assign .)
    WHILE           reduce using rule 36 (statement -> assign .)
    DO              reduce using rule 36 (statement -> assign .)
    CALL            reduce using rule 36 (statement -> assign .)
    OPENPAREN       reduce using rule 36 (statement -> assign .)
    ID              reduce using rule 36 (statement -> assign .)
    BOOLCTE         reduce using rule 36 (statement -> assign .)
    NUMBERCTE       reduce using rule 36 (statement -> assign .)
    WORDCTE         reduce using rule 36 (statement -> assign .)
    SENTENCECTE     reduce using rule 36 (statement -> assign .)
    RETURN          reduce using rule 36 (statement -> assign .)
    ENDSTMT         reduce using rule 36 (statement -> assign .)
    CLOSECURL       reduce using rule 36 (statement -> assign .)


state 73

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END . func_end
    (129) func_end -> .

    $end            reduce using rule 129 (func_end -> .)

    func_end                       shift and go to state 102

state 74

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (64) parameter -> . type ID func_declare_par parameteraux
    (65) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (32) type -> . BOOL func_type
    (33) type -> . NUMBER func_type
    (34) type -> . WORD func_type
    (35) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    type                           shift and go to state 103
    parameter                      shift and go to state 104

state 75

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 105


state 76

    (17) decaux -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array declareaux

    CLOSEBRAC       shift and go to state 106


state 77

    (19) declareaux -> COMA decaux .

    FUNC            reduce using rule 19 (declareaux -> COMA decaux .)
    BEGIN           reduce using rule 19 (declareaux -> COMA decaux .)
    READ            reduce using rule 19 (declareaux -> COMA decaux .)
    WRITE           reduce using rule 19 (declareaux -> COMA decaux .)
    SET             reduce using rule 19 (declareaux -> COMA decaux .)
    NOT             reduce using rule 19 (declareaux -> COMA decaux .)
    IF              reduce using rule 19 (declareaux -> COMA decaux .)
    WHILE           reduce using rule 19 (declareaux -> COMA decaux .)
    DO              reduce using rule 19 (declareaux -> COMA decaux .)
    CALL            reduce using rule 19 (declareaux -> COMA decaux .)
    OPENPAREN       reduce using rule 19 (declareaux -> COMA decaux .)
    ID              reduce using rule 19 (declareaux -> COMA decaux .)
    BOOLCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    NUMBERCTE       reduce using rule 19 (declareaux -> COMA decaux .)
    WORDCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    SENTENCECTE     reduce using rule 19 (declareaux -> COMA decaux .)
    RETURN          reduce using rule 19 (declareaux -> COMA decaux .)
    ENDSTMT         reduce using rule 19 (declareaux -> COMA decaux .)


state 78

    (59) cycle -> DO func_do . block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 107

state 79

    (30) cte -> WORDCTE func_wordCte . func_constant
    (93) func_constant -> .

    MULT            reduce using rule 93 (func_constant -> .)
    DIV             reduce using rule 93 (func_constant -> .)
    PLUS            reduce using rule 93 (func_constant -> .)
    MINUS           reduce using rule 93 (func_constant -> .)
    RELOP           reduce using rule 93 (func_constant -> .)
    AND             reduce using rule 93 (func_constant -> .)
    OR              reduce using rule 93 (func_constant -> .)
    READ            reduce using rule 93 (func_constant -> .)
    WRITE           reduce using rule 93 (func_constant -> .)
    SET             reduce using rule 93 (func_constant -> .)
    NOT             reduce using rule 93 (func_constant -> .)
    IF              reduce using rule 93 (func_constant -> .)
    WHILE           reduce using rule 93 (func_constant -> .)
    DO              reduce using rule 93 (func_constant -> .)
    CALL            reduce using rule 93 (func_constant -> .)
    OPENPAREN       reduce using rule 93 (func_constant -> .)
    ID              reduce using rule 93 (func_constant -> .)
    BOOLCTE         reduce using rule 93 (func_constant -> .)
    NUMBERCTE       reduce using rule 93 (func_constant -> .)
    WORDCTE         reduce using rule 93 (func_constant -> .)
    SENTENCECTE     reduce using rule 93 (func_constant -> .)
    CLOSECURL       reduce using rule 93 (func_constant -> .)
    CLOSEBRAC       reduce using rule 93 (func_constant -> .)
    CLOSEPAREN      reduce using rule 93 (func_constant -> .)
    RETURN          reduce using rule 93 (func_constant -> .)
    ENDSTMT         reduce using rule 93 (func_constant -> .)
    COMA            reduce using rule 93 (func_constant -> .)

    func_constant                  shift and go to state 108

state 80

    (28) cte -> BOOLCTE func_boolCte . func_constant
    (93) func_constant -> .

    MULT            reduce using rule 93 (func_constant -> .)
    DIV             reduce using rule 93 (func_constant -> .)
    PLUS            reduce using rule 93 (func_constant -> .)
    MINUS           reduce using rule 93 (func_constant -> .)
    RELOP           reduce using rule 93 (func_constant -> .)
    AND             reduce using rule 93 (func_constant -> .)
    OR              reduce using rule 93 (func_constant -> .)
    READ            reduce using rule 93 (func_constant -> .)
    WRITE           reduce using rule 93 (func_constant -> .)
    SET             reduce using rule 93 (func_constant -> .)
    NOT             reduce using rule 93 (func_constant -> .)
    IF              reduce using rule 93 (func_constant -> .)
    WHILE           reduce using rule 93 (func_constant -> .)
    DO              reduce using rule 93 (func_constant -> .)
    CALL            reduce using rule 93 (func_constant -> .)
    OPENPAREN       reduce using rule 93 (func_constant -> .)
    ID              reduce using rule 93 (func_constant -> .)
    BOOLCTE         reduce using rule 93 (func_constant -> .)
    NUMBERCTE       reduce using rule 93 (func_constant -> .)
    WORDCTE         reduce using rule 93 (func_constant -> .)
    SENTENCECTE     reduce using rule 93 (func_constant -> .)
    CLOSECURL       reduce using rule 93 (func_constant -> .)
    CLOSEBRAC       reduce using rule 93 (func_constant -> .)
    CLOSEPAREN      reduce using rule 93 (func_constant -> .)
    RETURN          reduce using rule 93 (func_constant -> .)
    ENDSTMT         reduce using rule 93 (func_constant -> .)
    COMA            reduce using rule 93 (func_constant -> .)

    func_constant                  shift and go to state 109

state 81

    (11) input -> READ OPENPAREN . ID func_read CLOSEPAREN ENDSTMT

    ID              shift and go to state 110


state 82

    (31) cte -> SENTENCECTE func_sentenceCte . func_constant
    (93) func_constant -> .

    MULT            reduce using rule 93 (func_constant -> .)
    DIV             reduce using rule 93 (func_constant -> .)
    PLUS            reduce using rule 93 (func_constant -> .)
    MINUS           reduce using rule 93 (func_constant -> .)
    RELOP           reduce using rule 93 (func_constant -> .)
    AND             reduce using rule 93 (func_constant -> .)
    OR              reduce using rule 93 (func_constant -> .)
    READ            reduce using rule 93 (func_constant -> .)
    WRITE           reduce using rule 93 (func_constant -> .)
    SET             reduce using rule 93 (func_constant -> .)
    NOT             reduce using rule 93 (func_constant -> .)
    IF              reduce using rule 93 (func_constant -> .)
    WHILE           reduce using rule 93 (func_constant -> .)
    DO              reduce using rule 93 (func_constant -> .)
    CALL            reduce using rule 93 (func_constant -> .)
    OPENPAREN       reduce using rule 93 (func_constant -> .)
    ID              reduce using rule 93 (func_constant -> .)
    BOOLCTE         reduce using rule 93 (func_constant -> .)
    NUMBERCTE       reduce using rule 93 (func_constant -> .)
    WORDCTE         reduce using rule 93 (func_constant -> .)
    SENTENCECTE     reduce using rule 93 (func_constant -> .)
    CLOSECURL       reduce using rule 93 (func_constant -> .)
    CLOSEBRAC       reduce using rule 93 (func_constant -> .)
    CLOSEPAREN      reduce using rule 93 (func_constant -> .)
    RETURN          reduce using rule 93 (func_constant -> .)
    ENDSTMT         reduce using rule 93 (func_constant -> .)
    COMA            reduce using rule 93 (func_constant -> .)

    func_constant                  shift and go to state 111

state 83

    (54) factor -> OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 112


state 84

    (20) assign -> SET ID . func_constantID EQUAL func_assign assignaux
    (21) assign -> SET ID . OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (94) func_constantID -> .

    OPENBRAC        shift and go to state 113
    EQUAL           reduce using rule 94 (func_constantID -> .)

    func_constantID                shift and go to state 114

state 85

    (56) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block func_endIf
    (57) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 115

state 86

    (5) block -> OPENCURL blockaux CLOSECURL .

    READ            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WRITE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SET             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NOT             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    IF              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WHILE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    DO              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CALL            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    OPENPAREN       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ID              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    BOOLCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NUMBERCTE       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WORDCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SENTENCECTE     reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CLOSECURL       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    RETURN          reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ENDSTMT         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    END             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ELSE            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)


state 87

    (53) term -> factor DIV . func_factor_operation term func_factor
    (109) func_factor_operation -> .

    OPENPAREN       reduce using rule 109 (func_factor_operation -> .)
    ID              reduce using rule 109 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 109 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 109 (func_factor_operation -> .)
    WORDCTE         reduce using rule 109 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 109 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 116

state 88

    (52) term -> factor MULT . func_factor_operation term func_factor
    (109) func_factor_operation -> .

    OPENPAREN       reduce using rule 109 (func_factor_operation -> .)
    ID              reduce using rule 109 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 109 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 109 (func_factor_operation -> .)
    WORDCTE         reduce using rule 109 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 109 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 117

state 89

    (12) output -> WRITE OPENPAREN . outputaux CLOSEPAREN ENDSTMT
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    outputaux                      shift and go to state 118
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 119

state 90

    (42) expression -> NOT func_logicOp_operation . logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 120
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68

state 91

    (44) logexpression -> relopexpression AND . func_logicOp_operation logexpression func_logicOP
    (113) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 113 (func_logicOp_operation -> .)
    ID              reduce using rule 113 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 113 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 113 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 113 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 113 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 121

state 92

    (45) logexpression -> relopexpression OR . func_logicOp_operation logexpression func_logicOP
    (113) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 113 (func_logicOp_operation -> .)
    ID              reduce using rule 113 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 113 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 113 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 113 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 113 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 122

state 93

    (29) cte -> NUMBERCTE func_numberCte . func_constant
    (93) func_constant -> .

    MULT            reduce using rule 93 (func_constant -> .)
    DIV             reduce using rule 93 (func_constant -> .)
    PLUS            reduce using rule 93 (func_constant -> .)
    MINUS           reduce using rule 93 (func_constant -> .)
    RELOP           reduce using rule 93 (func_constant -> .)
    AND             reduce using rule 93 (func_constant -> .)
    OR              reduce using rule 93 (func_constant -> .)
    READ            reduce using rule 93 (func_constant -> .)
    WRITE           reduce using rule 93 (func_constant -> .)
    SET             reduce using rule 93 (func_constant -> .)
    NOT             reduce using rule 93 (func_constant -> .)
    IF              reduce using rule 93 (func_constant -> .)
    WHILE           reduce using rule 93 (func_constant -> .)
    DO              reduce using rule 93 (func_constant -> .)
    CALL            reduce using rule 93 (func_constant -> .)
    OPENPAREN       reduce using rule 93 (func_constant -> .)
    ID              reduce using rule 93 (func_constant -> .)
    BOOLCTE         reduce using rule 93 (func_constant -> .)
    NUMBERCTE       reduce using rule 93 (func_constant -> .)
    WORDCTE         reduce using rule 93 (func_constant -> .)
    SENTENCECTE     reduce using rule 93 (func_constant -> .)
    CLOSECURL       reduce using rule 93 (func_constant -> .)
    CLOSEBRAC       reduce using rule 93 (func_constant -> .)
    CLOSEPAREN      reduce using rule 93 (func_constant -> .)
    RETURN          reduce using rule 93 (func_constant -> .)
    ENDSTMT         reduce using rule 93 (func_constant -> .)
    COMA            reduce using rule 93 (func_constant -> .)

    func_constant                  shift and go to state 123

state 94

    (27) cte -> ID OPENBRAC . NUMBERCTE CLOSEBRAC func_constantIDArray

    NUMBERCTE       shift and go to state 124


state 95

    (26) cte -> ID func_constantID .

    MULT            reduce using rule 26 (cte -> ID func_constantID .)
    DIV             reduce using rule 26 (cte -> ID func_constantID .)
    PLUS            reduce using rule 26 (cte -> ID func_constantID .)
    MINUS           reduce using rule 26 (cte -> ID func_constantID .)
    RELOP           reduce using rule 26 (cte -> ID func_constantID .)
    AND             reduce using rule 26 (cte -> ID func_constantID .)
    OR              reduce using rule 26 (cte -> ID func_constantID .)
    CLOSEPAREN      reduce using rule 26 (cte -> ID func_constantID .)
    READ            reduce using rule 26 (cte -> ID func_constantID .)
    WRITE           reduce using rule 26 (cte -> ID func_constantID .)
    SET             reduce using rule 26 (cte -> ID func_constantID .)
    NOT             reduce using rule 26 (cte -> ID func_constantID .)
    IF              reduce using rule 26 (cte -> ID func_constantID .)
    WHILE           reduce using rule 26 (cte -> ID func_constantID .)
    DO              reduce using rule 26 (cte -> ID func_constantID .)
    CALL            reduce using rule 26 (cte -> ID func_constantID .)
    OPENPAREN       reduce using rule 26 (cte -> ID func_constantID .)
    ID              reduce using rule 26 (cte -> ID func_constantID .)
    BOOLCTE         reduce using rule 26 (cte -> ID func_constantID .)
    NUMBERCTE       reduce using rule 26 (cte -> ID func_constantID .)
    WORDCTE         reduce using rule 26 (cte -> ID func_constantID .)
    SENTENCECTE     reduce using rule 26 (cte -> ID func_constantID .)
    CLOSECURL       reduce using rule 26 (cte -> ID func_constantID .)
    RETURN          reduce using rule 26 (cte -> ID func_constantID .)
    ENDSTMT         reduce using rule 26 (cte -> ID func_constantID .)
    COMA            reduce using rule 26 (cte -> ID func_constantID .)
    CLOSEBRAC       reduce using rule 26 (cte -> ID func_constantID .)


state 96

    (49) exp -> term PLUS . func_term_operation exp func_term
    (107) func_term_operation -> .

    OPENPAREN       reduce using rule 107 (func_term_operation -> .)
    ID              reduce using rule 107 (func_term_operation -> .)
    BOOLCTE         reduce using rule 107 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 107 (func_term_operation -> .)
    WORDCTE         reduce using rule 107 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 107 (func_term_operation -> .)

    func_term_operation            shift and go to state 125

state 97

    (50) exp -> term MINUS . func_term_operation exp func_term
    (107) func_term_operation -> .

    OPENPAREN       reduce using rule 107 (func_term_operation -> .)
    ID              reduce using rule 107 (func_term_operation -> .)
    BOOLCTE         reduce using rule 107 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 107 (func_term_operation -> .)
    WORDCTE         reduce using rule 107 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 107 (func_term_operation -> .)

    func_term_operation            shift and go to state 126

state 98

    (58) cycle -> WHILE func_while . OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile

    OPENPAREN       shift and go to state 127


state 99

    (70) callfunction -> CALL ID . DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> CALL ID . func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (124) func_callFunc -> .

    DOT             shift and go to state 128
    OPENPAREN       reduce using rule 124 (func_callFunc -> .)

    func_callFunc                  shift and go to state 129

state 100

    (47) relopexpression -> exp func_relop . RELOP func_relop_operation exp func_relop

    RELOP           shift and go to state 130


state 101

    (6) blockaux -> action blockaux .

    RETURN          reduce using rule 6 (blockaux -> action blockaux .)
    ENDSTMT         reduce using rule 6 (blockaux -> action blockaux .)
    CLOSECURL       reduce using rule 6 (blockaux -> action blockaux .)


state 102

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 2 (start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .)


state 103

    (64) parameter -> type . ID func_declare_par parameteraux
    (65) parameter -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux

    ID              shift and go to state 131


state 104

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    CLOSEPAREN      shift and go to state 132


state 105

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END . func_end
    (129) func_end -> .

    $end            reduce using rule 129 (func_end -> .)

    func_end                       shift and go to state 133

state 106

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array declareaux
    (89) func_declare_array -> .

    ENDSTMT         reduce using rule 89 (func_declare_array -> .)
    COMA            reduce using rule 89 (func_declare_array -> .)

    func_declare_array             shift and go to state 134

state 107

    (59) cycle -> DO func_do block . WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    WHILE           shift and go to state 135


state 108

    (30) cte -> WORDCTE func_wordCte func_constant .

    MULT            reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    DIV             reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    PLUS            reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    MINUS           reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    RELOP           reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    AND             reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    OR              reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEPAREN      reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    READ            reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    WRITE           reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    SET             reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    NOT             reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    IF              reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    WHILE           reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    DO              reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    CALL            reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    OPENPAREN       reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    ID              reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    BOOLCTE         reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    NUMBERCTE       reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    WORDCTE         reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    SENTENCECTE     reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSECURL       reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    RETURN          reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    ENDSTMT         reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    COMA            reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEBRAC       reduce using rule 30 (cte -> WORDCTE func_wordCte func_constant .)


state 109

    (28) cte -> BOOLCTE func_boolCte func_constant .

    MULT            reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    DIV             reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    PLUS            reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    MINUS           reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    RELOP           reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    AND             reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    OR              reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEPAREN      reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    READ            reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    WRITE           reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    SET             reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    NOT             reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    IF              reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    WHILE           reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    DO              reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    CALL            reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    OPENPAREN       reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    ID              reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    BOOLCTE         reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    NUMBERCTE       reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    WORDCTE         reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    SENTENCECTE     reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSECURL       reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    RETURN          reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    ENDSTMT         reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    COMA            reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEBRAC       reduce using rule 28 (cte -> BOOLCTE func_boolCte func_constant .)


state 110

    (11) input -> READ OPENPAREN ID . func_read CLOSEPAREN ENDSTMT
    (101) func_read -> .

    CLOSEPAREN      reduce using rule 101 (func_read -> .)

    func_read                      shift and go to state 136

state 111

    (31) cte -> SENTENCECTE func_sentenceCte func_constant .

    MULT            reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DIV             reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    PLUS            reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    MINUS           reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RELOP           reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    AND             reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OR              reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEPAREN      reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    READ            reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WRITE           reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SET             reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NOT             reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    IF              reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WHILE           reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DO              reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CALL            reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OPENPAREN       reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ID              reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    BOOLCTE         reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NUMBERCTE       reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WORDCTE         reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SENTENCECTE     reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSECURL       reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RETURN          reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ENDSTMT         reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    COMA            reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEBRAC       reduce using rule 31 (cte -> SENTENCECTE func_sentenceCte func_constant .)


state 112

    (54) factor -> OPENPAREN expression CLOSEPAREN .

    MULT            reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    DIV             reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    PLUS            reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    MINUS           reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    RELOP           reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    AND             reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    OR              reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    READ            reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    WRITE           reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    SET             reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    NOT             reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    WHILE           reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    DO              reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    CALL            reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    ID              reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    BOOLCTE         reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    NUMBERCTE       reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    WORDCTE         reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    SENTENCECTE     reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSECURL       reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    RETURN          reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    ENDSTMT         reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)
    COMA            reduce using rule 54 (factor -> OPENPAREN expression CLOSEPAREN .)


state 113

    (21) assign -> SET ID OPENBRAC . NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    NUMBERCTE       shift and go to state 137


state 114

    (20) assign -> SET ID func_constantID . EQUAL func_assign assignaux

    EQUAL           shift and go to state 138


state 115

    (56) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block func_endIf
    (57) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block ELSE func_else block func_endElse

    CLOSEPAREN      shift and go to state 139


state 116

    (53) term -> factor DIV func_factor_operation . term func_factor
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 140
    cte                            shift and go to state 66
    factor                         shift and go to state 55

state 117

    (52) term -> factor MULT func_factor_operation . term func_factor
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 141
    cte                            shift and go to state 66
    factor                         shift and go to state 55

state 118

    (12) output -> WRITE OPENPAREN outputaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 142


state 119

    (13) outputaux -> expression . func_print
    (14) outputaux -> expression . func_print COMA outputaux
    (102) func_print -> .

    COMA            reduce using rule 102 (func_print -> .)
    CLOSEPAREN      reduce using rule 102 (func_print -> .)

    func_print                     shift and go to state 143

state 120

    (42) expression -> NOT func_logicOp_operation logexpression . func_logicOP
    (114) func_logicOP -> .

    READ            reduce using rule 114 (func_logicOP -> .)
    WRITE           reduce using rule 114 (func_logicOP -> .)
    SET             reduce using rule 114 (func_logicOP -> .)
    NOT             reduce using rule 114 (func_logicOP -> .)
    IF              reduce using rule 114 (func_logicOP -> .)
    WHILE           reduce using rule 114 (func_logicOP -> .)
    DO              reduce using rule 114 (func_logicOP -> .)
    CALL            reduce using rule 114 (func_logicOP -> .)
    OPENPAREN       reduce using rule 114 (func_logicOP -> .)
    ID              reduce using rule 114 (func_logicOP -> .)
    BOOLCTE         reduce using rule 114 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 114 (func_logicOP -> .)
    WORDCTE         reduce using rule 114 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 114 (func_logicOP -> .)
    CLOSECURL       reduce using rule 114 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 114 (func_logicOP -> .)
    RETURN          reduce using rule 114 (func_logicOP -> .)
    ENDSTMT         reduce using rule 114 (func_logicOP -> .)
    COMA            reduce using rule 114 (func_logicOP -> .)

    func_logicOP                   shift and go to state 144

state 121

    (44) logexpression -> relopexpression AND func_logicOp_operation . logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 145
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68

state 122

    (45) logexpression -> relopexpression OR func_logicOp_operation . logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 146
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68

state 123

    (29) cte -> NUMBERCTE func_numberCte func_constant .

    MULT            reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    DIV             reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    PLUS            reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    MINUS           reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    RELOP           reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    AND             reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    OR              reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEPAREN      reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    READ            reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    WRITE           reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    SET             reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    NOT             reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    IF              reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    WHILE           reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    DO              reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    CALL            reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    OPENPAREN       reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    ID              reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    BOOLCTE         reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    NUMBERCTE       reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    WORDCTE         reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    SENTENCECTE     reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSECURL       reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    RETURN          reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    ENDSTMT         reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    COMA            reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEBRAC       reduce using rule 29 (cte -> NUMBERCTE func_numberCte func_constant .)


state 124

    (27) cte -> ID OPENBRAC NUMBERCTE . CLOSEBRAC func_constantIDArray

    CLOSEBRAC       shift and go to state 147


state 125

    (49) exp -> term PLUS func_term_operation . exp func_term
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 148
    factor                         shift and go to state 55

state 126

    (50) exp -> term MINUS func_term_operation . exp func_term
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 149
    factor                         shift and go to state 55

state 127

    (58) cycle -> WHILE func_while OPENPAREN . expression CLOSEPAREN func_whileExp block func_endWhile
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 150

state 128

    (70) callfunction -> CALL ID DOT . special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (75) special -> . LENGTH
    (76) special -> . FREQUENCY
    (77) special -> . SEARCH
    (78) special -> . EXISTS
    (79) special -> . MEAN
    (80) special -> . MEDIAN
    (81) special -> . MODE
    (82) special -> . WORDCOUNT
    (83) special -> . TOKENIZE
    (84) special -> . REMOVE

    LENGTH          shift and go to state 157
    FREQUENCY       shift and go to state 158
    SEARCH          shift and go to state 152
    EXISTS          shift and go to state 153
    MEAN            shift and go to state 161
    MEDIAN          shift and go to state 155
    MODE            shift and go to state 159
    WORDCOUNT       shift and go to state 154
    TOKENIZE        shift and go to state 156
    REMOVE          shift and go to state 151

    special                        shift and go to state 160

state 129

    (71) callfunction -> CALL ID func_callFunc . OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    OPENPAREN       shift and go to state 162


state 130

    (47) relopexpression -> exp func_relop RELOP . func_relop_operation exp func_relop
    (111) func_relop_operation -> .

    OPENPAREN       reduce using rule 111 (func_relop_operation -> .)
    ID              reduce using rule 111 (func_relop_operation -> .)
    BOOLCTE         reduce using rule 111 (func_relop_operation -> .)
    NUMBERCTE       reduce using rule 111 (func_relop_operation -> .)
    WORDCTE         reduce using rule 111 (func_relop_operation -> .)
    SENTENCECTE     reduce using rule 111 (func_relop_operation -> .)

    func_relop_operation           shift and go to state 163

state 131

    (64) parameter -> type ID . func_declare_par parameteraux
    (65) parameter -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (90) func_declare_par -> .

    OPENBRAC        shift and go to state 165
    COMA            reduce using rule 90 (func_declare_par -> .)
    CLOSEPAREN      reduce using rule 90 (func_declare_par -> .)

    func_declare_par               shift and go to state 164

state 132

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    OPENCURL        shift and go to state 166


state 133

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 1 (start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .)


state 134

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 39
    COMA            shift and go to state 40

    declareaux                     shift and go to state 167

state 135

    (59) cycle -> DO func_do block WHILE . OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    OPENPAREN       shift and go to state 168


state 136

    (11) input -> READ OPENPAREN ID func_read . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 169


state 137

    (21) assign -> SET ID OPENBRAC NUMBERCTE . CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    CLOSEBRAC       shift and go to state 170


state 138

    (20) assign -> SET ID func_constantID EQUAL . func_assign assignaux
    (103) func_assign -> .

    OPENCURL        reduce using rule 103 (func_assign -> .)
    OPENPAREN       reduce using rule 103 (func_assign -> .)
    ID              reduce using rule 103 (func_assign -> .)
    BOOLCTE         reduce using rule 103 (func_assign -> .)
    NUMBERCTE       reduce using rule 103 (func_assign -> .)
    WORDCTE         reduce using rule 103 (func_assign -> .)
    SENTENCECTE     reduce using rule 103 (func_assign -> .)

    func_assign                    shift and go to state 171

state 139

    (56) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block func_endIf
    (57) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block ELSE func_else block func_endElse
    (115) func_if -> .

    OPENCURL        reduce using rule 115 (func_if -> .)

    func_if                        shift and go to state 172

state 140

    (53) term -> factor DIV func_factor_operation term . func_factor
    (110) func_factor -> .

    PLUS            reduce using rule 110 (func_factor -> .)
    MINUS           reduce using rule 110 (func_factor -> .)
    RELOP           reduce using rule 110 (func_factor -> .)
    AND             reduce using rule 110 (func_factor -> .)
    OR              reduce using rule 110 (func_factor -> .)
    READ            reduce using rule 110 (func_factor -> .)
    WRITE           reduce using rule 110 (func_factor -> .)
    SET             reduce using rule 110 (func_factor -> .)
    NOT             reduce using rule 110 (func_factor -> .)
    IF              reduce using rule 110 (func_factor -> .)
    WHILE           reduce using rule 110 (func_factor -> .)
    DO              reduce using rule 110 (func_factor -> .)
    CALL            reduce using rule 110 (func_factor -> .)
    OPENPAREN       reduce using rule 110 (func_factor -> .)
    ID              reduce using rule 110 (func_factor -> .)
    BOOLCTE         reduce using rule 110 (func_factor -> .)
    NUMBERCTE       reduce using rule 110 (func_factor -> .)
    WORDCTE         reduce using rule 110 (func_factor -> .)
    SENTENCECTE     reduce using rule 110 (func_factor -> .)
    CLOSECURL       reduce using rule 110 (func_factor -> .)
    CLOSEPAREN      reduce using rule 110 (func_factor -> .)
    RETURN          reduce using rule 110 (func_factor -> .)
    ENDSTMT         reduce using rule 110 (func_factor -> .)
    COMA            reduce using rule 110 (func_factor -> .)

    func_factor                    shift and go to state 173

state 141

    (52) term -> factor MULT func_factor_operation term . func_factor
    (110) func_factor -> .

    PLUS            reduce using rule 110 (func_factor -> .)
    MINUS           reduce using rule 110 (func_factor -> .)
    RELOP           reduce using rule 110 (func_factor -> .)
    AND             reduce using rule 110 (func_factor -> .)
    OR              reduce using rule 110 (func_factor -> .)
    READ            reduce using rule 110 (func_factor -> .)
    WRITE           reduce using rule 110 (func_factor -> .)
    SET             reduce using rule 110 (func_factor -> .)
    NOT             reduce using rule 110 (func_factor -> .)
    IF              reduce using rule 110 (func_factor -> .)
    WHILE           reduce using rule 110 (func_factor -> .)
    DO              reduce using rule 110 (func_factor -> .)
    CALL            reduce using rule 110 (func_factor -> .)
    OPENPAREN       reduce using rule 110 (func_factor -> .)
    ID              reduce using rule 110 (func_factor -> .)
    BOOLCTE         reduce using rule 110 (func_factor -> .)
    NUMBERCTE       reduce using rule 110 (func_factor -> .)
    WORDCTE         reduce using rule 110 (func_factor -> .)
    SENTENCECTE     reduce using rule 110 (func_factor -> .)
    CLOSECURL       reduce using rule 110 (func_factor -> .)
    CLOSEPAREN      reduce using rule 110 (func_factor -> .)
    RETURN          reduce using rule 110 (func_factor -> .)
    ENDSTMT         reduce using rule 110 (func_factor -> .)
    COMA            reduce using rule 110 (func_factor -> .)

    func_factor                    shift and go to state 174

state 142

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 175


state 143

    (13) outputaux -> expression func_print .
    (14) outputaux -> expression func_print . COMA outputaux

    CLOSEPAREN      reduce using rule 13 (outputaux -> expression func_print .)
    COMA            shift and go to state 176


state 144

    (42) expression -> NOT func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 42 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)


state 145

    (44) logexpression -> relopexpression AND func_logicOp_operation logexpression . func_logicOP
    (114) func_logicOP -> .

    READ            reduce using rule 114 (func_logicOP -> .)
    WRITE           reduce using rule 114 (func_logicOP -> .)
    SET             reduce using rule 114 (func_logicOP -> .)
    NOT             reduce using rule 114 (func_logicOP -> .)
    IF              reduce using rule 114 (func_logicOP -> .)
    WHILE           reduce using rule 114 (func_logicOP -> .)
    DO              reduce using rule 114 (func_logicOP -> .)
    CALL            reduce using rule 114 (func_logicOP -> .)
    OPENPAREN       reduce using rule 114 (func_logicOP -> .)
    ID              reduce using rule 114 (func_logicOP -> .)
    BOOLCTE         reduce using rule 114 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 114 (func_logicOP -> .)
    WORDCTE         reduce using rule 114 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 114 (func_logicOP -> .)
    CLOSECURL       reduce using rule 114 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 114 (func_logicOP -> .)
    RETURN          reduce using rule 114 (func_logicOP -> .)
    ENDSTMT         reduce using rule 114 (func_logicOP -> .)
    COMA            reduce using rule 114 (func_logicOP -> .)

    func_logicOP                   shift and go to state 177

state 146

    (45) logexpression -> relopexpression OR func_logicOp_operation logexpression . func_logicOP
    (114) func_logicOP -> .

    READ            reduce using rule 114 (func_logicOP -> .)
    WRITE           reduce using rule 114 (func_logicOP -> .)
    SET             reduce using rule 114 (func_logicOP -> .)
    NOT             reduce using rule 114 (func_logicOP -> .)
    IF              reduce using rule 114 (func_logicOP -> .)
    WHILE           reduce using rule 114 (func_logicOP -> .)
    DO              reduce using rule 114 (func_logicOP -> .)
    CALL            reduce using rule 114 (func_logicOP -> .)
    OPENPAREN       reduce using rule 114 (func_logicOP -> .)
    ID              reduce using rule 114 (func_logicOP -> .)
    BOOLCTE         reduce using rule 114 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 114 (func_logicOP -> .)
    WORDCTE         reduce using rule 114 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 114 (func_logicOP -> .)
    CLOSECURL       reduce using rule 114 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 114 (func_logicOP -> .)
    RETURN          reduce using rule 114 (func_logicOP -> .)
    ENDSTMT         reduce using rule 114 (func_logicOP -> .)
    COMA            reduce using rule 114 (func_logicOP -> .)

    func_logicOP                   shift and go to state 178

state 147

    (27) cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC . func_constantIDArray
    (95) func_constantIDArray -> .

    MULT            reduce using rule 95 (func_constantIDArray -> .)
    DIV             reduce using rule 95 (func_constantIDArray -> .)
    PLUS            reduce using rule 95 (func_constantIDArray -> .)
    MINUS           reduce using rule 95 (func_constantIDArray -> .)
    RELOP           reduce using rule 95 (func_constantIDArray -> .)
    AND             reduce using rule 95 (func_constantIDArray -> .)
    OR              reduce using rule 95 (func_constantIDArray -> .)
    READ            reduce using rule 95 (func_constantIDArray -> .)
    WRITE           reduce using rule 95 (func_constantIDArray -> .)
    SET             reduce using rule 95 (func_constantIDArray -> .)
    NOT             reduce using rule 95 (func_constantIDArray -> .)
    IF              reduce using rule 95 (func_constantIDArray -> .)
    WHILE           reduce using rule 95 (func_constantIDArray -> .)
    DO              reduce using rule 95 (func_constantIDArray -> .)
    CALL            reduce using rule 95 (func_constantIDArray -> .)
    OPENPAREN       reduce using rule 95 (func_constantIDArray -> .)
    ID              reduce using rule 95 (func_constantIDArray -> .)
    BOOLCTE         reduce using rule 95 (func_constantIDArray -> .)
    NUMBERCTE       reduce using rule 95 (func_constantIDArray -> .)
    WORDCTE         reduce using rule 95 (func_constantIDArray -> .)
    SENTENCECTE     reduce using rule 95 (func_constantIDArray -> .)
    CLOSECURL       reduce using rule 95 (func_constantIDArray -> .)
    CLOSEBRAC       reduce using rule 95 (func_constantIDArray -> .)
    CLOSEPAREN      reduce using rule 95 (func_constantIDArray -> .)
    RETURN          reduce using rule 95 (func_constantIDArray -> .)
    ENDSTMT         reduce using rule 95 (func_constantIDArray -> .)
    COMA            reduce using rule 95 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 179

state 148

    (49) exp -> term PLUS func_term_operation exp . func_term
    (108) func_term -> .

    RELOP           reduce using rule 108 (func_term -> .)
    AND             reduce using rule 108 (func_term -> .)
    OR              reduce using rule 108 (func_term -> .)
    READ            reduce using rule 108 (func_term -> .)
    WRITE           reduce using rule 108 (func_term -> .)
    SET             reduce using rule 108 (func_term -> .)
    NOT             reduce using rule 108 (func_term -> .)
    IF              reduce using rule 108 (func_term -> .)
    WHILE           reduce using rule 108 (func_term -> .)
    DO              reduce using rule 108 (func_term -> .)
    CALL            reduce using rule 108 (func_term -> .)
    OPENPAREN       reduce using rule 108 (func_term -> .)
    ID              reduce using rule 108 (func_term -> .)
    BOOLCTE         reduce using rule 108 (func_term -> .)
    NUMBERCTE       reduce using rule 108 (func_term -> .)
    WORDCTE         reduce using rule 108 (func_term -> .)
    SENTENCECTE     reduce using rule 108 (func_term -> .)
    CLOSECURL       reduce using rule 108 (func_term -> .)
    CLOSEPAREN      reduce using rule 108 (func_term -> .)
    RETURN          reduce using rule 108 (func_term -> .)
    ENDSTMT         reduce using rule 108 (func_term -> .)
    COMA            reduce using rule 108 (func_term -> .)

    func_term                      shift and go to state 180

state 149

    (50) exp -> term MINUS func_term_operation exp . func_term
    (108) func_term -> .

    RELOP           reduce using rule 108 (func_term -> .)
    AND             reduce using rule 108 (func_term -> .)
    OR              reduce using rule 108 (func_term -> .)
    READ            reduce using rule 108 (func_term -> .)
    WRITE           reduce using rule 108 (func_term -> .)
    SET             reduce using rule 108 (func_term -> .)
    NOT             reduce using rule 108 (func_term -> .)
    IF              reduce using rule 108 (func_term -> .)
    WHILE           reduce using rule 108 (func_term -> .)
    DO              reduce using rule 108 (func_term -> .)
    CALL            reduce using rule 108 (func_term -> .)
    OPENPAREN       reduce using rule 108 (func_term -> .)
    ID              reduce using rule 108 (func_term -> .)
    BOOLCTE         reduce using rule 108 (func_term -> .)
    NUMBERCTE       reduce using rule 108 (func_term -> .)
    WORDCTE         reduce using rule 108 (func_term -> .)
    SENTENCECTE     reduce using rule 108 (func_term -> .)
    CLOSECURL       reduce using rule 108 (func_term -> .)
    CLOSEPAREN      reduce using rule 108 (func_term -> .)
    RETURN          reduce using rule 108 (func_term -> .)
    ENDSTMT         reduce using rule 108 (func_term -> .)
    COMA            reduce using rule 108 (func_term -> .)

    func_term                      shift and go to state 181

state 150

    (58) cycle -> WHILE func_while OPENPAREN expression . CLOSEPAREN func_whileExp block func_endWhile

    CLOSEPAREN      shift and go to state 182


state 151

    (84) special -> REMOVE .

    OPENPAREN       reduce using rule 84 (special -> REMOVE .)


state 152

    (77) special -> SEARCH .

    OPENPAREN       reduce using rule 77 (special -> SEARCH .)


state 153

    (78) special -> EXISTS .

    OPENPAREN       reduce using rule 78 (special -> EXISTS .)


state 154

    (82) special -> WORDCOUNT .

    OPENPAREN       reduce using rule 82 (special -> WORDCOUNT .)


state 155

    (80) special -> MEDIAN .

    OPENPAREN       reduce using rule 80 (special -> MEDIAN .)


state 156

    (83) special -> TOKENIZE .

    OPENPAREN       reduce using rule 83 (special -> TOKENIZE .)


state 157

    (75) special -> LENGTH .

    OPENPAREN       reduce using rule 75 (special -> LENGTH .)


state 158

    (76) special -> FREQUENCY .

    OPENPAREN       reduce using rule 76 (special -> FREQUENCY .)


state 159

    (81) special -> MODE .

    OPENPAREN       reduce using rule 81 (special -> MODE .)


state 160

    (70) callfunction -> CALL ID DOT special . OPENPAREN spaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 183


state 161

    (79) special -> MEAN .

    OPENPAREN       reduce using rule 79 (special -> MEAN .)


state 162

    (71) callfunction -> CALL ID func_callFunc OPENPAREN . spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (72) spaux -> . cte func_callFuncParameter
    (73) spaux -> . cte func_callFuncParameter COMA spaux
    (74) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant
    (85) empty -> .

    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46
    CLOSEPAREN      reduce using rule 85 (empty -> .)

    spaux                          shift and go to state 184
    cte                            shift and go to state 186
    empty                          shift and go to state 185

state 163

    (47) relopexpression -> exp func_relop RELOP func_relop_operation . exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 187
    factor                         shift and go to state 55

state 164

    (64) parameter -> type ID func_declare_par . parameteraux
    (66) parameteraux -> . COMA parameter
    (67) parameteraux -> . empty
    (85) empty -> .

    COMA            shift and go to state 188
    CLOSEPAREN      reduce using rule 85 (empty -> .)

    empty                          shift and go to state 190
    parameteraux                   shift and go to state 189

state 165

    (65) parameter -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (87) func_isSize -> .

    ID              reduce using rule 87 (func_isSize -> .)
    BOOLCTE         reduce using rule 87 (func_isSize -> .)
    NUMBERCTE       reduce using rule 87 (func_isSize -> .)
    WORDCTE         reduce using rule 87 (func_isSize -> .)
    SENTENCECTE     reduce using rule 87 (func_isSize -> .)

    func_isSize                    shift and go to state 191

state 166

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . blockaux returnaux ENDSTMT CLOSECURL func_clear
    (15) declare -> . DEC decaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (85) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (36) statement -> . assign
    (37) statement -> . expression
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . callfunction
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (57) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (58) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (59) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (70) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    DEC             shift and go to state 6
    RETURN          reduce using rule 85 (empty -> .)
    ENDSTMT         reduce using rule 85 (empty -> .)
    READ            shift and go to state 45
    WRITE           shift and go to state 57
    SET             shift and go to state 48
    NOT             shift and go to state 58
    IF              shift and go to state 52
    WHILE           shift and go to state 65
    DO              shift and go to state 42
    CALL            shift and go to state 67
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    callfunction                   shift and go to state 49
    statement                      shift and go to state 50
    input                          shift and go to state 51
    empty                          shift and go to state 53
    blockaux                       shift and go to state 192
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    condition                      shift and go to state 62
    cycle                          shift and go to state 63
    term                           shift and go to state 64
    expression                     shift and go to state 71
    declare                        shift and go to state 193
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    action                         shift and go to state 69
    output                         shift and go to state 70
    assign                         shift and go to state 72

state 167

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .

    FUNC            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BEGIN           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    READ            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WRITE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SET             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NOT             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    IF              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WHILE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    DO              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CALL            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    OPENPAREN       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ID              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BOOLCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NUMBERCTE       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WORDCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SENTENCECTE     reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    RETURN          reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ENDSTMT         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)


state 168

    (59) cycle -> DO func_do block WHILE OPENPAREN . expression CLOSEPAREN func_endDoWhile ENDSTMT
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 194

state 169

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 195


state 170

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC . func_constantIDArray EQUAL func_assign assignaux
    (95) func_constantIDArray -> .

    EQUAL           reduce using rule 95 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 196

state 171

    (20) assign -> SET ID func_constantID EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 197
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 199
    factor                         shift and go to state 55
    assignaux                      shift and go to state 198

state 172

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block func_endIf
    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block ELSE func_else block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 200

state 173

    (53) term -> factor DIV func_factor_operation term func_factor .

    PLUS            reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    MINUS           reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    RELOP           reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    AND             reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    OR              reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    COMA            reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    READ            reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    WRITE           reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    SET             reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    NOT             reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    IF              reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    WHILE           reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    DO              reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    CALL            reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    ID              reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    RETURN          reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 53 (term -> factor DIV func_factor_operation term func_factor .)


state 174

    (52) term -> factor MULT func_factor_operation term func_factor .

    PLUS            reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    MINUS           reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    RELOP           reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    AND             reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    OR              reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    COMA            reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    READ            reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    WRITE           reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    SET             reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    NOT             reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    IF              reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    WHILE           reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    DO              reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    CALL            reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    ID              reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    RETURN          reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 52 (term -> factor MULT func_factor_operation term func_factor .)


state 175

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)


state 176

    (14) outputaux -> expression func_print COMA . outputaux
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 58
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    outputaux                      shift and go to state 201
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 68
    expression                     shift and go to state 119

state 177

    (44) logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .

    COMA            reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    READ            reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 44 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)


state 178

    (45) logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .

    COMA            reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    READ            reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 45 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)


state 179

    (27) cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .

    MULT            reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    DIV             reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    PLUS            reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    MINUS           reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    RELOP           reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    AND             reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    OR              reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSEPAREN      reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    READ            reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WRITE           reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    SET             reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    NOT             reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    IF              reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WHILE           reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    DO              reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CALL            reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    OPENPAREN       reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    ID              reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    BOOLCTE         reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    NUMBERCTE       reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    WORDCTE         reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    SENTENCECTE     reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSECURL       reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    RETURN          reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    ENDSTMT         reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    COMA            reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)
    CLOSEBRAC       reduce using rule 27 (cte -> ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray .)


state 180

    (49) exp -> term PLUS func_term_operation exp func_term .

    RELOP           reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    AND             reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    OR              reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    COMA            reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    READ            reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    WRITE           reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    SET             reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    NOT             reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    IF              reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    WHILE           reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    DO              reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    CALL            reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    ID              reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    RETURN          reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 49 (exp -> term PLUS func_term_operation exp func_term .)


state 181

    (50) exp -> term MINUS func_term_operation exp func_term .

    RELOP           reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    AND             reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    OR              reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    COMA            reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    READ            reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    WRITE           reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    SET             reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    NOT             reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    IF              reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    WHILE           reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    DO              reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    CALL            reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    ID              reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    RETURN          reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 50 (exp -> term MINUS func_term_operation exp func_term .)


state 182

    (58) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN . func_whileExp block func_endWhile
    (122) func_whileExp -> .

    OPENCURL        reduce using rule 122 (func_whileExp -> .)

    func_whileExp                  shift and go to state 202

state 183

    (70) callfunction -> CALL ID DOT special OPENPAREN . spaux CLOSEPAREN ENDSTMT
    (72) spaux -> . cte func_callFuncParameter
    (73) spaux -> . cte func_callFuncParameter COMA spaux
    (74) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant
    (85) empty -> .

    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46
    CLOSEPAREN      reduce using rule 85 (empty -> .)

    spaux                          shift and go to state 203
    cte                            shift and go to state 186
    empty                          shift and go to state 185

state 184

    (71) callfunction -> CALL ID func_callFunc OPENPAREN spaux . CLOSEPAREN func_endCallFunction ENDSTMT

    CLOSEPAREN      shift and go to state 204


state 185

    (74) spaux -> empty .

    CLOSEPAREN      reduce using rule 74 (spaux -> empty .)


state 186

    (72) spaux -> cte . func_callFuncParameter
    (73) spaux -> cte . func_callFuncParameter COMA spaux
    (125) func_callFuncParameter -> .

    COMA            reduce using rule 125 (func_callFuncParameter -> .)
    CLOSEPAREN      reduce using rule 125 (func_callFuncParameter -> .)

    func_callFuncParameter         shift and go to state 205

state 187

    (47) relopexpression -> exp func_relop RELOP func_relop_operation exp . func_relop
    (112) func_relop -> .

    AND             reduce using rule 112 (func_relop -> .)
    OR              reduce using rule 112 (func_relop -> .)
    READ            reduce using rule 112 (func_relop -> .)
    WRITE           reduce using rule 112 (func_relop -> .)
    SET             reduce using rule 112 (func_relop -> .)
    NOT             reduce using rule 112 (func_relop -> .)
    IF              reduce using rule 112 (func_relop -> .)
    WHILE           reduce using rule 112 (func_relop -> .)
    DO              reduce using rule 112 (func_relop -> .)
    CALL            reduce using rule 112 (func_relop -> .)
    OPENPAREN       reduce using rule 112 (func_relop -> .)
    ID              reduce using rule 112 (func_relop -> .)
    BOOLCTE         reduce using rule 112 (func_relop -> .)
    NUMBERCTE       reduce using rule 112 (func_relop -> .)
    WORDCTE         reduce using rule 112 (func_relop -> .)
    SENTENCECTE     reduce using rule 112 (func_relop -> .)
    CLOSECURL       reduce using rule 112 (func_relop -> .)
    CLOSEPAREN      reduce using rule 112 (func_relop -> .)
    RETURN          reduce using rule 112 (func_relop -> .)
    ENDSTMT         reduce using rule 112 (func_relop -> .)
    COMA            reduce using rule 112 (func_relop -> .)

    func_relop                     shift and go to state 206

state 188

    (66) parameteraux -> COMA . parameter
    (64) parameter -> . type ID func_declare_par parameteraux
    (65) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (32) type -> . BOOL func_type
    (33) type -> . NUMBER func_type
    (34) type -> . WORD func_type
    (35) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    parameter                      shift and go to state 207
    type                           shift and go to state 103

state 189

    (64) parameter -> type ID func_declare_par parameteraux .

    CLOSEPAREN      reduce using rule 64 (parameter -> type ID func_declare_par parameteraux .)


state 190

    (67) parameteraux -> empty .

    CLOSEPAREN      reduce using rule 67 (parameteraux -> empty .)


state 191

    (65) parameter -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array parameteraux
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    cte                            shift and go to state 208

state 192

    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux . returnaux ENDSTMT CLOSECURL func_clear
    (68) returnaux -> . RETURN ID func_return
    (69) returnaux -> . empty
    (85) empty -> .

    RETURN          shift and go to state 209
    ENDSTMT         reduce using rule 85 (empty -> .)

    returnaux                      shift and go to state 210
    empty                          shift and go to state 211

state 193

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare . blockaux returnaux ENDSTMT CLOSECURL func_clear
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (85) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (36) statement -> . assign
    (37) statement -> . expression
    (38) statement -> . condition
    (39) statement -> . cycle
    (40) statement -> . callfunction
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (41) expression -> . logexpression
    (42) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (57) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (58) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (59) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (70) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (71) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (43) logexpression -> . relopexpression
    (44) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (45) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (46) relopexpression -> . exp
    (47) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    RETURN          reduce using rule 85 (empty -> .)
    ENDSTMT         reduce using rule 85 (empty -> .)
    READ            shift and go to state 45
    WRITE           shift and go to state 57
    SET             shift and go to state 48
    NOT             shift and go to state 58
    IF              shift and go to state 52
    WHILE           shift and go to state 65
    DO              shift and go to state 42
    CALL            shift and go to state 67
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    callfunction                   shift and go to state 49
    statement                      shift and go to state 50
    input                          shift and go to state 51
    blockaux                       shift and go to state 212
    factor                         shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 59
    condition                      shift and go to state 62
    cycle                          shift and go to state 63
    term                           shift and go to state 64
    expression                     shift and go to state 71
    cte                            shift and go to state 66
    empty                          shift and go to state 53
    exp                            shift and go to state 68
    action                         shift and go to state 69
    output                         shift and go to state 70
    assign                         shift and go to state 72

state 194

    (59) cycle -> DO func_do block WHILE OPENPAREN expression . CLOSEPAREN func_endDoWhile ENDSTMT

    CLOSEPAREN      shift and go to state 213


state 195

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .

    READ            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)


state 196

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray . EQUAL func_assign assignaux

    EQUAL           shift and go to state 214


state 197

    (23) assignaux -> OPENCURL . assiaux CLOSECURL ENDSTMT func_assign_array_end
    (24) assiaux -> . exp func_assign_array
    (25) assiaux -> . exp func_assign_array COMA assiaux
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    assiaux                        shift and go to state 215
    cte                            shift and go to state 66
    exp                            shift and go to state 216
    factor                         shift and go to state 55

state 198

    (20) assign -> SET ID func_constantID EQUAL func_assign assignaux .

    READ            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WRITE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SET             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NOT             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    IF              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WHILE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    DO              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CALL            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    ID              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    RETURN          reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    ENDSTMT         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)


state 199

    (22) assignaux -> exp . func_assign_value ENDSTMT
    (104) func_assign_value -> .

    ENDSTMT         reduce using rule 104 (func_assign_value -> .)

    func_assign_value              shift and go to state 217

state 200

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . func_endIf
    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . ELSE func_else block func_endElse
    (116) func_endIf -> .

    ELSE            shift and go to state 219
    READ            reduce using rule 116 (func_endIf -> .)
    WRITE           reduce using rule 116 (func_endIf -> .)
    SET             reduce using rule 116 (func_endIf -> .)
    NOT             reduce using rule 116 (func_endIf -> .)
    IF              reduce using rule 116 (func_endIf -> .)
    WHILE           reduce using rule 116 (func_endIf -> .)
    DO              reduce using rule 116 (func_endIf -> .)
    CALL            reduce using rule 116 (func_endIf -> .)
    OPENPAREN       reduce using rule 116 (func_endIf -> .)
    ID              reduce using rule 116 (func_endIf -> .)
    BOOLCTE         reduce using rule 116 (func_endIf -> .)
    NUMBERCTE       reduce using rule 116 (func_endIf -> .)
    WORDCTE         reduce using rule 116 (func_endIf -> .)
    SENTENCECTE     reduce using rule 116 (func_endIf -> .)
    CLOSECURL       reduce using rule 116 (func_endIf -> .)
    RETURN          reduce using rule 116 (func_endIf -> .)
    ENDSTMT         reduce using rule 116 (func_endIf -> .)

    func_endIf                     shift and go to state 218

state 201

    (14) outputaux -> expression func_print COMA outputaux .

    CLOSEPAREN      reduce using rule 14 (outputaux -> expression func_print COMA outputaux .)


state 202

    (58) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp . block func_endWhile
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 220

state 203

    (70) callfunction -> CALL ID DOT special OPENPAREN spaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 221


state 204

    (71) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN . func_endCallFunction ENDSTMT
    (126) func_endCallFunction -> .

    ENDSTMT         reduce using rule 126 (func_endCallFunction -> .)

    func_endCallFunction           shift and go to state 222

state 205

    (72) spaux -> cte func_callFuncParameter .
    (73) spaux -> cte func_callFuncParameter . COMA spaux

    CLOSEPAREN      reduce using rule 72 (spaux -> cte func_callFuncParameter .)
    COMA            shift and go to state 223


state 206

    (47) relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .

    AND             reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OR              reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    READ            reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WRITE           reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SET             reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NOT             reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    IF              reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WHILE           reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    DO              reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CALL            reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OPENPAREN       reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ID              reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    BOOLCTE         reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NUMBERCTE       reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WORDCTE         reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SENTENCECTE     reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    RETURN          reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ENDSTMT         reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSECURL       reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSEPAREN      reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    COMA            reduce using rule 47 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)


state 207

    (66) parameteraux -> COMA parameter .

    CLOSEPAREN      reduce using rule 66 (parameteraux -> COMA parameter .)


state 208

    (65) parameter -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array parameteraux

    CLOSEBRAC       shift and go to state 224


state 209

    (68) returnaux -> RETURN . ID func_return

    ID              shift and go to state 225


state 210

    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux . ENDSTMT CLOSECURL func_clear

    ENDSTMT         shift and go to state 226


state 211

    (69) returnaux -> empty .

    ENDSTMT         reduce using rule 69 (returnaux -> empty .)


state 212

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux . returnaux ENDSTMT CLOSECURL func_clear
    (68) returnaux -> . RETURN ID func_return
    (69) returnaux -> . empty
    (85) empty -> .

    RETURN          shift and go to state 209
    ENDSTMT         reduce using rule 85 (empty -> .)

    returnaux                      shift and go to state 227
    empty                          shift and go to state 211

state 213

    (59) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN . func_endDoWhile ENDSTMT
    (120) func_endDoWhile -> .

    ENDSTMT         reduce using rule 120 (func_endDoWhile -> .)

    func_endDoWhile                shift and go to state 228

state 214

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL . func_assign assignaux
    (103) func_assign -> .

    OPENCURL        reduce using rule 103 (func_assign -> .)
    OPENPAREN       reduce using rule 103 (func_assign -> .)
    ID              reduce using rule 103 (func_assign -> .)
    BOOLCTE         reduce using rule 103 (func_assign -> .)
    NUMBERCTE       reduce using rule 103 (func_assign -> .)
    WORDCTE         reduce using rule 103 (func_assign -> .)
    SENTENCECTE     reduce using rule 103 (func_assign -> .)

    func_assign                    shift and go to state 229

state 215

    (23) assignaux -> OPENCURL assiaux . CLOSECURL ENDSTMT func_assign_array_end

    CLOSECURL       shift and go to state 230


state 216

    (24) assiaux -> exp . func_assign_array
    (25) assiaux -> exp . func_assign_array COMA assiaux
    (105) func_assign_array -> .

    COMA            reduce using rule 105 (func_assign_array -> .)
    CLOSECURL       reduce using rule 105 (func_assign_array -> .)

    func_assign_array              shift and go to state 231

state 217

    (22) assignaux -> exp func_assign_value . ENDSTMT

    ENDSTMT         shift and go to state 232


state 218

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .

    READ            reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WRITE           reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SET             reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NOT             reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    IF              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WHILE           reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    DO              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CALL            reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    OPENPAREN       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ID              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    BOOLCTE         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NUMBERCTE       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WORDCTE         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SENTENCECTE     reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    RETURN          reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ENDSTMT         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CLOSECURL       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)


state 219

    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE . func_else block func_endElse
    (117) func_else -> .

    OPENCURL        reduce using rule 117 (func_else -> .)

    func_else                      shift and go to state 233

state 220

    (58) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block . func_endWhile
    (123) func_endWhile -> .

    READ            reduce using rule 123 (func_endWhile -> .)
    WRITE           reduce using rule 123 (func_endWhile -> .)
    SET             reduce using rule 123 (func_endWhile -> .)
    NOT             reduce using rule 123 (func_endWhile -> .)
    IF              reduce using rule 123 (func_endWhile -> .)
    WHILE           reduce using rule 123 (func_endWhile -> .)
    DO              reduce using rule 123 (func_endWhile -> .)
    CALL            reduce using rule 123 (func_endWhile -> .)
    OPENPAREN       reduce using rule 123 (func_endWhile -> .)
    ID              reduce using rule 123 (func_endWhile -> .)
    BOOLCTE         reduce using rule 123 (func_endWhile -> .)
    NUMBERCTE       reduce using rule 123 (func_endWhile -> .)
    WORDCTE         reduce using rule 123 (func_endWhile -> .)
    SENTENCECTE     reduce using rule 123 (func_endWhile -> .)
    CLOSECURL       reduce using rule 123 (func_endWhile -> .)
    RETURN          reduce using rule 123 (func_endWhile -> .)
    ENDSTMT         reduce using rule 123 (func_endWhile -> .)

    func_endWhile                  shift and go to state 234

state 221

    (70) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 235


state 222

    (71) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction . ENDSTMT

    ENDSTMT         shift and go to state 236


state 223

    (73) spaux -> cte func_callFuncParameter COMA . spaux
    (72) spaux -> . cte func_callFuncParameter
    (73) spaux -> . cte func_callFuncParameter COMA spaux
    (74) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant
    (85) empty -> .

    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46
    CLOSEPAREN      reduce using rule 85 (empty -> .)

    spaux                          shift and go to state 237
    cte                            shift and go to state 186
    empty                          shift and go to state 185

state 224

    (65) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array parameteraux
    (89) func_declare_array -> .

    COMA            reduce using rule 89 (func_declare_array -> .)
    CLOSEPAREN      reduce using rule 89 (func_declare_array -> .)

    func_declare_array             shift and go to state 238

state 225

    (68) returnaux -> RETURN ID . func_return
    (127) func_return -> .

    ENDSTMT         reduce using rule 127 (func_return -> .)

    func_return                    shift and go to state 239

state 226

    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT . CLOSECURL func_clear

    CLOSECURL       shift and go to state 240


state 227

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux . ENDSTMT CLOSECURL func_clear

    ENDSTMT         shift and go to state 241


state 228

    (59) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile . ENDSTMT

    ENDSTMT         shift and go to state 242


state 229

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 197
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    cte                            shift and go to state 66
    exp                            shift and go to state 199
    factor                         shift and go to state 55
    assignaux                      shift and go to state 243

state 230

    (23) assignaux -> OPENCURL assiaux CLOSECURL . ENDSTMT func_assign_array_end

    ENDSTMT         shift and go to state 244


state 231

    (24) assiaux -> exp func_assign_array .
    (25) assiaux -> exp func_assign_array . COMA assiaux

    CLOSECURL       reduce using rule 24 (assiaux -> exp func_assign_array .)
    COMA            shift and go to state 245


state 232

    (22) assignaux -> exp func_assign_value ENDSTMT .

    READ            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WRITE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SET             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NOT             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    IF              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WHILE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    DO              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CALL            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    OPENPAREN       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ID              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    BOOLCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NUMBERCTE       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WORDCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SENTENCECTE     reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CLOSECURL       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    RETURN          reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ENDSTMT         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)


state 233

    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else . block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 246

state 234

    (58) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .

    READ            reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WRITE           reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SET             reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NOT             reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    IF              reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WHILE           reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    DO              reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CALL            reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    OPENPAREN       reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ID              reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    BOOLCTE         reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NUMBERCTE       reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WORDCTE         reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SENTENCECTE     reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    RETURN          reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ENDSTMT         reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CLOSECURL       reduce using rule 58 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)


state 235

    (70) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 70 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)


state 236

    (71) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .

    READ            reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WRITE           reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SET             reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NOT             reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    IF              reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WHILE           reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    DO              reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CALL            reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    OPENPAREN       reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ID              reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    BOOLCTE         reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NUMBERCTE       reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WORDCTE         reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SENTENCECTE     reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CLOSECURL       reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    RETURN          reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ENDSTMT         reduce using rule 71 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)


state 237

    (73) spaux -> cte func_callFuncParameter COMA spaux .

    CLOSEPAREN      reduce using rule 73 (spaux -> cte func_callFuncParameter COMA spaux .)


state 238

    (65) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . parameteraux
    (66) parameteraux -> . COMA parameter
    (67) parameteraux -> . empty
    (85) empty -> .

    COMA            shift and go to state 188
    CLOSEPAREN      reduce using rule 85 (empty -> .)

    parameteraux                   shift and go to state 247
    empty                          shift and go to state 190

state 239

    (68) returnaux -> RETURN ID func_return .

    ENDSTMT         reduce using rule 68 (returnaux -> RETURN ID func_return .)


state 240

    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL . func_clear
    (128) func_clear -> .

    FUNC            reduce using rule 128 (func_clear -> .)
    BEGIN           reduce using rule 128 (func_clear -> .)

    func_clear                     shift and go to state 248

state 241

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT . CLOSECURL func_clear

    CLOSECURL       shift and go to state 249


state 242

    (59) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .

    READ            reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WRITE           reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SET             reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NOT             reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    IF              reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WHILE           reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    DO              reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CALL            reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    OPENPAREN       reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ID              reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    BOOLCTE         reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NUMBERCTE       reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WORDCTE         reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SENTENCECTE     reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    RETURN          reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ENDSTMT         reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CLOSECURL       reduce using rule 59 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)


state 243

    (21) assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .

    READ            reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WRITE           reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SET             reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NOT             reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    IF              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WHILE           reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    DO              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CALL            reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    ID              reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    RETURN          reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    ENDSTMT         reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 21 (assign -> SET ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)


state 244

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT . func_assign_array_end
    (106) func_assign_array_end -> .

    READ            reduce using rule 106 (func_assign_array_end -> .)
    WRITE           reduce using rule 106 (func_assign_array_end -> .)
    SET             reduce using rule 106 (func_assign_array_end -> .)
    NOT             reduce using rule 106 (func_assign_array_end -> .)
    IF              reduce using rule 106 (func_assign_array_end -> .)
    WHILE           reduce using rule 106 (func_assign_array_end -> .)
    DO              reduce using rule 106 (func_assign_array_end -> .)
    CALL            reduce using rule 106 (func_assign_array_end -> .)
    OPENPAREN       reduce using rule 106 (func_assign_array_end -> .)
    ID              reduce using rule 106 (func_assign_array_end -> .)
    BOOLCTE         reduce using rule 106 (func_assign_array_end -> .)
    NUMBERCTE       reduce using rule 106 (func_assign_array_end -> .)
    WORDCTE         reduce using rule 106 (func_assign_array_end -> .)
    SENTENCECTE     reduce using rule 106 (func_assign_array_end -> .)
    CLOSECURL       reduce using rule 106 (func_assign_array_end -> .)
    RETURN          reduce using rule 106 (func_assign_array_end -> .)
    ENDSTMT         reduce using rule 106 (func_assign_array_end -> .)

    func_assign_array_end          shift and go to state 250

state 245

    (25) assiaux -> exp func_assign_array COMA . assiaux
    (24) assiaux -> . exp func_assign_array
    (25) assiaux -> . exp func_assign_array COMA assiaux
    (48) exp -> . term
    (49) exp -> . term PLUS func_term_operation exp func_term
    (50) exp -> . term MINUS func_term_operation exp func_term
    (51) term -> . factor
    (52) term -> . factor MULT func_factor_operation term func_factor
    (53) term -> . factor DIV func_factor_operation term func_factor
    (54) factor -> . OPENPAREN expression CLOSEPAREN
    (55) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . ID OPENBRAC NUMBERCTE CLOSEBRAC func_constantIDArray
    (28) cte -> . BOOLCTE func_boolCte func_constant
    (29) cte -> . NUMBERCTE func_numberCte func_constant
    (30) cte -> . WORDCTE func_wordCte func_constant
    (31) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 61
    BOOLCTE         shift and go to state 44
    NUMBERCTE       shift and go to state 60
    WORDCTE         shift and go to state 43
    SENTENCECTE     shift and go to state 46

    term                           shift and go to state 64
    assiaux                        shift and go to state 251
    cte                            shift and go to state 66
    exp                            shift and go to state 216
    factor                         shift and go to state 55

state 246

    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block . func_endElse
    (118) func_endElse -> .

    READ            reduce using rule 118 (func_endElse -> .)
    WRITE           reduce using rule 118 (func_endElse -> .)
    SET             reduce using rule 118 (func_endElse -> .)
    NOT             reduce using rule 118 (func_endElse -> .)
    IF              reduce using rule 118 (func_endElse -> .)
    WHILE           reduce using rule 118 (func_endElse -> .)
    DO              reduce using rule 118 (func_endElse -> .)
    CALL            reduce using rule 118 (func_endElse -> .)
    OPENPAREN       reduce using rule 118 (func_endElse -> .)
    ID              reduce using rule 118 (func_endElse -> .)
    BOOLCTE         reduce using rule 118 (func_endElse -> .)
    NUMBERCTE       reduce using rule 118 (func_endElse -> .)
    WORDCTE         reduce using rule 118 (func_endElse -> .)
    SENTENCECTE     reduce using rule 118 (func_endElse -> .)
    CLOSECURL       reduce using rule 118 (func_endElse -> .)
    RETURN          reduce using rule 118 (func_endElse -> .)
    ENDSTMT         reduce using rule 118 (func_endElse -> .)

    func_endElse                   shift and go to state 252

state 247

    (65) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .

    CLOSEPAREN      reduce using rule 65 (parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .)


state 248

    (61) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .

    FUNC            reduce using rule 61 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .)
    BEGIN           reduce using rule 61 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .)


state 249

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL . func_clear
    (128) func_clear -> .

    FUNC            reduce using rule 128 (func_clear -> .)
    BEGIN           reduce using rule 128 (func_clear -> .)

    func_clear                     shift and go to state 253

state 250

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .

    READ            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WRITE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SET             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NOT             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    IF              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WHILE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    DO              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CALL            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    OPENPAREN       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    ID              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    BOOLCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NUMBERCTE       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WORDCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SENTENCECTE     reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CLOSECURL       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    RETURN          reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    ENDSTMT         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)


state 251

    (25) assiaux -> exp func_assign_array COMA assiaux .

    CLOSECURL       reduce using rule 25 (assiaux -> exp func_assign_array COMA assiaux .)


state 252

    (57) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .

    READ            reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WRITE           reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SET             reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NOT             reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    IF              reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WHILE           reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    DO              reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CALL            reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    OPENPAREN       reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ID              reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    BOOLCTE         reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NUMBERCTE       reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WORDCTE         reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SENTENCECTE     reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    RETURN          reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ENDSTMT         reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CLOSECURL       reduce using rule 57 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)


state 253

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .

    FUNC            reduce using rule 60 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .)
    BEGIN           reduce using rule 60 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .)

