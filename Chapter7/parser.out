Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
Rule 2     start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
Rule 3     startaux -> function startaux
Rule 4     startaux -> empty
Rule 5     block -> OPENCURL blockaux CLOSECURL
Rule 6     blockaux -> action blockaux
Rule 7     blockaux -> empty
Rule 8     action -> input
Rule 9     action -> output
Rule 10    action -> statement
Rule 11    input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
Rule 12    output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
Rule 13    outputaux -> expression func_print
Rule 14    outputaux -> expression func_print COMA outputaux
Rule 15    declare -> DEC decaux
Rule 16    decaux -> type ID func_declare_var declareaux
Rule 17    decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
Rule 18    declareaux -> ENDSTMT
Rule 19    declareaux -> COMA decaux
Rule 20    assign -> SET ID func_constantID EQUAL func_assign assignaux
Rule 21    assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
Rule 22    assignaux -> exp func_assign_value ENDSTMT
Rule 23    assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
Rule 24    assignaux -> callfunction func_assign_value
Rule 25    assiaux -> exp func_assign_array
Rule 26    assiaux -> exp func_assign_array COMA assiaux
Rule 27    cte -> ID func_constantID
Rule 28    cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray
Rule 29    cte -> BOOLCTE func_boolCte func_constant
Rule 30    cte -> NUMBERCTE func_numberCte func_constant
Rule 31    cte -> WORDCTE func_wordCte func_constant
Rule 32    cte -> SENTENCECTE func_sentenceCte func_constant
Rule 33    index -> NUMBERCTE func_numberCte func_constant func_index
Rule 34    index -> ID func_constantID func_index
Rule 35    type -> BOOL func_type
Rule 36    type -> NUMBER func_type
Rule 37    type -> WORD func_type
Rule 38    type -> SENTENCE func_type
Rule 39    statement -> assign
Rule 40    statement -> expression
Rule 41    statement -> condition
Rule 42    statement -> cycle
Rule 43    statement -> callfunction
Rule 44    statement -> returnaux
Rule 45    expression -> logexpression
Rule 46    expression -> NOT func_logicOp_operation logexpression func_logicOP
Rule 47    logexpression -> relopexpression
Rule 48    logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP
Rule 49    logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP
Rule 50    relopexpression -> exp
Rule 51    relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop
Rule 52    exp -> term
Rule 53    exp -> term PLUS func_term_operation exp func_term
Rule 54    exp -> term MINUS func_term_operation exp func_term
Rule 55    term -> factor
Rule 56    term -> factor MULT func_factor_operation term func_factor
Rule 57    term -> factor DIV func_factor_operation term func_factor
Rule 58    factor -> OPENPAREN expression CLOSEPAREN
Rule 59    factor -> cte
Rule 60    condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
Rule 61    condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
Rule 62    cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
Rule 63    cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
Rule 64    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
Rule 65    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
Rule 66    funcaux -> type
Rule 67    funcaux -> VOID func_type
Rule 68    parameter -> type ID func_declare_par parameteraux
Rule 69    parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
Rule 70    parameter -> empty
Rule 71    parameteraux -> COMA parameter
Rule 72    parameteraux -> empty
Rule 73    returnaux -> RETURN expression func_return ENDSTMT
Rule 74    callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
Rule 75    callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
Rule 76    spaux -> cte func_callFuncParameter
Rule 77    spaux -> cte func_callFuncParameter COMA spaux
Rule 78    spaux -> empty
Rule 79    special -> LENGTH func_special
Rule 80    special -> FREQUENCY func_special
Rule 81    special -> SEARCH func_special
Rule 82    special -> EXISTS func_special
Rule 83    special -> MEAN func_special
Rule 84    special -> MEDIAN func_special
Rule 85    special -> MODE func_special
Rule 86    special -> WORDCOUNT func_special
Rule 87    special -> TOKENIZE func_special
Rule 88    special -> REMOVE func_special
Rule 89    special -> SORTWORDS func_special
Rule 90    special -> SORTNUMBERS func_special
Rule 91    special -> SIZE func_special
Rule 92    empty -> <empty>
Rule 93    func_start -> <empty>
Rule 94    func_isSize -> <empty>
Rule 95    func_declare_var -> <empty>
Rule 96    func_declare_array -> <empty>
Rule 97    func_declare_par -> <empty>
Rule 98    func_declare_function -> <empty>
Rule 99    func_type -> <empty>
Rule 100   func_index -> <empty>
Rule 101   func_constant -> <empty>
Rule 102   func_constantID -> <empty>
Rule 103   func_constantIDArray -> <empty>
Rule 104   func_boolCte -> <empty>
Rule 105   func_numberCte -> <empty>
Rule 106   func_wordCte -> <empty>
Rule 107   func_sentenceCte -> <empty>
Rule 108   func_begin_main -> <empty>
Rule 109   func_read -> <empty>
Rule 110   func_print -> <empty>
Rule 111   func_assign -> <empty>
Rule 112   func_assign_value -> <empty>
Rule 113   func_assign_array -> <empty>
Rule 114   func_assign_array_end -> <empty>
Rule 115   func_term_operation -> <empty>
Rule 116   func_term -> <empty>
Rule 117   func_factor_operation -> <empty>
Rule 118   func_factor -> <empty>
Rule 119   func_relop_operation -> <empty>
Rule 120   func_relop -> <empty>
Rule 121   func_logicOp_operation -> <empty>
Rule 122   func_logicOP -> <empty>
Rule 123   func_if -> <empty>
Rule 124   func_endIf -> <empty>
Rule 125   func_else -> <empty>
Rule 126   func_endElse -> <empty>
Rule 127   func_do -> <empty>
Rule 128   func_endDoWhile -> <empty>
Rule 129   func_while -> <empty>
Rule 130   func_whileExp -> <empty>
Rule 131   func_endWhile -> <empty>
Rule 132   func_callFunc -> <empty>
Rule 133   func_callFuncParameter -> <empty>
Rule 134   func_endCallFunction -> <empty>
Rule 135   func_special -> <empty>
Rule 136   func_callSpecial -> <empty>
Rule 137   func_return -> <empty>
Rule 138   func_end -> <empty>

Terminals, with rules where they appear

AND                  : 48
BEGIN                : 1 2
BOOL                 : 35
BOOLCTE              : 29
CALL                 : 74 75
CLOSEBRAC            : 17 21 28 69
CLOSECURL            : 5 23 64 65
CLOSEPAREN           : 11 12 58 60 61 62 63 64 65 74 75
COMA                 : 14 19 26 71 77
DEC                  : 15
DIV                  : 57
DO                   : 63
DOT                  : 74
ELSE                 : 61
END                  : 1 2
ENDSTMT              : 1 2 11 12 18 22 23 63 73 74 75
EQUAL                : 20 21
EXISTS               : 82
FREQUENCY            : 80
FUNC                 : 64 65
ID                   : 1 2 11 16 17 20 21 27 28 34 64 65 68 69 74 75
IF                   : 60 61
KOTOBA               : 1 2
LENGTH               : 79
MEAN                 : 83
MEDIAN               : 84
MINUS                : 54
MODE                 : 85
MULT                 : 56
NOT                  : 46
NUMBER               : 36
NUMBERCTE            : 30 33
OPENBRAC             : 17 21 28 69
OPENCURL             : 5 23 64 65
OPENPAREN            : 11 12 58 60 61 62 63 64 65 74 75
OR                   : 49
PLUS                 : 53
READ                 : 11
RELOP                : 51
REMOVE               : 88
RETURN               : 73
SEARCH               : 81
SENTENCE             : 38
SENTENCECTE          : 32
SET                  : 20 21
SIZE                 : 91
SORTNUMBERS          : 90
SORTWORDS            : 89
TOKENIZE             : 87
VOID                 : 67
WHILE                : 62 63
WORD                 : 37
WORDCOUNT            : 86
WORDCTE              : 31
WRITE                : 12
error                : 

Nonterminals, with rules where they appear

action               : 6
assiaux              : 23 26
assign               : 39
assignaux            : 20 21
block                : 1 2 60 61 61 62 63
blockaux             : 5 6 64 65
callfunction         : 24 43
condition            : 41
cte                  : 17 59 69 76 77
cycle                : 42
decaux               : 15 19
declare              : 1 64
declareaux           : 16 17
empty                : 4 7 70 72 78
exp                  : 22 25 26 50 51 51 53 54
expression           : 13 14 40 58 60 61 62 63 73
factor               : 55 56 57
func_assign          : 20 21
func_assign_array    : 25 26
func_assign_array_end : 23
func_assign_value    : 22 24
func_begin_main      : 1 2
func_boolCte         : 29
func_callFunc        : 75
func_callFuncParameter : 76 77
func_callSpecial     : 74
func_constant        : 29 30 31 32 33
func_constantID      : 20 27 34
func_constantIDArray : 21 28
func_declare_array   : 17 69
func_declare_function : 64 65
func_declare_par     : 68
func_declare_var     : 16
func_do              : 63
func_else            : 61
func_end             : 1 2
func_endCallFunction : 75
func_endDoWhile      : 63
func_endElse         : 61
func_endIf           : 60
func_endWhile        : 62
func_factor          : 56 57
func_factor_operation : 56 57
func_if              : 60 61
func_index           : 33 34
func_isSize          : 17 69
func_logicOP         : 46 48 49
func_logicOp_operation : 46 48 49
func_numberCte       : 30 33
func_print           : 13 14
func_read            : 11
func_relop           : 51 51
func_relop_operation : 51
func_return          : 73
func_sentenceCte     : 32
func_special         : 79 80 81 82 83 84 85 86 87 88 89 90 91
func_start           : 1 2
func_term            : 53 54
func_term_operation  : 53 54
func_type            : 35 36 37 38 67
func_while           : 62
func_whileExp        : 62
func_wordCte         : 31
funcaux              : 64 65
function             : 3
index                : 21 28
input                : 8
logexpression        : 45 46 48 49
output               : 9
outputaux            : 12 14
parameter            : 64 65 71
parameteraux         : 68 69
relopexpression      : 47 48 49
returnaux            : 44
spaux                : 74 75 77
special              : 74
start                : 0
startaux             : 1 2 3
statement            : 10
term                 : 52 53 54 56 57
type                 : 16 17 66 68 69

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> . KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    KOTOBA          shift and go to state 1

    start                          shift and go to state 2

state 1

    (1) start -> KOTOBA . ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA . ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end

    ID              shift and go to state 3


state 2

    (0) S' -> start .



state 3

    (1) start -> KOTOBA ID . func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID . func_start ENDSTMT startaux BEGIN func_begin_main block END func_end
    (93) func_start -> .

    ENDSTMT         reduce using rule 93 (func_start -> .)

    func_start                     shift and go to state 4

state 4

    (1) start -> KOTOBA ID func_start . ENDSTMT declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start . ENDSTMT startaux BEGIN func_begin_main block END func_end

    ENDSTMT         shift and go to state 5


state 5

    (1) start -> KOTOBA ID func_start ENDSTMT . declare startaux BEGIN func_begin_main block END func_end
    (2) start -> KOTOBA ID func_start ENDSTMT . startaux BEGIN func_begin_main block END func_end
    (15) declare -> . DEC decaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (64) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (92) empty -> .

    DEC             shift and go to state 6
    FUNC            shift and go to state 10
    BEGIN           reduce using rule 92 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 7
    declare                        shift and go to state 11

state 6

    (15) declare -> DEC . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (35) type -> . BOOL func_type
    (36) type -> . NUMBER func_type
    (37) type -> . WORD func_type
    (38) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 15
    type                           shift and go to state 17

state 7

    (2) start -> KOTOBA ID func_start ENDSTMT startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 18


state 8

    (4) startaux -> empty .

    BEGIN           reduce using rule 4 (startaux -> empty .)


state 9

    (3) startaux -> function . startaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (64) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (92) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 92 (empty -> .)

    function                       shift and go to state 9
    startaux                       shift and go to state 19
    empty                          shift and go to state 8

state 10

    (64) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (66) funcaux -> . type
    (67) funcaux -> . VOID func_type
    (35) type -> . BOOL func_type
    (36) type -> . NUMBER func_type
    (37) type -> . WORD func_type
    (38) type -> . SENTENCE func_type

    VOID            shift and go to state 21
    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    funcaux                        shift and go to state 22
    type                           shift and go to state 20

state 11

    (1) start -> KOTOBA ID func_start ENDSTMT declare . startaux BEGIN func_begin_main block END func_end
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (64) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (92) empty -> .

    FUNC            shift and go to state 10
    BEGIN           reduce using rule 92 (empty -> .)

    function                       shift and go to state 9
    empty                          shift and go to state 8
    startaux                       shift and go to state 23

state 12

    (38) type -> SENTENCE . func_type
    (99) func_type -> .

    ID              reduce using rule 99 (func_type -> .)

    func_type                      shift and go to state 24

state 13

    (36) type -> NUMBER . func_type
    (99) func_type -> .

    ID              reduce using rule 99 (func_type -> .)

    func_type                      shift and go to state 25

state 14

    (35) type -> BOOL . func_type
    (99) func_type -> .

    ID              reduce using rule 99 (func_type -> .)

    func_type                      shift and go to state 26

state 15

    (15) declare -> DEC decaux .

    FUNC            reduce using rule 15 (declare -> DEC decaux .)
    BEGIN           reduce using rule 15 (declare -> DEC decaux .)
    READ            reduce using rule 15 (declare -> DEC decaux .)
    WRITE           reduce using rule 15 (declare -> DEC decaux .)
    SET             reduce using rule 15 (declare -> DEC decaux .)
    NOT             reduce using rule 15 (declare -> DEC decaux .)
    IF              reduce using rule 15 (declare -> DEC decaux .)
    WHILE           reduce using rule 15 (declare -> DEC decaux .)
    DO              reduce using rule 15 (declare -> DEC decaux .)
    CALL            reduce using rule 15 (declare -> DEC decaux .)
    RETURN          reduce using rule 15 (declare -> DEC decaux .)
    OPENPAREN       reduce using rule 15 (declare -> DEC decaux .)
    ID              reduce using rule 15 (declare -> DEC decaux .)
    BOOLCTE         reduce using rule 15 (declare -> DEC decaux .)
    NUMBERCTE       reduce using rule 15 (declare -> DEC decaux .)
    WORDCTE         reduce using rule 15 (declare -> DEC decaux .)
    SENTENCECTE     reduce using rule 15 (declare -> DEC decaux .)
    CLOSECURL       reduce using rule 15 (declare -> DEC decaux .)


state 16

    (37) type -> WORD . func_type
    (99) func_type -> .

    ID              reduce using rule 99 (func_type -> .)

    func_type                      shift and go to state 27

state 17

    (16) decaux -> type . ID func_declare_var declareaux
    (17) decaux -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux

    ID              shift and go to state 28


state 18

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN . func_begin_main block END func_end
    (108) func_begin_main -> .

    OPENCURL        reduce using rule 108 (func_begin_main -> .)

    func_begin_main                shift and go to state 29

state 19

    (3) startaux -> function startaux .

    BEGIN           reduce using rule 3 (startaux -> function startaux .)


state 20

    (66) funcaux -> type .

    ID              reduce using rule 66 (funcaux -> type .)


state 21

    (67) funcaux -> VOID . func_type
    (99) func_type -> .

    ID              reduce using rule 99 (func_type -> .)

    func_type                      shift and go to state 30

state 22

    (64) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL

    ID              shift and go to state 31


state 23

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux . BEGIN func_begin_main block END func_end

    BEGIN           shift and go to state 32


state 24

    (38) type -> SENTENCE func_type .

    ID              reduce using rule 38 (type -> SENTENCE func_type .)


state 25

    (36) type -> NUMBER func_type .

    ID              reduce using rule 36 (type -> NUMBER func_type .)


state 26

    (35) type -> BOOL func_type .

    ID              reduce using rule 35 (type -> BOOL func_type .)


state 27

    (37) type -> WORD func_type .

    ID              reduce using rule 37 (type -> WORD func_type .)


state 28

    (16) decaux -> type ID . func_declare_var declareaux
    (17) decaux -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (95) func_declare_var -> .

    OPENBRAC        shift and go to state 33
    ENDSTMT         reduce using rule 95 (func_declare_var -> .)
    COMA            reduce using rule 95 (func_declare_var -> .)

    func_declare_var               shift and go to state 34

state 29

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 36

state 30

    (67) funcaux -> VOID func_type .

    ID              reduce using rule 67 (funcaux -> VOID func_type .)


state 31

    (64) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (98) func_declare_function -> .

    OPENPAREN       reduce using rule 98 (func_declare_function -> .)

    func_declare_function          shift and go to state 37

state 32

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN . func_begin_main block END func_end
    (108) func_begin_main -> .

    OPENCURL        reduce using rule 108 (func_begin_main -> .)

    func_begin_main                shift and go to state 38

state 33

    (17) decaux -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array declareaux
    (94) func_isSize -> .

    ID              reduce using rule 94 (func_isSize -> .)
    BOOLCTE         reduce using rule 94 (func_isSize -> .)
    NUMBERCTE       reduce using rule 94 (func_isSize -> .)
    WORDCTE         reduce using rule 94 (func_isSize -> .)
    SENTENCECTE     reduce using rule 94 (func_isSize -> .)

    func_isSize                    shift and go to state 39

state 34

    (16) decaux -> type ID func_declare_var . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 40
    COMA            shift and go to state 41

    declareaux                     shift and go to state 42

state 35

    (5) block -> OPENCURL . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (92) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (39) statement -> . assign
    (40) statement -> . expression
    (41) statement -> . condition
    (42) statement -> . cycle
    (43) statement -> . callfunction
    (44) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (60) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (61) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (62) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (63) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (73) returnaux -> . RETURN expression func_return ENDSTMT
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 92 (empty -> .)
    READ            shift and go to state 47
    WRITE           shift and go to state 61
    SET             shift and go to state 51
    NOT             shift and go to state 62
    IF              shift and go to state 56
    WHILE           shift and go to state 68
    DO              shift and go to state 44
    CALL            shift and go to state 70
    RETURN          shift and go to state 49
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    returnaux                      shift and go to state 52
    callfunction                   shift and go to state 53
    statement                      shift and go to state 54
    input                          shift and go to state 55
    blockaux                       shift and go to state 58
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    cte                            shift and go to state 69
    empty                          shift and go to state 57
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    expression                     shift and go to state 74
    assign                         shift and go to state 75

state 36

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 76


state 37

    (64) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL

    OPENPAREN       shift and go to state 77


state 38

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main . block END func_end
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 78

state 39

    (17) decaux -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array declareaux
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    cte                            shift and go to state 79

state 40

    (18) declareaux -> ENDSTMT .

    FUNC            reduce using rule 18 (declareaux -> ENDSTMT .)
    BEGIN           reduce using rule 18 (declareaux -> ENDSTMT .)
    READ            reduce using rule 18 (declareaux -> ENDSTMT .)
    WRITE           reduce using rule 18 (declareaux -> ENDSTMT .)
    SET             reduce using rule 18 (declareaux -> ENDSTMT .)
    NOT             reduce using rule 18 (declareaux -> ENDSTMT .)
    IF              reduce using rule 18 (declareaux -> ENDSTMT .)
    WHILE           reduce using rule 18 (declareaux -> ENDSTMT .)
    DO              reduce using rule 18 (declareaux -> ENDSTMT .)
    CALL            reduce using rule 18 (declareaux -> ENDSTMT .)
    RETURN          reduce using rule 18 (declareaux -> ENDSTMT .)
    OPENPAREN       reduce using rule 18 (declareaux -> ENDSTMT .)
    ID              reduce using rule 18 (declareaux -> ENDSTMT .)
    BOOLCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    NUMBERCTE       reduce using rule 18 (declareaux -> ENDSTMT .)
    WORDCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    SENTENCECTE     reduce using rule 18 (declareaux -> ENDSTMT .)
    CLOSECURL       reduce using rule 18 (declareaux -> ENDSTMT .)


state 41

    (19) declareaux -> COMA . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (35) type -> . BOOL func_type
    (36) type -> . NUMBER func_type
    (37) type -> . WORD func_type
    (38) type -> . SENTENCE func_type

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12

    decaux                         shift and go to state 80
    type                           shift and go to state 17

state 42

    (16) decaux -> type ID func_declare_var declareaux .

    FUNC            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BEGIN           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    READ            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WRITE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SET             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NOT             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    IF              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WHILE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    DO              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CALL            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    RETURN          reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    OPENPAREN       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ID              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BOOLCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NUMBERCTE       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WORDCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SENTENCECTE     reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CLOSECURL       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)


state 43

    (30) cte -> NUMBERCTE . func_numberCte func_constant
    (105) func_numberCte -> .

    MULT            reduce using rule 105 (func_numberCte -> .)
    DIV             reduce using rule 105 (func_numberCte -> .)
    PLUS            reduce using rule 105 (func_numberCte -> .)
    MINUS           reduce using rule 105 (func_numberCte -> .)
    RELOP           reduce using rule 105 (func_numberCte -> .)
    AND             reduce using rule 105 (func_numberCte -> .)
    OR              reduce using rule 105 (func_numberCte -> .)
    READ            reduce using rule 105 (func_numberCte -> .)
    WRITE           reduce using rule 105 (func_numberCte -> .)
    SET             reduce using rule 105 (func_numberCte -> .)
    NOT             reduce using rule 105 (func_numberCte -> .)
    IF              reduce using rule 105 (func_numberCte -> .)
    WHILE           reduce using rule 105 (func_numberCte -> .)
    DO              reduce using rule 105 (func_numberCte -> .)
    CALL            reduce using rule 105 (func_numberCte -> .)
    RETURN          reduce using rule 105 (func_numberCte -> .)
    OPENPAREN       reduce using rule 105 (func_numberCte -> .)
    ID              reduce using rule 105 (func_numberCte -> .)
    BOOLCTE         reduce using rule 105 (func_numberCte -> .)
    NUMBERCTE       reduce using rule 105 (func_numberCte -> .)
    WORDCTE         reduce using rule 105 (func_numberCte -> .)
    SENTENCECTE     reduce using rule 105 (func_numberCte -> .)
    CLOSECURL       reduce using rule 105 (func_numberCte -> .)
    CLOSEBRAC       reduce using rule 105 (func_numberCte -> .)
    ENDSTMT         reduce using rule 105 (func_numberCte -> .)
    CLOSEPAREN      reduce using rule 105 (func_numberCte -> .)
    COMA            reduce using rule 105 (func_numberCte -> .)

    func_numberCte                 shift and go to state 81

state 44

    (63) cycle -> DO . func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (127) func_do -> .

    OPENCURL        reduce using rule 127 (func_do -> .)

    func_do                        shift and go to state 82

state 45

    (31) cte -> WORDCTE . func_wordCte func_constant
    (106) func_wordCte -> .

    MULT            reduce using rule 106 (func_wordCte -> .)
    DIV             reduce using rule 106 (func_wordCte -> .)
    PLUS            reduce using rule 106 (func_wordCte -> .)
    MINUS           reduce using rule 106 (func_wordCte -> .)
    RELOP           reduce using rule 106 (func_wordCte -> .)
    AND             reduce using rule 106 (func_wordCte -> .)
    OR              reduce using rule 106 (func_wordCte -> .)
    READ            reduce using rule 106 (func_wordCte -> .)
    WRITE           reduce using rule 106 (func_wordCte -> .)
    SET             reduce using rule 106 (func_wordCte -> .)
    NOT             reduce using rule 106 (func_wordCte -> .)
    IF              reduce using rule 106 (func_wordCte -> .)
    WHILE           reduce using rule 106 (func_wordCte -> .)
    DO              reduce using rule 106 (func_wordCte -> .)
    CALL            reduce using rule 106 (func_wordCte -> .)
    RETURN          reduce using rule 106 (func_wordCte -> .)
    OPENPAREN       reduce using rule 106 (func_wordCte -> .)
    ID              reduce using rule 106 (func_wordCte -> .)
    BOOLCTE         reduce using rule 106 (func_wordCte -> .)
    NUMBERCTE       reduce using rule 106 (func_wordCte -> .)
    WORDCTE         reduce using rule 106 (func_wordCte -> .)
    SENTENCECTE     reduce using rule 106 (func_wordCte -> .)
    CLOSECURL       reduce using rule 106 (func_wordCte -> .)
    CLOSEBRAC       reduce using rule 106 (func_wordCte -> .)
    ENDSTMT         reduce using rule 106 (func_wordCte -> .)
    CLOSEPAREN      reduce using rule 106 (func_wordCte -> .)
    COMA            reduce using rule 106 (func_wordCte -> .)

    func_wordCte                   shift and go to state 83

state 46

    (29) cte -> BOOLCTE . func_boolCte func_constant
    (104) func_boolCte -> .

    MULT            reduce using rule 104 (func_boolCte -> .)
    DIV             reduce using rule 104 (func_boolCte -> .)
    PLUS            reduce using rule 104 (func_boolCte -> .)
    MINUS           reduce using rule 104 (func_boolCte -> .)
    RELOP           reduce using rule 104 (func_boolCte -> .)
    AND             reduce using rule 104 (func_boolCte -> .)
    OR              reduce using rule 104 (func_boolCte -> .)
    READ            reduce using rule 104 (func_boolCte -> .)
    WRITE           reduce using rule 104 (func_boolCte -> .)
    SET             reduce using rule 104 (func_boolCte -> .)
    NOT             reduce using rule 104 (func_boolCte -> .)
    IF              reduce using rule 104 (func_boolCte -> .)
    WHILE           reduce using rule 104 (func_boolCte -> .)
    DO              reduce using rule 104 (func_boolCte -> .)
    CALL            reduce using rule 104 (func_boolCte -> .)
    RETURN          reduce using rule 104 (func_boolCte -> .)
    OPENPAREN       reduce using rule 104 (func_boolCte -> .)
    ID              reduce using rule 104 (func_boolCte -> .)
    BOOLCTE         reduce using rule 104 (func_boolCte -> .)
    NUMBERCTE       reduce using rule 104 (func_boolCte -> .)
    WORDCTE         reduce using rule 104 (func_boolCte -> .)
    SENTENCECTE     reduce using rule 104 (func_boolCte -> .)
    CLOSECURL       reduce using rule 104 (func_boolCte -> .)
    CLOSEBRAC       reduce using rule 104 (func_boolCte -> .)
    ENDSTMT         reduce using rule 104 (func_boolCte -> .)
    CLOSEPAREN      reduce using rule 104 (func_boolCte -> .)
    COMA            reduce using rule 104 (func_boolCte -> .)

    func_boolCte                   shift and go to state 84

state 47

    (11) input -> READ . OPENPAREN ID func_read CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 85


state 48

    (32) cte -> SENTENCECTE . func_sentenceCte func_constant
    (107) func_sentenceCte -> .

    MULT            reduce using rule 107 (func_sentenceCte -> .)
    DIV             reduce using rule 107 (func_sentenceCte -> .)
    PLUS            reduce using rule 107 (func_sentenceCte -> .)
    MINUS           reduce using rule 107 (func_sentenceCte -> .)
    RELOP           reduce using rule 107 (func_sentenceCte -> .)
    AND             reduce using rule 107 (func_sentenceCte -> .)
    OR              reduce using rule 107 (func_sentenceCte -> .)
    READ            reduce using rule 107 (func_sentenceCte -> .)
    WRITE           reduce using rule 107 (func_sentenceCte -> .)
    SET             reduce using rule 107 (func_sentenceCte -> .)
    NOT             reduce using rule 107 (func_sentenceCte -> .)
    IF              reduce using rule 107 (func_sentenceCte -> .)
    WHILE           reduce using rule 107 (func_sentenceCte -> .)
    DO              reduce using rule 107 (func_sentenceCte -> .)
    CALL            reduce using rule 107 (func_sentenceCte -> .)
    RETURN          reduce using rule 107 (func_sentenceCte -> .)
    OPENPAREN       reduce using rule 107 (func_sentenceCte -> .)
    ID              reduce using rule 107 (func_sentenceCte -> .)
    BOOLCTE         reduce using rule 107 (func_sentenceCte -> .)
    NUMBERCTE       reduce using rule 107 (func_sentenceCte -> .)
    WORDCTE         reduce using rule 107 (func_sentenceCte -> .)
    SENTENCECTE     reduce using rule 107 (func_sentenceCte -> .)
    CLOSECURL       reduce using rule 107 (func_sentenceCte -> .)
    CLOSEBRAC       reduce using rule 107 (func_sentenceCte -> .)
    ENDSTMT         reduce using rule 107 (func_sentenceCte -> .)
    CLOSEPAREN      reduce using rule 107 (func_sentenceCte -> .)
    COMA            reduce using rule 107 (func_sentenceCte -> .)

    func_sentenceCte               shift and go to state 86

state 49

    (73) returnaux -> RETURN . expression func_return ENDSTMT
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 87

state 50

    (58) factor -> OPENPAREN . expression CLOSEPAREN
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 88

state 51

    (20) assign -> SET . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> SET . ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    ID              shift and go to state 89


state 52

    (44) statement -> returnaux .

    READ            reduce using rule 44 (statement -> returnaux .)
    WRITE           reduce using rule 44 (statement -> returnaux .)
    SET             reduce using rule 44 (statement -> returnaux .)
    NOT             reduce using rule 44 (statement -> returnaux .)
    IF              reduce using rule 44 (statement -> returnaux .)
    WHILE           reduce using rule 44 (statement -> returnaux .)
    DO              reduce using rule 44 (statement -> returnaux .)
    CALL            reduce using rule 44 (statement -> returnaux .)
    RETURN          reduce using rule 44 (statement -> returnaux .)
    OPENPAREN       reduce using rule 44 (statement -> returnaux .)
    ID              reduce using rule 44 (statement -> returnaux .)
    BOOLCTE         reduce using rule 44 (statement -> returnaux .)
    NUMBERCTE       reduce using rule 44 (statement -> returnaux .)
    WORDCTE         reduce using rule 44 (statement -> returnaux .)
    SENTENCECTE     reduce using rule 44 (statement -> returnaux .)
    CLOSECURL       reduce using rule 44 (statement -> returnaux .)


state 53

    (43) statement -> callfunction .

    READ            reduce using rule 43 (statement -> callfunction .)
    WRITE           reduce using rule 43 (statement -> callfunction .)
    SET             reduce using rule 43 (statement -> callfunction .)
    NOT             reduce using rule 43 (statement -> callfunction .)
    IF              reduce using rule 43 (statement -> callfunction .)
    WHILE           reduce using rule 43 (statement -> callfunction .)
    DO              reduce using rule 43 (statement -> callfunction .)
    CALL            reduce using rule 43 (statement -> callfunction .)
    RETURN          reduce using rule 43 (statement -> callfunction .)
    OPENPAREN       reduce using rule 43 (statement -> callfunction .)
    ID              reduce using rule 43 (statement -> callfunction .)
    BOOLCTE         reduce using rule 43 (statement -> callfunction .)
    NUMBERCTE       reduce using rule 43 (statement -> callfunction .)
    WORDCTE         reduce using rule 43 (statement -> callfunction .)
    SENTENCECTE     reduce using rule 43 (statement -> callfunction .)
    CLOSECURL       reduce using rule 43 (statement -> callfunction .)


state 54

    (10) action -> statement .

    READ            reduce using rule 10 (action -> statement .)
    WRITE           reduce using rule 10 (action -> statement .)
    SET             reduce using rule 10 (action -> statement .)
    NOT             reduce using rule 10 (action -> statement .)
    IF              reduce using rule 10 (action -> statement .)
    WHILE           reduce using rule 10 (action -> statement .)
    DO              reduce using rule 10 (action -> statement .)
    CALL            reduce using rule 10 (action -> statement .)
    RETURN          reduce using rule 10 (action -> statement .)
    OPENPAREN       reduce using rule 10 (action -> statement .)
    ID              reduce using rule 10 (action -> statement .)
    BOOLCTE         reduce using rule 10 (action -> statement .)
    NUMBERCTE       reduce using rule 10 (action -> statement .)
    WORDCTE         reduce using rule 10 (action -> statement .)
    SENTENCECTE     reduce using rule 10 (action -> statement .)
    CLOSECURL       reduce using rule 10 (action -> statement .)


state 55

    (8) action -> input .

    READ            reduce using rule 8 (action -> input .)
    WRITE           reduce using rule 8 (action -> input .)
    SET             reduce using rule 8 (action -> input .)
    NOT             reduce using rule 8 (action -> input .)
    IF              reduce using rule 8 (action -> input .)
    WHILE           reduce using rule 8 (action -> input .)
    DO              reduce using rule 8 (action -> input .)
    CALL            reduce using rule 8 (action -> input .)
    RETURN          reduce using rule 8 (action -> input .)
    OPENPAREN       reduce using rule 8 (action -> input .)
    ID              reduce using rule 8 (action -> input .)
    BOOLCTE         reduce using rule 8 (action -> input .)
    NUMBERCTE       reduce using rule 8 (action -> input .)
    WORDCTE         reduce using rule 8 (action -> input .)
    SENTENCECTE     reduce using rule 8 (action -> input .)
    CLOSECURL       reduce using rule 8 (action -> input .)


state 56

    (60) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (61) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse

    OPENPAREN       shift and go to state 90


state 57

    (7) blockaux -> empty .

    CLOSECURL       reduce using rule 7 (blockaux -> empty .)


state 58

    (5) block -> OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 91


state 59

    (55) term -> factor .
    (56) term -> factor . MULT func_factor_operation term func_factor
    (57) term -> factor . DIV func_factor_operation term func_factor

    PLUS            reduce using rule 55 (term -> factor .)
    MINUS           reduce using rule 55 (term -> factor .)
    AND             reduce using rule 55 (term -> factor .)
    OR              reduce using rule 55 (term -> factor .)
    READ            reduce using rule 55 (term -> factor .)
    WRITE           reduce using rule 55 (term -> factor .)
    SET             reduce using rule 55 (term -> factor .)
    NOT             reduce using rule 55 (term -> factor .)
    IF              reduce using rule 55 (term -> factor .)
    WHILE           reduce using rule 55 (term -> factor .)
    DO              reduce using rule 55 (term -> factor .)
    CALL            reduce using rule 55 (term -> factor .)
    RETURN          reduce using rule 55 (term -> factor .)
    OPENPAREN       reduce using rule 55 (term -> factor .)
    ID              reduce using rule 55 (term -> factor .)
    BOOLCTE         reduce using rule 55 (term -> factor .)
    NUMBERCTE       reduce using rule 55 (term -> factor .)
    WORDCTE         reduce using rule 55 (term -> factor .)
    SENTENCECTE     reduce using rule 55 (term -> factor .)
    CLOSECURL       reduce using rule 55 (term -> factor .)
    ENDSTMT         reduce using rule 55 (term -> factor .)
    CLOSEPAREN      reduce using rule 55 (term -> factor .)
    COMA            reduce using rule 55 (term -> factor .)
    RELOP           reduce using rule 55 (term -> factor .)
    MULT            shift and go to state 93
    DIV             shift and go to state 92


state 60

    (45) expression -> logexpression .

    COMA            reduce using rule 45 (expression -> logexpression .)
    CLOSEPAREN      reduce using rule 45 (expression -> logexpression .)
    READ            reduce using rule 45 (expression -> logexpression .)
    WRITE           reduce using rule 45 (expression -> logexpression .)
    SET             reduce using rule 45 (expression -> logexpression .)
    NOT             reduce using rule 45 (expression -> logexpression .)
    IF              reduce using rule 45 (expression -> logexpression .)
    WHILE           reduce using rule 45 (expression -> logexpression .)
    DO              reduce using rule 45 (expression -> logexpression .)
    CALL            reduce using rule 45 (expression -> logexpression .)
    RETURN          reduce using rule 45 (expression -> logexpression .)
    OPENPAREN       reduce using rule 45 (expression -> logexpression .)
    ID              reduce using rule 45 (expression -> logexpression .)
    BOOLCTE         reduce using rule 45 (expression -> logexpression .)
    NUMBERCTE       reduce using rule 45 (expression -> logexpression .)
    WORDCTE         reduce using rule 45 (expression -> logexpression .)
    SENTENCECTE     reduce using rule 45 (expression -> logexpression .)
    CLOSECURL       reduce using rule 45 (expression -> logexpression .)
    ENDSTMT         reduce using rule 45 (expression -> logexpression .)


state 61

    (12) output -> WRITE . OPENPAREN outputaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 94


state 62

    (46) expression -> NOT . func_logicOp_operation logexpression func_logicOP
    (121) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 121 (func_logicOp_operation -> .)
    ID              reduce using rule 121 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 121 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 121 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 121 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 121 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 95

state 63

    (47) logexpression -> relopexpression .
    (48) logexpression -> relopexpression . AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> relopexpression . OR func_logicOp_operation logexpression func_logicOP

    READ            reduce using rule 47 (logexpression -> relopexpression .)
    WRITE           reduce using rule 47 (logexpression -> relopexpression .)
    SET             reduce using rule 47 (logexpression -> relopexpression .)
    NOT             reduce using rule 47 (logexpression -> relopexpression .)
    IF              reduce using rule 47 (logexpression -> relopexpression .)
    WHILE           reduce using rule 47 (logexpression -> relopexpression .)
    DO              reduce using rule 47 (logexpression -> relopexpression .)
    CALL            reduce using rule 47 (logexpression -> relopexpression .)
    RETURN          reduce using rule 47 (logexpression -> relopexpression .)
    OPENPAREN       reduce using rule 47 (logexpression -> relopexpression .)
    ID              reduce using rule 47 (logexpression -> relopexpression .)
    BOOLCTE         reduce using rule 47 (logexpression -> relopexpression .)
    NUMBERCTE       reduce using rule 47 (logexpression -> relopexpression .)
    WORDCTE         reduce using rule 47 (logexpression -> relopexpression .)
    SENTENCECTE     reduce using rule 47 (logexpression -> relopexpression .)
    CLOSECURL       reduce using rule 47 (logexpression -> relopexpression .)
    CLOSEPAREN      reduce using rule 47 (logexpression -> relopexpression .)
    COMA            reduce using rule 47 (logexpression -> relopexpression .)
    ENDSTMT         reduce using rule 47 (logexpression -> relopexpression .)
    AND             shift and go to state 96
    OR              shift and go to state 97


state 64

    (27) cte -> ID . func_constantID
    (28) cte -> ID . OPENBRAC index CLOSEBRAC func_constantIDArray
    (102) func_constantID -> .

    OPENBRAC        shift and go to state 98
    MULT            reduce using rule 102 (func_constantID -> .)
    DIV             reduce using rule 102 (func_constantID -> .)
    PLUS            reduce using rule 102 (func_constantID -> .)
    MINUS           reduce using rule 102 (func_constantID -> .)
    RELOP           reduce using rule 102 (func_constantID -> .)
    AND             reduce using rule 102 (func_constantID -> .)
    OR              reduce using rule 102 (func_constantID -> .)
    READ            reduce using rule 102 (func_constantID -> .)
    WRITE           reduce using rule 102 (func_constantID -> .)
    SET             reduce using rule 102 (func_constantID -> .)
    NOT             reduce using rule 102 (func_constantID -> .)
    IF              reduce using rule 102 (func_constantID -> .)
    WHILE           reduce using rule 102 (func_constantID -> .)
    DO              reduce using rule 102 (func_constantID -> .)
    CALL            reduce using rule 102 (func_constantID -> .)
    RETURN          reduce using rule 102 (func_constantID -> .)
    OPENPAREN       reduce using rule 102 (func_constantID -> .)
    ID              reduce using rule 102 (func_constantID -> .)
    BOOLCTE         reduce using rule 102 (func_constantID -> .)
    NUMBERCTE       reduce using rule 102 (func_constantID -> .)
    WORDCTE         reduce using rule 102 (func_constantID -> .)
    SENTENCECTE     reduce using rule 102 (func_constantID -> .)
    CLOSECURL       reduce using rule 102 (func_constantID -> .)
    CLOSEBRAC       reduce using rule 102 (func_constantID -> .)
    ENDSTMT         reduce using rule 102 (func_constantID -> .)
    CLOSEPAREN      reduce using rule 102 (func_constantID -> .)
    COMA            reduce using rule 102 (func_constantID -> .)

    func_constantID                shift and go to state 99

state 65

    (41) statement -> condition .

    READ            reduce using rule 41 (statement -> condition .)
    WRITE           reduce using rule 41 (statement -> condition .)
    SET             reduce using rule 41 (statement -> condition .)
    NOT             reduce using rule 41 (statement -> condition .)
    IF              reduce using rule 41 (statement -> condition .)
    WHILE           reduce using rule 41 (statement -> condition .)
    DO              reduce using rule 41 (statement -> condition .)
    CALL            reduce using rule 41 (statement -> condition .)
    RETURN          reduce using rule 41 (statement -> condition .)
    OPENPAREN       reduce using rule 41 (statement -> condition .)
    ID              reduce using rule 41 (statement -> condition .)
    BOOLCTE         reduce using rule 41 (statement -> condition .)
    NUMBERCTE       reduce using rule 41 (statement -> condition .)
    WORDCTE         reduce using rule 41 (statement -> condition .)
    SENTENCECTE     reduce using rule 41 (statement -> condition .)
    CLOSECURL       reduce using rule 41 (statement -> condition .)


state 66

    (42) statement -> cycle .

    READ            reduce using rule 42 (statement -> cycle .)
    WRITE           reduce using rule 42 (statement -> cycle .)
    SET             reduce using rule 42 (statement -> cycle .)
    NOT             reduce using rule 42 (statement -> cycle .)
    IF              reduce using rule 42 (statement -> cycle .)
    WHILE           reduce using rule 42 (statement -> cycle .)
    DO              reduce using rule 42 (statement -> cycle .)
    CALL            reduce using rule 42 (statement -> cycle .)
    RETURN          reduce using rule 42 (statement -> cycle .)
    OPENPAREN       reduce using rule 42 (statement -> cycle .)
    ID              reduce using rule 42 (statement -> cycle .)
    BOOLCTE         reduce using rule 42 (statement -> cycle .)
    NUMBERCTE       reduce using rule 42 (statement -> cycle .)
    WORDCTE         reduce using rule 42 (statement -> cycle .)
    SENTENCECTE     reduce using rule 42 (statement -> cycle .)
    CLOSECURL       reduce using rule 42 (statement -> cycle .)


state 67

    (52) exp -> term .
    (53) exp -> term . PLUS func_term_operation exp func_term
    (54) exp -> term . MINUS func_term_operation exp func_term

    RELOP           reduce using rule 52 (exp -> term .)
    AND             reduce using rule 52 (exp -> term .)
    OR              reduce using rule 52 (exp -> term .)
    CLOSEPAREN      reduce using rule 52 (exp -> term .)
    ENDSTMT         reduce using rule 52 (exp -> term .)
    READ            reduce using rule 52 (exp -> term .)
    WRITE           reduce using rule 52 (exp -> term .)
    SET             reduce using rule 52 (exp -> term .)
    NOT             reduce using rule 52 (exp -> term .)
    IF              reduce using rule 52 (exp -> term .)
    WHILE           reduce using rule 52 (exp -> term .)
    DO              reduce using rule 52 (exp -> term .)
    CALL            reduce using rule 52 (exp -> term .)
    RETURN          reduce using rule 52 (exp -> term .)
    OPENPAREN       reduce using rule 52 (exp -> term .)
    ID              reduce using rule 52 (exp -> term .)
    BOOLCTE         reduce using rule 52 (exp -> term .)
    NUMBERCTE       reduce using rule 52 (exp -> term .)
    WORDCTE         reduce using rule 52 (exp -> term .)
    SENTENCECTE     reduce using rule 52 (exp -> term .)
    CLOSECURL       reduce using rule 52 (exp -> term .)
    COMA            reduce using rule 52 (exp -> term .)
    PLUS            shift and go to state 100
    MINUS           shift and go to state 101


state 68

    (62) cycle -> WHILE . func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (129) func_while -> .

    OPENPAREN       reduce using rule 129 (func_while -> .)

    func_while                     shift and go to state 102

state 69

    (59) factor -> cte .

    MULT            reduce using rule 59 (factor -> cte .)
    DIV             reduce using rule 59 (factor -> cte .)
    PLUS            reduce using rule 59 (factor -> cte .)
    MINUS           reduce using rule 59 (factor -> cte .)
    RELOP           reduce using rule 59 (factor -> cte .)
    AND             reduce using rule 59 (factor -> cte .)
    OR              reduce using rule 59 (factor -> cte .)
    READ            reduce using rule 59 (factor -> cte .)
    WRITE           reduce using rule 59 (factor -> cte .)
    SET             reduce using rule 59 (factor -> cte .)
    NOT             reduce using rule 59 (factor -> cte .)
    IF              reduce using rule 59 (factor -> cte .)
    WHILE           reduce using rule 59 (factor -> cte .)
    DO              reduce using rule 59 (factor -> cte .)
    CALL            reduce using rule 59 (factor -> cte .)
    RETURN          reduce using rule 59 (factor -> cte .)
    OPENPAREN       reduce using rule 59 (factor -> cte .)
    ID              reduce using rule 59 (factor -> cte .)
    BOOLCTE         reduce using rule 59 (factor -> cte .)
    NUMBERCTE       reduce using rule 59 (factor -> cte .)
    WORDCTE         reduce using rule 59 (factor -> cte .)
    SENTENCECTE     reduce using rule 59 (factor -> cte .)
    CLOSECURL       reduce using rule 59 (factor -> cte .)
    ENDSTMT         reduce using rule 59 (factor -> cte .)
    CLOSEPAREN      reduce using rule 59 (factor -> cte .)
    COMA            reduce using rule 59 (factor -> cte .)


state 70

    (74) callfunction -> CALL . ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> CALL . ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    ID              shift and go to state 103


state 71

    (50) relopexpression -> exp .
    (51) relopexpression -> exp . func_relop RELOP func_relop_operation exp func_relop
    (120) func_relop -> .

    AND             reduce using rule 50 (relopexpression -> exp .)
    OR              reduce using rule 50 (relopexpression -> exp .)
    READ            reduce using rule 50 (relopexpression -> exp .)
    WRITE           reduce using rule 50 (relopexpression -> exp .)
    SET             reduce using rule 50 (relopexpression -> exp .)
    NOT             reduce using rule 50 (relopexpression -> exp .)
    IF              reduce using rule 50 (relopexpression -> exp .)
    WHILE           reduce using rule 50 (relopexpression -> exp .)
    DO              reduce using rule 50 (relopexpression -> exp .)
    CALL            reduce using rule 50 (relopexpression -> exp .)
    RETURN          reduce using rule 50 (relopexpression -> exp .)
    OPENPAREN       reduce using rule 50 (relopexpression -> exp .)
    ID              reduce using rule 50 (relopexpression -> exp .)
    BOOLCTE         reduce using rule 50 (relopexpression -> exp .)
    NUMBERCTE       reduce using rule 50 (relopexpression -> exp .)
    WORDCTE         reduce using rule 50 (relopexpression -> exp .)
    SENTENCECTE     reduce using rule 50 (relopexpression -> exp .)
    CLOSECURL       reduce using rule 50 (relopexpression -> exp .)
    ENDSTMT         reduce using rule 50 (relopexpression -> exp .)
    CLOSEPAREN      reduce using rule 50 (relopexpression -> exp .)
    COMA            reduce using rule 50 (relopexpression -> exp .)
    RELOP           reduce using rule 120 (func_relop -> .)

    func_relop                     shift and go to state 104

state 72

    (6) blockaux -> action . blockaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (92) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (39) statement -> . assign
    (40) statement -> . expression
    (41) statement -> . condition
    (42) statement -> . cycle
    (43) statement -> . callfunction
    (44) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (60) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (61) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (62) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (63) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (73) returnaux -> . RETURN expression func_return ENDSTMT
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 92 (empty -> .)
    READ            shift and go to state 47
    WRITE           shift and go to state 61
    SET             shift and go to state 51
    NOT             shift and go to state 62
    IF              shift and go to state 56
    WHILE           shift and go to state 68
    DO              shift and go to state 44
    CALL            shift and go to state 70
    RETURN          shift and go to state 49
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    returnaux                      shift and go to state 52
    callfunction                   shift and go to state 53
    statement                      shift and go to state 54
    input                          shift and go to state 55
    blockaux                       shift and go to state 105
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    cte                            shift and go to state 69
    empty                          shift and go to state 57
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    expression                     shift and go to state 74
    assign                         shift and go to state 75

state 73

    (9) action -> output .

    READ            reduce using rule 9 (action -> output .)
    WRITE           reduce using rule 9 (action -> output .)
    SET             reduce using rule 9 (action -> output .)
    NOT             reduce using rule 9 (action -> output .)
    IF              reduce using rule 9 (action -> output .)
    WHILE           reduce using rule 9 (action -> output .)
    DO              reduce using rule 9 (action -> output .)
    CALL            reduce using rule 9 (action -> output .)
    RETURN          reduce using rule 9 (action -> output .)
    OPENPAREN       reduce using rule 9 (action -> output .)
    ID              reduce using rule 9 (action -> output .)
    BOOLCTE         reduce using rule 9 (action -> output .)
    NUMBERCTE       reduce using rule 9 (action -> output .)
    WORDCTE         reduce using rule 9 (action -> output .)
    SENTENCECTE     reduce using rule 9 (action -> output .)
    CLOSECURL       reduce using rule 9 (action -> output .)


state 74

    (40) statement -> expression .

    READ            reduce using rule 40 (statement -> expression .)
    WRITE           reduce using rule 40 (statement -> expression .)
    SET             reduce using rule 40 (statement -> expression .)
    NOT             reduce using rule 40 (statement -> expression .)
    IF              reduce using rule 40 (statement -> expression .)
    WHILE           reduce using rule 40 (statement -> expression .)
    DO              reduce using rule 40 (statement -> expression .)
    CALL            reduce using rule 40 (statement -> expression .)
    RETURN          reduce using rule 40 (statement -> expression .)
    OPENPAREN       reduce using rule 40 (statement -> expression .)
    ID              reduce using rule 40 (statement -> expression .)
    BOOLCTE         reduce using rule 40 (statement -> expression .)
    NUMBERCTE       reduce using rule 40 (statement -> expression .)
    WORDCTE         reduce using rule 40 (statement -> expression .)
    SENTENCECTE     reduce using rule 40 (statement -> expression .)
    CLOSECURL       reduce using rule 40 (statement -> expression .)


state 75

    (39) statement -> assign .

    READ            reduce using rule 39 (statement -> assign .)
    WRITE           reduce using rule 39 (statement -> assign .)
    SET             reduce using rule 39 (statement -> assign .)
    NOT             reduce using rule 39 (statement -> assign .)
    IF              reduce using rule 39 (statement -> assign .)
    WHILE           reduce using rule 39 (statement -> assign .)
    DO              reduce using rule 39 (statement -> assign .)
    CALL            reduce using rule 39 (statement -> assign .)
    RETURN          reduce using rule 39 (statement -> assign .)
    OPENPAREN       reduce using rule 39 (statement -> assign .)
    ID              reduce using rule 39 (statement -> assign .)
    BOOLCTE         reduce using rule 39 (statement -> assign .)
    NUMBERCTE       reduce using rule 39 (statement -> assign .)
    WORDCTE         reduce using rule 39 (statement -> assign .)
    SENTENCECTE     reduce using rule 39 (statement -> assign .)
    CLOSECURL       reduce using rule 39 (statement -> assign .)


state 76

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END . func_end
    (138) func_end -> .

    $end            reduce using rule 138 (func_end -> .)

    func_end                       shift and go to state 106

state 77

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL blockaux CLOSECURL
    (68) parameter -> . type ID func_declare_par parameteraux
    (69) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (70) parameter -> . empty
    (35) type -> . BOOL func_type
    (36) type -> . NUMBER func_type
    (37) type -> . WORD func_type
    (38) type -> . SENTENCE func_type
    (92) empty -> .

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    parameter                      shift and go to state 109
    type                           shift and go to state 107
    empty                          shift and go to state 108

state 78

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block . END func_end

    END             shift and go to state 110


state 79

    (17) decaux -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array declareaux

    CLOSEBRAC       shift and go to state 111


state 80

    (19) declareaux -> COMA decaux .

    FUNC            reduce using rule 19 (declareaux -> COMA decaux .)
    BEGIN           reduce using rule 19 (declareaux -> COMA decaux .)
    READ            reduce using rule 19 (declareaux -> COMA decaux .)
    WRITE           reduce using rule 19 (declareaux -> COMA decaux .)
    SET             reduce using rule 19 (declareaux -> COMA decaux .)
    NOT             reduce using rule 19 (declareaux -> COMA decaux .)
    IF              reduce using rule 19 (declareaux -> COMA decaux .)
    WHILE           reduce using rule 19 (declareaux -> COMA decaux .)
    DO              reduce using rule 19 (declareaux -> COMA decaux .)
    CALL            reduce using rule 19 (declareaux -> COMA decaux .)
    RETURN          reduce using rule 19 (declareaux -> COMA decaux .)
    OPENPAREN       reduce using rule 19 (declareaux -> COMA decaux .)
    ID              reduce using rule 19 (declareaux -> COMA decaux .)
    BOOLCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    NUMBERCTE       reduce using rule 19 (declareaux -> COMA decaux .)
    WORDCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    SENTENCECTE     reduce using rule 19 (declareaux -> COMA decaux .)
    CLOSECURL       reduce using rule 19 (declareaux -> COMA decaux .)


state 81

    (30) cte -> NUMBERCTE func_numberCte . func_constant
    (101) func_constant -> .

    MULT            reduce using rule 101 (func_constant -> .)
    DIV             reduce using rule 101 (func_constant -> .)
    PLUS            reduce using rule 101 (func_constant -> .)
    MINUS           reduce using rule 101 (func_constant -> .)
    RELOP           reduce using rule 101 (func_constant -> .)
    AND             reduce using rule 101 (func_constant -> .)
    OR              reduce using rule 101 (func_constant -> .)
    READ            reduce using rule 101 (func_constant -> .)
    WRITE           reduce using rule 101 (func_constant -> .)
    SET             reduce using rule 101 (func_constant -> .)
    NOT             reduce using rule 101 (func_constant -> .)
    IF              reduce using rule 101 (func_constant -> .)
    WHILE           reduce using rule 101 (func_constant -> .)
    DO              reduce using rule 101 (func_constant -> .)
    CALL            reduce using rule 101 (func_constant -> .)
    RETURN          reduce using rule 101 (func_constant -> .)
    OPENPAREN       reduce using rule 101 (func_constant -> .)
    ID              reduce using rule 101 (func_constant -> .)
    BOOLCTE         reduce using rule 101 (func_constant -> .)
    NUMBERCTE       reduce using rule 101 (func_constant -> .)
    WORDCTE         reduce using rule 101 (func_constant -> .)
    SENTENCECTE     reduce using rule 101 (func_constant -> .)
    CLOSECURL       reduce using rule 101 (func_constant -> .)
    CLOSEBRAC       reduce using rule 101 (func_constant -> .)
    ENDSTMT         reduce using rule 101 (func_constant -> .)
    CLOSEPAREN      reduce using rule 101 (func_constant -> .)
    COMA            reduce using rule 101 (func_constant -> .)

    func_constant                  shift and go to state 112

state 82

    (63) cycle -> DO func_do . block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 113

state 83

    (31) cte -> WORDCTE func_wordCte . func_constant
    (101) func_constant -> .

    MULT            reduce using rule 101 (func_constant -> .)
    DIV             reduce using rule 101 (func_constant -> .)
    PLUS            reduce using rule 101 (func_constant -> .)
    MINUS           reduce using rule 101 (func_constant -> .)
    RELOP           reduce using rule 101 (func_constant -> .)
    AND             reduce using rule 101 (func_constant -> .)
    OR              reduce using rule 101 (func_constant -> .)
    READ            reduce using rule 101 (func_constant -> .)
    WRITE           reduce using rule 101 (func_constant -> .)
    SET             reduce using rule 101 (func_constant -> .)
    NOT             reduce using rule 101 (func_constant -> .)
    IF              reduce using rule 101 (func_constant -> .)
    WHILE           reduce using rule 101 (func_constant -> .)
    DO              reduce using rule 101 (func_constant -> .)
    CALL            reduce using rule 101 (func_constant -> .)
    RETURN          reduce using rule 101 (func_constant -> .)
    OPENPAREN       reduce using rule 101 (func_constant -> .)
    ID              reduce using rule 101 (func_constant -> .)
    BOOLCTE         reduce using rule 101 (func_constant -> .)
    NUMBERCTE       reduce using rule 101 (func_constant -> .)
    WORDCTE         reduce using rule 101 (func_constant -> .)
    SENTENCECTE     reduce using rule 101 (func_constant -> .)
    CLOSECURL       reduce using rule 101 (func_constant -> .)
    CLOSEBRAC       reduce using rule 101 (func_constant -> .)
    ENDSTMT         reduce using rule 101 (func_constant -> .)
    CLOSEPAREN      reduce using rule 101 (func_constant -> .)
    COMA            reduce using rule 101 (func_constant -> .)

    func_constant                  shift and go to state 114

state 84

    (29) cte -> BOOLCTE func_boolCte . func_constant
    (101) func_constant -> .

    MULT            reduce using rule 101 (func_constant -> .)
    DIV             reduce using rule 101 (func_constant -> .)
    PLUS            reduce using rule 101 (func_constant -> .)
    MINUS           reduce using rule 101 (func_constant -> .)
    RELOP           reduce using rule 101 (func_constant -> .)
    AND             reduce using rule 101 (func_constant -> .)
    OR              reduce using rule 101 (func_constant -> .)
    READ            reduce using rule 101 (func_constant -> .)
    WRITE           reduce using rule 101 (func_constant -> .)
    SET             reduce using rule 101 (func_constant -> .)
    NOT             reduce using rule 101 (func_constant -> .)
    IF              reduce using rule 101 (func_constant -> .)
    WHILE           reduce using rule 101 (func_constant -> .)
    DO              reduce using rule 101 (func_constant -> .)
    CALL            reduce using rule 101 (func_constant -> .)
    RETURN          reduce using rule 101 (func_constant -> .)
    OPENPAREN       reduce using rule 101 (func_constant -> .)
    ID              reduce using rule 101 (func_constant -> .)
    BOOLCTE         reduce using rule 101 (func_constant -> .)
    NUMBERCTE       reduce using rule 101 (func_constant -> .)
    WORDCTE         reduce using rule 101 (func_constant -> .)
    SENTENCECTE     reduce using rule 101 (func_constant -> .)
    CLOSECURL       reduce using rule 101 (func_constant -> .)
    CLOSEBRAC       reduce using rule 101 (func_constant -> .)
    ENDSTMT         reduce using rule 101 (func_constant -> .)
    CLOSEPAREN      reduce using rule 101 (func_constant -> .)
    COMA            reduce using rule 101 (func_constant -> .)

    func_constant                  shift and go to state 115

state 85

    (11) input -> READ OPENPAREN . ID func_read CLOSEPAREN ENDSTMT

    ID              shift and go to state 116


state 86

    (32) cte -> SENTENCECTE func_sentenceCte . func_constant
    (101) func_constant -> .

    MULT            reduce using rule 101 (func_constant -> .)
    DIV             reduce using rule 101 (func_constant -> .)
    PLUS            reduce using rule 101 (func_constant -> .)
    MINUS           reduce using rule 101 (func_constant -> .)
    RELOP           reduce using rule 101 (func_constant -> .)
    AND             reduce using rule 101 (func_constant -> .)
    OR              reduce using rule 101 (func_constant -> .)
    READ            reduce using rule 101 (func_constant -> .)
    WRITE           reduce using rule 101 (func_constant -> .)
    SET             reduce using rule 101 (func_constant -> .)
    NOT             reduce using rule 101 (func_constant -> .)
    IF              reduce using rule 101 (func_constant -> .)
    WHILE           reduce using rule 101 (func_constant -> .)
    DO              reduce using rule 101 (func_constant -> .)
    CALL            reduce using rule 101 (func_constant -> .)
    RETURN          reduce using rule 101 (func_constant -> .)
    OPENPAREN       reduce using rule 101 (func_constant -> .)
    ID              reduce using rule 101 (func_constant -> .)
    BOOLCTE         reduce using rule 101 (func_constant -> .)
    NUMBERCTE       reduce using rule 101 (func_constant -> .)
    WORDCTE         reduce using rule 101 (func_constant -> .)
    SENTENCECTE     reduce using rule 101 (func_constant -> .)
    CLOSECURL       reduce using rule 101 (func_constant -> .)
    CLOSEBRAC       reduce using rule 101 (func_constant -> .)
    ENDSTMT         reduce using rule 101 (func_constant -> .)
    CLOSEPAREN      reduce using rule 101 (func_constant -> .)
    COMA            reduce using rule 101 (func_constant -> .)

    func_constant                  shift and go to state 117

state 87

    (73) returnaux -> RETURN expression . func_return ENDSTMT
    (137) func_return -> .

    ENDSTMT         reduce using rule 137 (func_return -> .)

    func_return                    shift and go to state 118

state 88

    (58) factor -> OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 119


state 89

    (20) assign -> SET ID . func_constantID EQUAL func_assign assignaux
    (21) assign -> SET ID . OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (102) func_constantID -> .

    OPENBRAC        shift and go to state 120
    EQUAL           reduce using rule 102 (func_constantID -> .)

    func_constantID                shift and go to state 121

state 90

    (60) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block func_endIf
    (61) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 122

state 91

    (5) block -> OPENCURL blockaux CLOSECURL .

    END             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ELSE            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    READ            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WRITE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SET             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NOT             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    IF              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WHILE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    DO              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CALL            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    RETURN          reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    OPENPAREN       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ID              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    BOOLCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NUMBERCTE       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WORDCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SENTENCECTE     reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CLOSECURL       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)


state 92

    (57) term -> factor DIV . func_factor_operation term func_factor
    (117) func_factor_operation -> .

    OPENPAREN       reduce using rule 117 (func_factor_operation -> .)
    ID              reduce using rule 117 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 117 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 117 (func_factor_operation -> .)
    WORDCTE         reduce using rule 117 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 117 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 123

state 93

    (56) term -> factor MULT . func_factor_operation term func_factor
    (117) func_factor_operation -> .

    OPENPAREN       reduce using rule 117 (func_factor_operation -> .)
    ID              reduce using rule 117 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 117 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 117 (func_factor_operation -> .)
    WORDCTE         reduce using rule 117 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 117 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 124

state 94

    (12) output -> WRITE OPENPAREN . outputaux CLOSEPAREN ENDSTMT
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    outputaux                      shift and go to state 125
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 126

state 95

    (46) expression -> NOT func_logicOp_operation . logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 127
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 96

    (48) logexpression -> relopexpression AND . func_logicOp_operation logexpression func_logicOP
    (121) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 121 (func_logicOp_operation -> .)
    ID              reduce using rule 121 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 121 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 121 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 121 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 121 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 128

state 97

    (49) logexpression -> relopexpression OR . func_logicOp_operation logexpression func_logicOP
    (121) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 121 (func_logicOp_operation -> .)
    ID              reduce using rule 121 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 121 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 121 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 121 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 121 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 129

state 98

    (28) cte -> ID OPENBRAC . index CLOSEBRAC func_constantIDArray
    (33) index -> . NUMBERCTE func_numberCte func_constant func_index
    (34) index -> . ID func_constantID func_index

    NUMBERCTE       shift and go to state 131
    ID              shift and go to state 132

    index                          shift and go to state 130

state 99

    (27) cte -> ID func_constantID .

    MULT            reduce using rule 27 (cte -> ID func_constantID .)
    DIV             reduce using rule 27 (cte -> ID func_constantID .)
    PLUS            reduce using rule 27 (cte -> ID func_constantID .)
    MINUS           reduce using rule 27 (cte -> ID func_constantID .)
    COMA            reduce using rule 27 (cte -> ID func_constantID .)
    CLOSECURL       reduce using rule 27 (cte -> ID func_constantID .)
    RELOP           reduce using rule 27 (cte -> ID func_constantID .)
    AND             reduce using rule 27 (cte -> ID func_constantID .)
    OR              reduce using rule 27 (cte -> ID func_constantID .)
    READ            reduce using rule 27 (cte -> ID func_constantID .)
    WRITE           reduce using rule 27 (cte -> ID func_constantID .)
    SET             reduce using rule 27 (cte -> ID func_constantID .)
    NOT             reduce using rule 27 (cte -> ID func_constantID .)
    IF              reduce using rule 27 (cte -> ID func_constantID .)
    WHILE           reduce using rule 27 (cte -> ID func_constantID .)
    DO              reduce using rule 27 (cte -> ID func_constantID .)
    CALL            reduce using rule 27 (cte -> ID func_constantID .)
    RETURN          reduce using rule 27 (cte -> ID func_constantID .)
    OPENPAREN       reduce using rule 27 (cte -> ID func_constantID .)
    ID              reduce using rule 27 (cte -> ID func_constantID .)
    BOOLCTE         reduce using rule 27 (cte -> ID func_constantID .)
    NUMBERCTE       reduce using rule 27 (cte -> ID func_constantID .)
    WORDCTE         reduce using rule 27 (cte -> ID func_constantID .)
    SENTENCECTE     reduce using rule 27 (cte -> ID func_constantID .)
    ENDSTMT         reduce using rule 27 (cte -> ID func_constantID .)
    CLOSEPAREN      reduce using rule 27 (cte -> ID func_constantID .)
    CLOSEBRAC       reduce using rule 27 (cte -> ID func_constantID .)


state 100

    (53) exp -> term PLUS . func_term_operation exp func_term
    (115) func_term_operation -> .

    OPENPAREN       reduce using rule 115 (func_term_operation -> .)
    ID              reduce using rule 115 (func_term_operation -> .)
    BOOLCTE         reduce using rule 115 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 115 (func_term_operation -> .)
    WORDCTE         reduce using rule 115 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 115 (func_term_operation -> .)

    func_term_operation            shift and go to state 133

state 101

    (54) exp -> term MINUS . func_term_operation exp func_term
    (115) func_term_operation -> .

    OPENPAREN       reduce using rule 115 (func_term_operation -> .)
    ID              reduce using rule 115 (func_term_operation -> .)
    BOOLCTE         reduce using rule 115 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 115 (func_term_operation -> .)
    WORDCTE         reduce using rule 115 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 115 (func_term_operation -> .)

    func_term_operation            shift and go to state 134

state 102

    (62) cycle -> WHILE func_while . OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile

    OPENPAREN       shift and go to state 135


state 103

    (74) callfunction -> CALL ID . DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> CALL ID . func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (132) func_callFunc -> .

    DOT             shift and go to state 136
    OPENPAREN       reduce using rule 132 (func_callFunc -> .)

    func_callFunc                  shift and go to state 137

state 104

    (51) relopexpression -> exp func_relop . RELOP func_relop_operation exp func_relop

    RELOP           shift and go to state 138


state 105

    (6) blockaux -> action blockaux .

    CLOSECURL       reduce using rule 6 (blockaux -> action blockaux .)


state 106

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 2 (start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END func_end .)


state 107

    (68) parameter -> type . ID func_declare_par parameteraux
    (69) parameter -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux

    ID              shift and go to state 139


state 108

    (70) parameter -> empty .

    CLOSEPAREN      reduce using rule 70 (parameter -> empty .)


state 109

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL blockaux CLOSECURL

    CLOSEPAREN      shift and go to state 140


state 110

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END . func_end
    (138) func_end -> .

    $end            reduce using rule 138 (func_end -> .)

    func_end                       shift and go to state 141

state 111

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array declareaux
    (96) func_declare_array -> .

    ENDSTMT         reduce using rule 96 (func_declare_array -> .)
    COMA            reduce using rule 96 (func_declare_array -> .)

    func_declare_array             shift and go to state 142

state 112

    (30) cte -> NUMBERCTE func_numberCte func_constant .

    MULT            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    DIV             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    PLUS            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    MINUS           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    COMA            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSECURL       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    RELOP           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    AND             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    OR              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    READ            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WRITE           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    SET             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    NOT             reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    IF              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WHILE           reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    DO              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CALL            reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    RETURN          reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    OPENPAREN       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    ID              reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    BOOLCTE         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    NUMBERCTE       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    WORDCTE         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    SENTENCECTE     reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    ENDSTMT         reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEPAREN      reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)
    CLOSEBRAC       reduce using rule 30 (cte -> NUMBERCTE func_numberCte func_constant .)


state 113

    (63) cycle -> DO func_do block . WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    WHILE           shift and go to state 143


state 114

    (31) cte -> WORDCTE func_wordCte func_constant .

    MULT            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    DIV             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    PLUS            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    MINUS           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    COMA            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSECURL       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    RELOP           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    AND             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    OR              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    READ            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WRITE           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    SET             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    NOT             reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    IF              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WHILE           reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    DO              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CALL            reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    RETURN          reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    OPENPAREN       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    ID              reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    BOOLCTE         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    NUMBERCTE       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    WORDCTE         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    SENTENCECTE     reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    ENDSTMT         reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEPAREN      reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)
    CLOSEBRAC       reduce using rule 31 (cte -> WORDCTE func_wordCte func_constant .)


state 115

    (29) cte -> BOOLCTE func_boolCte func_constant .

    MULT            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    DIV             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    PLUS            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    MINUS           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    COMA            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSECURL       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    RELOP           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    AND             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    OR              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    READ            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WRITE           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    SET             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    NOT             reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    IF              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WHILE           reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    DO              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CALL            reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    RETURN          reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    OPENPAREN       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    ID              reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    BOOLCTE         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    NUMBERCTE       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    WORDCTE         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    SENTENCECTE     reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    ENDSTMT         reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEPAREN      reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)
    CLOSEBRAC       reduce using rule 29 (cte -> BOOLCTE func_boolCte func_constant .)


state 116

    (11) input -> READ OPENPAREN ID . func_read CLOSEPAREN ENDSTMT
    (109) func_read -> .

    CLOSEPAREN      reduce using rule 109 (func_read -> .)

    func_read                      shift and go to state 144

state 117

    (32) cte -> SENTENCECTE func_sentenceCte func_constant .

    MULT            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DIV             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    PLUS            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    MINUS           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    COMA            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSECURL       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RELOP           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    AND             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OR              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    READ            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WRITE           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SET             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NOT             reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    IF              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WHILE           reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    DO              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CALL            reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    RETURN          reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    OPENPAREN       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ID              reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    BOOLCTE         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    NUMBERCTE       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    WORDCTE         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    SENTENCECTE     reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    ENDSTMT         reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEPAREN      reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)
    CLOSEBRAC       reduce using rule 32 (cte -> SENTENCECTE func_sentenceCte func_constant .)


state 118

    (73) returnaux -> RETURN expression func_return . ENDSTMT

    ENDSTMT         shift and go to state 145


state 119

    (58) factor -> OPENPAREN expression CLOSEPAREN .

    MULT            reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    DIV             reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    PLUS            reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    MINUS           reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    RELOP           reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    AND             reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    OR              reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    READ            reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    WRITE           reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    SET             reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    NOT             reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    WHILE           reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    DO              reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    CALL            reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    RETURN          reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    ID              reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    BOOLCTE         reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    NUMBERCTE       reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    WORDCTE         reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    SENTENCECTE     reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSECURL       reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    ENDSTMT         reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)
    COMA            reduce using rule 58 (factor -> OPENPAREN expression CLOSEPAREN .)


state 120

    (21) assign -> SET ID OPENBRAC . index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (33) index -> . NUMBERCTE func_numberCte func_constant func_index
    (34) index -> . ID func_constantID func_index

    NUMBERCTE       shift and go to state 131
    ID              shift and go to state 132

    index                          shift and go to state 146

state 121

    (20) assign -> SET ID func_constantID . EQUAL func_assign assignaux

    EQUAL           shift and go to state 147


state 122

    (60) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block func_endIf
    (61) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block ELSE func_else block func_endElse

    CLOSEPAREN      shift and go to state 148


state 123

    (57) term -> factor DIV func_factor_operation . term func_factor
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 149
    cte                            shift and go to state 69
    factor                         shift and go to state 59

state 124

    (56) term -> factor MULT func_factor_operation . term func_factor
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 150
    cte                            shift and go to state 69
    factor                         shift and go to state 59

state 125

    (12) output -> WRITE OPENPAREN outputaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 151


state 126

    (13) outputaux -> expression . func_print
    (14) outputaux -> expression . func_print COMA outputaux
    (110) func_print -> .

    COMA            reduce using rule 110 (func_print -> .)
    CLOSEPAREN      reduce using rule 110 (func_print -> .)

    func_print                     shift and go to state 152

state 127

    (46) expression -> NOT func_logicOp_operation logexpression . func_logicOP
    (122) func_logicOP -> .

    READ            reduce using rule 122 (func_logicOP -> .)
    WRITE           reduce using rule 122 (func_logicOP -> .)
    SET             reduce using rule 122 (func_logicOP -> .)
    NOT             reduce using rule 122 (func_logicOP -> .)
    IF              reduce using rule 122 (func_logicOP -> .)
    WHILE           reduce using rule 122 (func_logicOP -> .)
    DO              reduce using rule 122 (func_logicOP -> .)
    CALL            reduce using rule 122 (func_logicOP -> .)
    RETURN          reduce using rule 122 (func_logicOP -> .)
    OPENPAREN       reduce using rule 122 (func_logicOP -> .)
    ID              reduce using rule 122 (func_logicOP -> .)
    BOOLCTE         reduce using rule 122 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 122 (func_logicOP -> .)
    WORDCTE         reduce using rule 122 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 122 (func_logicOP -> .)
    CLOSECURL       reduce using rule 122 (func_logicOP -> .)
    ENDSTMT         reduce using rule 122 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 122 (func_logicOP -> .)
    COMA            reduce using rule 122 (func_logicOP -> .)

    func_logicOP                   shift and go to state 153

state 128

    (48) logexpression -> relopexpression AND func_logicOp_operation . logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 154
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 129

    (49) logexpression -> relopexpression OR func_logicOp_operation . logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 155
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71

state 130

    (28) cte -> ID OPENBRAC index . CLOSEBRAC func_constantIDArray

    CLOSEBRAC       shift and go to state 156


state 131

    (33) index -> NUMBERCTE . func_numberCte func_constant func_index
    (105) func_numberCte -> .

    CLOSEBRAC       reduce using rule 105 (func_numberCte -> .)

    func_numberCte                 shift and go to state 157

state 132

    (34) index -> ID . func_constantID func_index
    (102) func_constantID -> .

    CLOSEBRAC       reduce using rule 102 (func_constantID -> .)

    func_constantID                shift and go to state 158

state 133

    (53) exp -> term PLUS func_term_operation . exp func_term
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 159
    factor                         shift and go to state 59

state 134

    (54) exp -> term MINUS func_term_operation . exp func_term
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 160
    factor                         shift and go to state 59

state 135

    (62) cycle -> WHILE func_while OPENPAREN . expression CLOSEPAREN func_whileExp block func_endWhile
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 161

state 136

    (74) callfunction -> CALL ID DOT . special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (79) special -> . LENGTH func_special
    (80) special -> . FREQUENCY func_special
    (81) special -> . SEARCH func_special
    (82) special -> . EXISTS func_special
    (83) special -> . MEAN func_special
    (84) special -> . MEDIAN func_special
    (85) special -> . MODE func_special
    (86) special -> . WORDCOUNT func_special
    (87) special -> . TOKENIZE func_special
    (88) special -> . REMOVE func_special
    (89) special -> . SORTWORDS func_special
    (90) special -> . SORTNUMBERS func_special
    (91) special -> . SIZE func_special

    LENGTH          shift and go to state 173
    FREQUENCY       shift and go to state 174
    SEARCH          shift and go to state 163
    EXISTS          shift and go to state 168
    MEAN            shift and go to state 167
    MEDIAN          shift and go to state 162
    MODE            shift and go to state 165
    WORDCOUNT       shift and go to state 164
    TOKENIZE        shift and go to state 166
    REMOVE          shift and go to state 172
    SORTWORDS       shift and go to state 169
    SORTNUMBERS     shift and go to state 175
    SIZE            shift and go to state 171

    special                        shift and go to state 170

state 137

    (75) callfunction -> CALL ID func_callFunc . OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    OPENPAREN       shift and go to state 176


state 138

    (51) relopexpression -> exp func_relop RELOP . func_relop_operation exp func_relop
    (119) func_relop_operation -> .

    OPENPAREN       reduce using rule 119 (func_relop_operation -> .)
    ID              reduce using rule 119 (func_relop_operation -> .)
    BOOLCTE         reduce using rule 119 (func_relop_operation -> .)
    NUMBERCTE       reduce using rule 119 (func_relop_operation -> .)
    WORDCTE         reduce using rule 119 (func_relop_operation -> .)
    SENTENCECTE     reduce using rule 119 (func_relop_operation -> .)

    func_relop_operation           shift and go to state 177

state 139

    (68) parameter -> type ID . func_declare_par parameteraux
    (69) parameter -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (97) func_declare_par -> .

    OPENBRAC        shift and go to state 179
    COMA            reduce using rule 97 (func_declare_par -> .)
    CLOSEPAREN      reduce using rule 97 (func_declare_par -> .)

    func_declare_par               shift and go to state 178

state 140

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 180


state 141

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .

    $end            reduce using rule 1 (start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END func_end .)


state 142

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 40
    COMA            shift and go to state 41

    declareaux                     shift and go to state 181

state 143

    (63) cycle -> DO func_do block WHILE . OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    OPENPAREN       shift and go to state 182


state 144

    (11) input -> READ OPENPAREN ID func_read . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 183


state 145

    (73) returnaux -> RETURN expression func_return ENDSTMT .

    READ            reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    WRITE           reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    SET             reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    NOT             reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    IF              reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    WHILE           reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    DO              reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    CALL            reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    RETURN          reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    OPENPAREN       reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    ID              reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    BOOLCTE         reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    NUMBERCTE       reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    WORDCTE         reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    SENTENCECTE     reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)
    CLOSECURL       reduce using rule 73 (returnaux -> RETURN expression func_return ENDSTMT .)


state 146

    (21) assign -> SET ID OPENBRAC index . CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux

    CLOSEBRAC       shift and go to state 184


state 147

    (20) assign -> SET ID func_constantID EQUAL . func_assign assignaux
    (111) func_assign -> .

    OPENCURL        reduce using rule 111 (func_assign -> .)
    CALL            reduce using rule 111 (func_assign -> .)
    OPENPAREN       reduce using rule 111 (func_assign -> .)
    ID              reduce using rule 111 (func_assign -> .)
    BOOLCTE         reduce using rule 111 (func_assign -> .)
    NUMBERCTE       reduce using rule 111 (func_assign -> .)
    WORDCTE         reduce using rule 111 (func_assign -> .)
    SENTENCECTE     reduce using rule 111 (func_assign -> .)

    func_assign                    shift and go to state 185

state 148

    (60) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block func_endIf
    (61) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block ELSE func_else block func_endElse
    (123) func_if -> .

    OPENCURL        reduce using rule 123 (func_if -> .)

    func_if                        shift and go to state 186

state 149

    (57) term -> factor DIV func_factor_operation term . func_factor
    (118) func_factor -> .

    PLUS            reduce using rule 118 (func_factor -> .)
    MINUS           reduce using rule 118 (func_factor -> .)
    RELOP           reduce using rule 118 (func_factor -> .)
    AND             reduce using rule 118 (func_factor -> .)
    OR              reduce using rule 118 (func_factor -> .)
    READ            reduce using rule 118 (func_factor -> .)
    WRITE           reduce using rule 118 (func_factor -> .)
    SET             reduce using rule 118 (func_factor -> .)
    NOT             reduce using rule 118 (func_factor -> .)
    IF              reduce using rule 118 (func_factor -> .)
    WHILE           reduce using rule 118 (func_factor -> .)
    DO              reduce using rule 118 (func_factor -> .)
    CALL            reduce using rule 118 (func_factor -> .)
    RETURN          reduce using rule 118 (func_factor -> .)
    OPENPAREN       reduce using rule 118 (func_factor -> .)
    ID              reduce using rule 118 (func_factor -> .)
    BOOLCTE         reduce using rule 118 (func_factor -> .)
    NUMBERCTE       reduce using rule 118 (func_factor -> .)
    WORDCTE         reduce using rule 118 (func_factor -> .)
    SENTENCECTE     reduce using rule 118 (func_factor -> .)
    CLOSECURL       reduce using rule 118 (func_factor -> .)
    ENDSTMT         reduce using rule 118 (func_factor -> .)
    CLOSEPAREN      reduce using rule 118 (func_factor -> .)
    COMA            reduce using rule 118 (func_factor -> .)

    func_factor                    shift and go to state 187

state 150

    (56) term -> factor MULT func_factor_operation term . func_factor
    (118) func_factor -> .

    PLUS            reduce using rule 118 (func_factor -> .)
    MINUS           reduce using rule 118 (func_factor -> .)
    RELOP           reduce using rule 118 (func_factor -> .)
    AND             reduce using rule 118 (func_factor -> .)
    OR              reduce using rule 118 (func_factor -> .)
    READ            reduce using rule 118 (func_factor -> .)
    WRITE           reduce using rule 118 (func_factor -> .)
    SET             reduce using rule 118 (func_factor -> .)
    NOT             reduce using rule 118 (func_factor -> .)
    IF              reduce using rule 118 (func_factor -> .)
    WHILE           reduce using rule 118 (func_factor -> .)
    DO              reduce using rule 118 (func_factor -> .)
    CALL            reduce using rule 118 (func_factor -> .)
    RETURN          reduce using rule 118 (func_factor -> .)
    OPENPAREN       reduce using rule 118 (func_factor -> .)
    ID              reduce using rule 118 (func_factor -> .)
    BOOLCTE         reduce using rule 118 (func_factor -> .)
    NUMBERCTE       reduce using rule 118 (func_factor -> .)
    WORDCTE         reduce using rule 118 (func_factor -> .)
    SENTENCECTE     reduce using rule 118 (func_factor -> .)
    CLOSECURL       reduce using rule 118 (func_factor -> .)
    ENDSTMT         reduce using rule 118 (func_factor -> .)
    CLOSEPAREN      reduce using rule 118 (func_factor -> .)
    COMA            reduce using rule 118 (func_factor -> .)

    func_factor                    shift and go to state 188

state 151

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 189


state 152

    (13) outputaux -> expression func_print .
    (14) outputaux -> expression func_print . COMA outputaux

    CLOSEPAREN      reduce using rule 13 (outputaux -> expression func_print .)
    COMA            shift and go to state 190


state 153

    (46) expression -> NOT func_logicOp_operation logexpression func_logicOP .

    COMA            reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    READ            reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 46 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)


state 154

    (48) logexpression -> relopexpression AND func_logicOp_operation logexpression . func_logicOP
    (122) func_logicOP -> .

    READ            reduce using rule 122 (func_logicOP -> .)
    WRITE           reduce using rule 122 (func_logicOP -> .)
    SET             reduce using rule 122 (func_logicOP -> .)
    NOT             reduce using rule 122 (func_logicOP -> .)
    IF              reduce using rule 122 (func_logicOP -> .)
    WHILE           reduce using rule 122 (func_logicOP -> .)
    DO              reduce using rule 122 (func_logicOP -> .)
    CALL            reduce using rule 122 (func_logicOP -> .)
    RETURN          reduce using rule 122 (func_logicOP -> .)
    OPENPAREN       reduce using rule 122 (func_logicOP -> .)
    ID              reduce using rule 122 (func_logicOP -> .)
    BOOLCTE         reduce using rule 122 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 122 (func_logicOP -> .)
    WORDCTE         reduce using rule 122 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 122 (func_logicOP -> .)
    CLOSECURL       reduce using rule 122 (func_logicOP -> .)
    ENDSTMT         reduce using rule 122 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 122 (func_logicOP -> .)
    COMA            reduce using rule 122 (func_logicOP -> .)

    func_logicOP                   shift and go to state 191

state 155

    (49) logexpression -> relopexpression OR func_logicOp_operation logexpression . func_logicOP
    (122) func_logicOP -> .

    READ            reduce using rule 122 (func_logicOP -> .)
    WRITE           reduce using rule 122 (func_logicOP -> .)
    SET             reduce using rule 122 (func_logicOP -> .)
    NOT             reduce using rule 122 (func_logicOP -> .)
    IF              reduce using rule 122 (func_logicOP -> .)
    WHILE           reduce using rule 122 (func_logicOP -> .)
    DO              reduce using rule 122 (func_logicOP -> .)
    CALL            reduce using rule 122 (func_logicOP -> .)
    RETURN          reduce using rule 122 (func_logicOP -> .)
    OPENPAREN       reduce using rule 122 (func_logicOP -> .)
    ID              reduce using rule 122 (func_logicOP -> .)
    BOOLCTE         reduce using rule 122 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 122 (func_logicOP -> .)
    WORDCTE         reduce using rule 122 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 122 (func_logicOP -> .)
    CLOSECURL       reduce using rule 122 (func_logicOP -> .)
    ENDSTMT         reduce using rule 122 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 122 (func_logicOP -> .)
    COMA            reduce using rule 122 (func_logicOP -> .)

    func_logicOP                   shift and go to state 192

state 156

    (28) cte -> ID OPENBRAC index CLOSEBRAC . func_constantIDArray
    (103) func_constantIDArray -> .

    MULT            reduce using rule 103 (func_constantIDArray -> .)
    DIV             reduce using rule 103 (func_constantIDArray -> .)
    PLUS            reduce using rule 103 (func_constantIDArray -> .)
    MINUS           reduce using rule 103 (func_constantIDArray -> .)
    RELOP           reduce using rule 103 (func_constantIDArray -> .)
    AND             reduce using rule 103 (func_constantIDArray -> .)
    OR              reduce using rule 103 (func_constantIDArray -> .)
    READ            reduce using rule 103 (func_constantIDArray -> .)
    WRITE           reduce using rule 103 (func_constantIDArray -> .)
    SET             reduce using rule 103 (func_constantIDArray -> .)
    NOT             reduce using rule 103 (func_constantIDArray -> .)
    IF              reduce using rule 103 (func_constantIDArray -> .)
    WHILE           reduce using rule 103 (func_constantIDArray -> .)
    DO              reduce using rule 103 (func_constantIDArray -> .)
    CALL            reduce using rule 103 (func_constantIDArray -> .)
    RETURN          reduce using rule 103 (func_constantIDArray -> .)
    OPENPAREN       reduce using rule 103 (func_constantIDArray -> .)
    ID              reduce using rule 103 (func_constantIDArray -> .)
    BOOLCTE         reduce using rule 103 (func_constantIDArray -> .)
    NUMBERCTE       reduce using rule 103 (func_constantIDArray -> .)
    WORDCTE         reduce using rule 103 (func_constantIDArray -> .)
    SENTENCECTE     reduce using rule 103 (func_constantIDArray -> .)
    CLOSECURL       reduce using rule 103 (func_constantIDArray -> .)
    CLOSEBRAC       reduce using rule 103 (func_constantIDArray -> .)
    ENDSTMT         reduce using rule 103 (func_constantIDArray -> .)
    CLOSEPAREN      reduce using rule 103 (func_constantIDArray -> .)
    COMA            reduce using rule 103 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 193

state 157

    (33) index -> NUMBERCTE func_numberCte . func_constant func_index
    (101) func_constant -> .

    CLOSEBRAC       reduce using rule 101 (func_constant -> .)

    func_constant                  shift and go to state 194

state 158

    (34) index -> ID func_constantID . func_index
    (100) func_index -> .

    CLOSEBRAC       reduce using rule 100 (func_index -> .)

    func_index                     shift and go to state 195

state 159

    (53) exp -> term PLUS func_term_operation exp . func_term
    (116) func_term -> .

    RELOP           reduce using rule 116 (func_term -> .)
    AND             reduce using rule 116 (func_term -> .)
    OR              reduce using rule 116 (func_term -> .)
    READ            reduce using rule 116 (func_term -> .)
    WRITE           reduce using rule 116 (func_term -> .)
    SET             reduce using rule 116 (func_term -> .)
    NOT             reduce using rule 116 (func_term -> .)
    IF              reduce using rule 116 (func_term -> .)
    WHILE           reduce using rule 116 (func_term -> .)
    DO              reduce using rule 116 (func_term -> .)
    CALL            reduce using rule 116 (func_term -> .)
    RETURN          reduce using rule 116 (func_term -> .)
    OPENPAREN       reduce using rule 116 (func_term -> .)
    ID              reduce using rule 116 (func_term -> .)
    BOOLCTE         reduce using rule 116 (func_term -> .)
    NUMBERCTE       reduce using rule 116 (func_term -> .)
    WORDCTE         reduce using rule 116 (func_term -> .)
    SENTENCECTE     reduce using rule 116 (func_term -> .)
    CLOSECURL       reduce using rule 116 (func_term -> .)
    ENDSTMT         reduce using rule 116 (func_term -> .)
    CLOSEPAREN      reduce using rule 116 (func_term -> .)
    COMA            reduce using rule 116 (func_term -> .)

    func_term                      shift and go to state 196

state 160

    (54) exp -> term MINUS func_term_operation exp . func_term
    (116) func_term -> .

    RELOP           reduce using rule 116 (func_term -> .)
    AND             reduce using rule 116 (func_term -> .)
    OR              reduce using rule 116 (func_term -> .)
    READ            reduce using rule 116 (func_term -> .)
    WRITE           reduce using rule 116 (func_term -> .)
    SET             reduce using rule 116 (func_term -> .)
    NOT             reduce using rule 116 (func_term -> .)
    IF              reduce using rule 116 (func_term -> .)
    WHILE           reduce using rule 116 (func_term -> .)
    DO              reduce using rule 116 (func_term -> .)
    CALL            reduce using rule 116 (func_term -> .)
    RETURN          reduce using rule 116 (func_term -> .)
    OPENPAREN       reduce using rule 116 (func_term -> .)
    ID              reduce using rule 116 (func_term -> .)
    BOOLCTE         reduce using rule 116 (func_term -> .)
    NUMBERCTE       reduce using rule 116 (func_term -> .)
    WORDCTE         reduce using rule 116 (func_term -> .)
    SENTENCECTE     reduce using rule 116 (func_term -> .)
    CLOSECURL       reduce using rule 116 (func_term -> .)
    ENDSTMT         reduce using rule 116 (func_term -> .)
    CLOSEPAREN      reduce using rule 116 (func_term -> .)
    COMA            reduce using rule 116 (func_term -> .)

    func_term                      shift and go to state 197

state 161

    (62) cycle -> WHILE func_while OPENPAREN expression . CLOSEPAREN func_whileExp block func_endWhile

    CLOSEPAREN      shift and go to state 198


state 162

    (84) special -> MEDIAN . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 199

state 163

    (81) special -> SEARCH . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 200

state 164

    (86) special -> WORDCOUNT . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 201

state 165

    (85) special -> MODE . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 202

state 166

    (87) special -> TOKENIZE . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 203

state 167

    (83) special -> MEAN . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 204

state 168

    (82) special -> EXISTS . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 205

state 169

    (89) special -> SORTWORDS . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 206

state 170

    (74) callfunction -> CALL ID DOT special . OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT

    OPENPAREN       shift and go to state 207


state 171

    (91) special -> SIZE . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 208

state 172

    (88) special -> REMOVE . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 209

state 173

    (79) special -> LENGTH . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 210

state 174

    (80) special -> FREQUENCY . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 211

state 175

    (90) special -> SORTNUMBERS . func_special
    (135) func_special -> .

    OPENPAREN       reduce using rule 135 (func_special -> .)

    func_special                   shift and go to state 212

state 176

    (75) callfunction -> CALL ID func_callFunc OPENPAREN . spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (76) spaux -> . cte func_callFuncParameter
    (77) spaux -> . cte func_callFuncParameter COMA spaux
    (78) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (92) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    spaux                          shift and go to state 213
    cte                            shift and go to state 215
    empty                          shift and go to state 214

state 177

    (51) relopexpression -> exp func_relop RELOP func_relop_operation . exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 216
    factor                         shift and go to state 59

state 178

    (68) parameter -> type ID func_declare_par . parameteraux
    (71) parameteraux -> . COMA parameter
    (72) parameteraux -> . empty
    (92) empty -> .

    COMA            shift and go to state 217
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    empty                          shift and go to state 219
    parameteraux                   shift and go to state 218

state 179

    (69) parameter -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (94) func_isSize -> .

    ID              reduce using rule 94 (func_isSize -> .)
    BOOLCTE         reduce using rule 94 (func_isSize -> .)
    NUMBERCTE       reduce using rule 94 (func_isSize -> .)
    WORDCTE         reduce using rule 94 (func_isSize -> .)
    SENTENCECTE     reduce using rule 94 (func_isSize -> .)

    func_isSize                    shift and go to state 220

state 180

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . declare blockaux CLOSECURL
    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . blockaux CLOSECURL
    (15) declare -> . DEC decaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (92) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (39) statement -> . assign
    (40) statement -> . expression
    (41) statement -> . condition
    (42) statement -> . cycle
    (43) statement -> . callfunction
    (44) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (60) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (61) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (62) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (63) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (73) returnaux -> . RETURN expression func_return ENDSTMT
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    DEC             shift and go to state 6
    CLOSECURL       reduce using rule 92 (empty -> .)
    READ            shift and go to state 47
    WRITE           shift and go to state 61
    SET             shift and go to state 51
    NOT             shift and go to state 62
    IF              shift and go to state 56
    WHILE           shift and go to state 68
    DO              shift and go to state 44
    CALL            shift and go to state 70
    RETURN          shift and go to state 49
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    returnaux                      shift and go to state 52
    callfunction                   shift and go to state 53
    statement                      shift and go to state 54
    input                          shift and go to state 55
    blockaux                       shift and go to state 221
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    expression                     shift and go to state 74
    declare                        shift and go to state 222
    cte                            shift and go to state 69
    empty                          shift and go to state 57
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    assign                         shift and go to state 75

state 181

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .

    FUNC            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BEGIN           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    READ            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WRITE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SET             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NOT             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    IF              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WHILE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    DO              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CALL            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    RETURN          reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    OPENPAREN       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ID              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BOOLCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NUMBERCTE       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WORDCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SENTENCECTE     reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CLOSECURL       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)


state 182

    (63) cycle -> DO func_do block WHILE OPENPAREN . expression CLOSEPAREN func_endDoWhile ENDSTMT
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 223

state 183

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 224


state 184

    (21) assign -> SET ID OPENBRAC index CLOSEBRAC . func_constantIDArray EQUAL func_assign assignaux
    (103) func_constantIDArray -> .

    EQUAL           reduce using rule 103 (func_constantIDArray -> .)

    func_constantIDArray           shift and go to state 225

state 185

    (20) assign -> SET ID func_constantID EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (24) assignaux -> . callfunction func_assign_value
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 226
    CALL            shift and go to state 70
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    callfunction                   shift and go to state 227
    factor                         shift and go to state 59
    assignaux                      shift and go to state 228
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 229

state 186

    (60) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block func_endIf
    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block ELSE func_else block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 230

state 187

    (57) term -> factor DIV func_factor_operation term func_factor .

    PLUS            reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    MINUS           reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    AND             reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    OR              reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    READ            reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    WRITE           reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    SET             reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    NOT             reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    IF              reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    WHILE           reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    DO              reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    CALL            reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    RETURN          reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    ID              reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    COMA            reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)
    RELOP           reduce using rule 57 (term -> factor DIV func_factor_operation term func_factor .)


state 188

    (56) term -> factor MULT func_factor_operation term func_factor .

    PLUS            reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    MINUS           reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    AND             reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    OR              reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    READ            reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    WRITE           reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    SET             reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    NOT             reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    IF              reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    WHILE           reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    DO              reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    CALL            reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    RETURN          reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    ID              reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    COMA            reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)
    RELOP           reduce using rule 56 (term -> factor MULT func_factor_operation term func_factor .)


state 189

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)


state 190

    (14) outputaux -> expression func_print COMA . outputaux
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    NOT             shift and go to state 62
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    outputaux                      shift and go to state 231
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 71
    expression                     shift and go to state 126

state 191

    (48) logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 48 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)


state 192

    (49) logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SET             reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 49 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)


state 193

    (28) cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .

    MULT            reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    DIV             reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    PLUS            reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    MINUS           reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    COMA            reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    CLOSECURL       reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    RELOP           reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    AND             reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    OR              reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    READ            reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    WRITE           reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    SET             reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    NOT             reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    IF              reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    WHILE           reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    DO              reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    CALL            reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    RETURN          reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    OPENPAREN       reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    ID              reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    BOOLCTE         reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    NUMBERCTE       reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    WORDCTE         reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    SENTENCECTE     reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    ENDSTMT         reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    CLOSEPAREN      reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)
    CLOSEBRAC       reduce using rule 28 (cte -> ID OPENBRAC index CLOSEBRAC func_constantIDArray .)


state 194

    (33) index -> NUMBERCTE func_numberCte func_constant . func_index
    (100) func_index -> .

    CLOSEBRAC       reduce using rule 100 (func_index -> .)

    func_index                     shift and go to state 232

state 195

    (34) index -> ID func_constantID func_index .

    CLOSEBRAC       reduce using rule 34 (index -> ID func_constantID func_index .)


state 196

    (53) exp -> term PLUS func_term_operation exp func_term .

    RELOP           reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    AND             reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    OR              reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    READ            reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    WRITE           reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    SET             reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    NOT             reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    IF              reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    WHILE           reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    DO              reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    CALL            reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    RETURN          reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    ID              reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)
    COMA            reduce using rule 53 (exp -> term PLUS func_term_operation exp func_term .)


state 197

    (54) exp -> term MINUS func_term_operation exp func_term .

    RELOP           reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    AND             reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    OR              reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    READ            reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    WRITE           reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    SET             reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    NOT             reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    IF              reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    WHILE           reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    DO              reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    CALL            reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    RETURN          reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    ID              reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)
    COMA            reduce using rule 54 (exp -> term MINUS func_term_operation exp func_term .)


state 198

    (62) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN . func_whileExp block func_endWhile
    (130) func_whileExp -> .

    OPENCURL        reduce using rule 130 (func_whileExp -> .)

    func_whileExp                  shift and go to state 233

state 199

    (84) special -> MEDIAN func_special .

    OPENPAREN       reduce using rule 84 (special -> MEDIAN func_special .)


state 200

    (81) special -> SEARCH func_special .

    OPENPAREN       reduce using rule 81 (special -> SEARCH func_special .)


state 201

    (86) special -> WORDCOUNT func_special .

    OPENPAREN       reduce using rule 86 (special -> WORDCOUNT func_special .)


state 202

    (85) special -> MODE func_special .

    OPENPAREN       reduce using rule 85 (special -> MODE func_special .)


state 203

    (87) special -> TOKENIZE func_special .

    OPENPAREN       reduce using rule 87 (special -> TOKENIZE func_special .)


state 204

    (83) special -> MEAN func_special .

    OPENPAREN       reduce using rule 83 (special -> MEAN func_special .)


state 205

    (82) special -> EXISTS func_special .

    OPENPAREN       reduce using rule 82 (special -> EXISTS func_special .)


state 206

    (89) special -> SORTWORDS func_special .

    OPENPAREN       reduce using rule 89 (special -> SORTWORDS func_special .)


state 207

    (74) callfunction -> CALL ID DOT special OPENPAREN . spaux CLOSEPAREN func_callSpecial ENDSTMT
    (76) spaux -> . cte func_callFuncParameter
    (77) spaux -> . cte func_callFuncParameter COMA spaux
    (78) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (92) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    spaux                          shift and go to state 234
    cte                            shift and go to state 215
    empty                          shift and go to state 214

state 208

    (91) special -> SIZE func_special .

    OPENPAREN       reduce using rule 91 (special -> SIZE func_special .)


state 209

    (88) special -> REMOVE func_special .

    OPENPAREN       reduce using rule 88 (special -> REMOVE func_special .)


state 210

    (79) special -> LENGTH func_special .

    OPENPAREN       reduce using rule 79 (special -> LENGTH func_special .)


state 211

    (80) special -> FREQUENCY func_special .

    OPENPAREN       reduce using rule 80 (special -> FREQUENCY func_special .)


state 212

    (90) special -> SORTNUMBERS func_special .

    OPENPAREN       reduce using rule 90 (special -> SORTNUMBERS func_special .)


state 213

    (75) callfunction -> CALL ID func_callFunc OPENPAREN spaux . CLOSEPAREN func_endCallFunction ENDSTMT

    CLOSEPAREN      shift and go to state 235


state 214

    (78) spaux -> empty .

    CLOSEPAREN      reduce using rule 78 (spaux -> empty .)


state 215

    (76) spaux -> cte . func_callFuncParameter
    (77) spaux -> cte . func_callFuncParameter COMA spaux
    (133) func_callFuncParameter -> .

    COMA            reduce using rule 133 (func_callFuncParameter -> .)
    CLOSEPAREN      reduce using rule 133 (func_callFuncParameter -> .)

    func_callFuncParameter         shift and go to state 236

state 216

    (51) relopexpression -> exp func_relop RELOP func_relop_operation exp . func_relop
    (120) func_relop -> .

    AND             reduce using rule 120 (func_relop -> .)
    OR              reduce using rule 120 (func_relop -> .)
    READ            reduce using rule 120 (func_relop -> .)
    WRITE           reduce using rule 120 (func_relop -> .)
    SET             reduce using rule 120 (func_relop -> .)
    NOT             reduce using rule 120 (func_relop -> .)
    IF              reduce using rule 120 (func_relop -> .)
    WHILE           reduce using rule 120 (func_relop -> .)
    DO              reduce using rule 120 (func_relop -> .)
    CALL            reduce using rule 120 (func_relop -> .)
    RETURN          reduce using rule 120 (func_relop -> .)
    OPENPAREN       reduce using rule 120 (func_relop -> .)
    ID              reduce using rule 120 (func_relop -> .)
    BOOLCTE         reduce using rule 120 (func_relop -> .)
    NUMBERCTE       reduce using rule 120 (func_relop -> .)
    WORDCTE         reduce using rule 120 (func_relop -> .)
    SENTENCECTE     reduce using rule 120 (func_relop -> .)
    CLOSECURL       reduce using rule 120 (func_relop -> .)
    ENDSTMT         reduce using rule 120 (func_relop -> .)
    CLOSEPAREN      reduce using rule 120 (func_relop -> .)
    COMA            reduce using rule 120 (func_relop -> .)

    func_relop                     shift and go to state 237

state 217

    (71) parameteraux -> COMA . parameter
    (68) parameter -> . type ID func_declare_par parameteraux
    (69) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (70) parameter -> . empty
    (35) type -> . BOOL func_type
    (36) type -> . NUMBER func_type
    (37) type -> . WORD func_type
    (38) type -> . SENTENCE func_type
    (92) empty -> .

    BOOL            shift and go to state 14
    NUMBER          shift and go to state 13
    WORD            shift and go to state 16
    SENTENCE        shift and go to state 12
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    parameter                      shift and go to state 238
    type                           shift and go to state 107
    empty                          shift and go to state 108

state 218

    (68) parameter -> type ID func_declare_par parameteraux .

    CLOSEPAREN      reduce using rule 68 (parameter -> type ID func_declare_par parameteraux .)


state 219

    (72) parameteraux -> empty .

    CLOSEPAREN      reduce using rule 72 (parameteraux -> empty .)


state 220

    (69) parameter -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array parameteraux
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    cte                            shift and go to state 239

state 221

    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 240


state 222

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (92) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (39) statement -> . assign
    (40) statement -> . expression
    (41) statement -> . condition
    (42) statement -> . cycle
    (43) statement -> . callfunction
    (44) statement -> . returnaux
    (20) assign -> . SET ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux
    (45) expression -> . logexpression
    (46) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (60) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (61) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (62) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (63) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (73) returnaux -> . RETURN expression func_return ENDSTMT
    (47) logexpression -> . relopexpression
    (48) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (49) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (50) relopexpression -> . exp
    (51) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    CLOSECURL       reduce using rule 92 (empty -> .)
    READ            shift and go to state 47
    WRITE           shift and go to state 61
    SET             shift and go to state 51
    NOT             shift and go to state 62
    IF              shift and go to state 56
    WHILE           shift and go to state 68
    DO              shift and go to state 44
    CALL            shift and go to state 70
    RETURN          shift and go to state 49
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    returnaux                      shift and go to state 52
    callfunction                   shift and go to state 53
    statement                      shift and go to state 54
    input                          shift and go to state 55
    blockaux                       shift and go to state 241
    factor                         shift and go to state 59
    logexpression                  shift and go to state 60
    relopexpression                shift and go to state 63
    condition                      shift and go to state 65
    cycle                          shift and go to state 66
    term                           shift and go to state 67
    expression                     shift and go to state 74
    cte                            shift and go to state 69
    empty                          shift and go to state 57
    exp                            shift and go to state 71
    action                         shift and go to state 72
    output                         shift and go to state 73
    assign                         shift and go to state 75

state 223

    (63) cycle -> DO func_do block WHILE OPENPAREN expression . CLOSEPAREN func_endDoWhile ENDSTMT

    CLOSEPAREN      shift and go to state 242


state 224

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .

    READ            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SET             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)


state 225

    (21) assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray . EQUAL func_assign assignaux

    EQUAL           shift and go to state 243


state 226

    (23) assignaux -> OPENCURL . assiaux CLOSECURL ENDSTMT func_assign_array_end
    (25) assiaux -> . exp func_assign_array
    (26) assiaux -> . exp func_assign_array COMA assiaux
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 67
    assiaux                        shift and go to state 244
    cte                            shift and go to state 69
    exp                            shift and go to state 245
    factor                         shift and go to state 59

state 227

    (24) assignaux -> callfunction . func_assign_value
    (112) func_assign_value -> .

    READ            reduce using rule 112 (func_assign_value -> .)
    WRITE           reduce using rule 112 (func_assign_value -> .)
    SET             reduce using rule 112 (func_assign_value -> .)
    NOT             reduce using rule 112 (func_assign_value -> .)
    IF              reduce using rule 112 (func_assign_value -> .)
    WHILE           reduce using rule 112 (func_assign_value -> .)
    DO              reduce using rule 112 (func_assign_value -> .)
    CALL            reduce using rule 112 (func_assign_value -> .)
    RETURN          reduce using rule 112 (func_assign_value -> .)
    OPENPAREN       reduce using rule 112 (func_assign_value -> .)
    ID              reduce using rule 112 (func_assign_value -> .)
    BOOLCTE         reduce using rule 112 (func_assign_value -> .)
    NUMBERCTE       reduce using rule 112 (func_assign_value -> .)
    WORDCTE         reduce using rule 112 (func_assign_value -> .)
    SENTENCECTE     reduce using rule 112 (func_assign_value -> .)
    CLOSECURL       reduce using rule 112 (func_assign_value -> .)

    func_assign_value              shift and go to state 246

state 228

    (20) assign -> SET ID func_constantID EQUAL func_assign assignaux .

    READ            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WRITE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SET             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NOT             reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    IF              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WHILE           reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    DO              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CALL            reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    RETURN          reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    ID              reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 20 (assign -> SET ID func_constantID EQUAL func_assign assignaux .)


state 229

    (22) assignaux -> exp . func_assign_value ENDSTMT
    (112) func_assign_value -> .

    ENDSTMT         reduce using rule 112 (func_assign_value -> .)

    func_assign_value              shift and go to state 247

state 230

    (60) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . func_endIf
    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . ELSE func_else block func_endElse
    (124) func_endIf -> .

    ELSE            shift and go to state 249
    READ            reduce using rule 124 (func_endIf -> .)
    WRITE           reduce using rule 124 (func_endIf -> .)
    SET             reduce using rule 124 (func_endIf -> .)
    NOT             reduce using rule 124 (func_endIf -> .)
    IF              reduce using rule 124 (func_endIf -> .)
    WHILE           reduce using rule 124 (func_endIf -> .)
    DO              reduce using rule 124 (func_endIf -> .)
    CALL            reduce using rule 124 (func_endIf -> .)
    RETURN          reduce using rule 124 (func_endIf -> .)
    OPENPAREN       reduce using rule 124 (func_endIf -> .)
    ID              reduce using rule 124 (func_endIf -> .)
    BOOLCTE         reduce using rule 124 (func_endIf -> .)
    NUMBERCTE       reduce using rule 124 (func_endIf -> .)
    WORDCTE         reduce using rule 124 (func_endIf -> .)
    SENTENCECTE     reduce using rule 124 (func_endIf -> .)
    CLOSECURL       reduce using rule 124 (func_endIf -> .)

    func_endIf                     shift and go to state 248

state 231

    (14) outputaux -> expression func_print COMA outputaux .

    CLOSEPAREN      reduce using rule 14 (outputaux -> expression func_print COMA outputaux .)


state 232

    (33) index -> NUMBERCTE func_numberCte func_constant func_index .

    CLOSEBRAC       reduce using rule 33 (index -> NUMBERCTE func_numberCte func_constant func_index .)


state 233

    (62) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp . block func_endWhile
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 250

state 234

    (74) callfunction -> CALL ID DOT special OPENPAREN spaux . CLOSEPAREN func_callSpecial ENDSTMT

    CLOSEPAREN      shift and go to state 251


state 235

    (75) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN . func_endCallFunction ENDSTMT
    (134) func_endCallFunction -> .

    ENDSTMT         reduce using rule 134 (func_endCallFunction -> .)

    func_endCallFunction           shift and go to state 252

state 236

    (76) spaux -> cte func_callFuncParameter .
    (77) spaux -> cte func_callFuncParameter . COMA spaux

    CLOSEPAREN      reduce using rule 76 (spaux -> cte func_callFuncParameter .)
    COMA            shift and go to state 253


state 237

    (51) relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .

    AND             reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OR              reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    READ            reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WRITE           reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SET             reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NOT             reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    IF              reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WHILE           reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    DO              reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CALL            reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    RETURN          reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OPENPAREN       reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ID              reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    BOOLCTE         reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NUMBERCTE       reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WORDCTE         reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SENTENCECTE     reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSECURL       reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ENDSTMT         reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSEPAREN      reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    COMA            reduce using rule 51 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)


state 238

    (71) parameteraux -> COMA parameter .

    CLOSEPAREN      reduce using rule 71 (parameteraux -> COMA parameter .)


state 239

    (69) parameter -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array parameteraux

    CLOSEBRAC       shift and go to state 254


state 240

    (65) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .

    FUNC            reduce using rule 65 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .)
    BEGIN           reduce using rule 65 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux CLOSECURL .)


state 241

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux . CLOSECURL

    CLOSECURL       shift and go to state 255


state 242

    (63) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN . func_endDoWhile ENDSTMT
    (128) func_endDoWhile -> .

    ENDSTMT         reduce using rule 128 (func_endDoWhile -> .)

    func_endDoWhile                shift and go to state 256

state 243

    (21) assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL . func_assign assignaux
    (111) func_assign -> .

    OPENCURL        reduce using rule 111 (func_assign -> .)
    CALL            reduce using rule 111 (func_assign -> .)
    OPENPAREN       reduce using rule 111 (func_assign -> .)
    ID              reduce using rule 111 (func_assign -> .)
    BOOLCTE         reduce using rule 111 (func_assign -> .)
    NUMBERCTE       reduce using rule 111 (func_assign -> .)
    WORDCTE         reduce using rule 111 (func_assign -> .)
    SENTENCECTE     reduce using rule 111 (func_assign -> .)

    func_assign                    shift and go to state 257

state 244

    (23) assignaux -> OPENCURL assiaux . CLOSECURL ENDSTMT func_assign_array_end

    CLOSECURL       shift and go to state 258


state 245

    (25) assiaux -> exp . func_assign_array
    (26) assiaux -> exp . func_assign_array COMA assiaux
    (113) func_assign_array -> .

    COMA            reduce using rule 113 (func_assign_array -> .)
    CLOSECURL       reduce using rule 113 (func_assign_array -> .)

    func_assign_array              shift and go to state 259

state 246

    (24) assignaux -> callfunction func_assign_value .

    READ            reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WRITE           reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    SET             reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    NOT             reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    IF              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WHILE           reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    DO              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    CALL            reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    RETURN          reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    OPENPAREN       reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    ID              reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    BOOLCTE         reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    NUMBERCTE       reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    WORDCTE         reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    SENTENCECTE     reduce using rule 24 (assignaux -> callfunction func_assign_value .)
    CLOSECURL       reduce using rule 24 (assignaux -> callfunction func_assign_value .)


state 247

    (22) assignaux -> exp func_assign_value . ENDSTMT

    ENDSTMT         shift and go to state 260


state 248

    (60) condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .

    READ            reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WRITE           reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SET             reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NOT             reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    IF              reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WHILE           reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    DO              reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CALL            reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    RETURN          reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    OPENPAREN       reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ID              reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    BOOLCTE         reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NUMBERCTE       reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WORDCTE         reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SENTENCECTE     reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CLOSECURL       reduce using rule 60 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)


state 249

    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE . func_else block func_endElse
    (125) func_else -> .

    OPENCURL        reduce using rule 125 (func_else -> .)

    func_else                      shift and go to state 261

state 250

    (62) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block . func_endWhile
    (131) func_endWhile -> .

    READ            reduce using rule 131 (func_endWhile -> .)
    WRITE           reduce using rule 131 (func_endWhile -> .)
    SET             reduce using rule 131 (func_endWhile -> .)
    NOT             reduce using rule 131 (func_endWhile -> .)
    IF              reduce using rule 131 (func_endWhile -> .)
    WHILE           reduce using rule 131 (func_endWhile -> .)
    DO              reduce using rule 131 (func_endWhile -> .)
    CALL            reduce using rule 131 (func_endWhile -> .)
    RETURN          reduce using rule 131 (func_endWhile -> .)
    OPENPAREN       reduce using rule 131 (func_endWhile -> .)
    ID              reduce using rule 131 (func_endWhile -> .)
    BOOLCTE         reduce using rule 131 (func_endWhile -> .)
    NUMBERCTE       reduce using rule 131 (func_endWhile -> .)
    WORDCTE         reduce using rule 131 (func_endWhile -> .)
    SENTENCECTE     reduce using rule 131 (func_endWhile -> .)
    CLOSECURL       reduce using rule 131 (func_endWhile -> .)

    func_endWhile                  shift and go to state 262

state 251

    (74) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN . func_callSpecial ENDSTMT
    (136) func_callSpecial -> .

    ENDSTMT         reduce using rule 136 (func_callSpecial -> .)

    func_callSpecial               shift and go to state 263

state 252

    (75) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction . ENDSTMT

    ENDSTMT         shift and go to state 264


state 253

    (77) spaux -> cte func_callFuncParameter COMA . spaux
    (76) spaux -> . cte func_callFuncParameter
    (77) spaux -> . cte func_callFuncParameter COMA spaux
    (78) spaux -> . empty
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant
    (92) empty -> .

    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    spaux                          shift and go to state 265
    cte                            shift and go to state 215
    empty                          shift and go to state 214

state 254

    (69) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array parameteraux
    (96) func_declare_array -> .

    COMA            reduce using rule 96 (func_declare_array -> .)
    CLOSEPAREN      reduce using rule 96 (func_declare_array -> .)

    func_declare_array             shift and go to state 266

state 255

    (64) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .

    FUNC            reduce using rule 64 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .)
    BEGIN           reduce using rule 64 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux CLOSECURL .)


state 256

    (63) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile . ENDSTMT

    ENDSTMT         shift and go to state 267


state 257

    (21) assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end
    (24) assignaux -> . callfunction func_assign_value
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (74) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT
    (75) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENCURL        shift and go to state 226
    CALL            shift and go to state 70
    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    callfunction                   shift and go to state 227
    factor                         shift and go to state 59
    assignaux                      shift and go to state 268
    term                           shift and go to state 67
    cte                            shift and go to state 69
    exp                            shift and go to state 229

state 258

    (23) assignaux -> OPENCURL assiaux CLOSECURL . ENDSTMT func_assign_array_end

    ENDSTMT         shift and go to state 269


state 259

    (25) assiaux -> exp func_assign_array .
    (26) assiaux -> exp func_assign_array . COMA assiaux

    CLOSECURL       reduce using rule 25 (assiaux -> exp func_assign_array .)
    COMA            shift and go to state 270


state 260

    (22) assignaux -> exp func_assign_value ENDSTMT .

    READ            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WRITE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SET             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NOT             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    IF              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WHILE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    DO              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CALL            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    RETURN          reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    OPENPAREN       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ID              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    BOOLCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NUMBERCTE       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WORDCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SENTENCECTE     reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CLOSECURL       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)


state 261

    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else . block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 35

    block                          shift and go to state 271

state 262

    (62) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .

    READ            reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WRITE           reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SET             reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NOT             reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    IF              reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WHILE           reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    DO              reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CALL            reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    RETURN          reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    OPENPAREN       reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ID              reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    BOOLCTE         reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NUMBERCTE       reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WORDCTE         reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SENTENCECTE     reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CLOSECURL       reduce using rule 62 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)


state 263

    (74) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial . ENDSTMT

    ENDSTMT         shift and go to state 272


state 264

    (75) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .

    READ            reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WRITE           reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SET             reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NOT             reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    IF              reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WHILE           reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    DO              reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CALL            reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    RETURN          reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    OPENPAREN       reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ID              reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    BOOLCTE         reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NUMBERCTE       reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WORDCTE         reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SENTENCECTE     reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CLOSECURL       reduce using rule 75 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)


state 265

    (77) spaux -> cte func_callFuncParameter COMA spaux .

    CLOSEPAREN      reduce using rule 77 (spaux -> cte func_callFuncParameter COMA spaux .)


state 266

    (69) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . parameteraux
    (71) parameteraux -> . COMA parameter
    (72) parameteraux -> . empty
    (92) empty -> .

    COMA            shift and go to state 217
    CLOSEPAREN      reduce using rule 92 (empty -> .)

    parameteraux                   shift and go to state 273
    empty                          shift and go to state 219

state 267

    (63) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .

    READ            reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WRITE           reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SET             reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NOT             reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    IF              reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WHILE           reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    DO              reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CALL            reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    RETURN          reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    OPENPAREN       reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ID              reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    BOOLCTE         reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NUMBERCTE       reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WORDCTE         reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SENTENCECTE     reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CLOSECURL       reduce using rule 63 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)


state 268

    (21) assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .

    READ            reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WRITE           reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SET             reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NOT             reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    IF              reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WHILE           reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    DO              reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CALL            reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    RETURN          reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    ID              reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 21 (assign -> SET ID OPENBRAC index CLOSEBRAC func_constantIDArray EQUAL func_assign assignaux .)


state 269

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT . func_assign_array_end
    (114) func_assign_array_end -> .

    READ            reduce using rule 114 (func_assign_array_end -> .)
    WRITE           reduce using rule 114 (func_assign_array_end -> .)
    SET             reduce using rule 114 (func_assign_array_end -> .)
    NOT             reduce using rule 114 (func_assign_array_end -> .)
    IF              reduce using rule 114 (func_assign_array_end -> .)
    WHILE           reduce using rule 114 (func_assign_array_end -> .)
    DO              reduce using rule 114 (func_assign_array_end -> .)
    CALL            reduce using rule 114 (func_assign_array_end -> .)
    RETURN          reduce using rule 114 (func_assign_array_end -> .)
    OPENPAREN       reduce using rule 114 (func_assign_array_end -> .)
    ID              reduce using rule 114 (func_assign_array_end -> .)
    BOOLCTE         reduce using rule 114 (func_assign_array_end -> .)
    NUMBERCTE       reduce using rule 114 (func_assign_array_end -> .)
    WORDCTE         reduce using rule 114 (func_assign_array_end -> .)
    SENTENCECTE     reduce using rule 114 (func_assign_array_end -> .)
    CLOSECURL       reduce using rule 114 (func_assign_array_end -> .)

    func_assign_array_end          shift and go to state 274

state 270

    (26) assiaux -> exp func_assign_array COMA . assiaux
    (25) assiaux -> . exp func_assign_array
    (26) assiaux -> . exp func_assign_array COMA assiaux
    (52) exp -> . term
    (53) exp -> . term PLUS func_term_operation exp func_term
    (54) exp -> . term MINUS func_term_operation exp func_term
    (55) term -> . factor
    (56) term -> . factor MULT func_factor_operation term func_factor
    (57) term -> . factor DIV func_factor_operation term func_factor
    (58) factor -> . OPENPAREN expression CLOSEPAREN
    (59) factor -> . cte
    (27) cte -> . ID func_constantID
    (28) cte -> . ID OPENBRAC index CLOSEBRAC func_constantIDArray
    (29) cte -> . BOOLCTE func_boolCte func_constant
    (30) cte -> . NUMBERCTE func_numberCte func_constant
    (31) cte -> . WORDCTE func_wordCte func_constant
    (32) cte -> . SENTENCECTE func_sentenceCte func_constant

    OPENPAREN       shift and go to state 50
    ID              shift and go to state 64
    BOOLCTE         shift and go to state 46
    NUMBERCTE       shift and go to state 43
    WORDCTE         shift and go to state 45
    SENTENCECTE     shift and go to state 48

    term                           shift and go to state 67
    assiaux                        shift and go to state 275
    cte                            shift and go to state 69
    exp                            shift and go to state 245
    factor                         shift and go to state 59

state 271

    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block . func_endElse
    (126) func_endElse -> .

    READ            reduce using rule 126 (func_endElse -> .)
    WRITE           reduce using rule 126 (func_endElse -> .)
    SET             reduce using rule 126 (func_endElse -> .)
    NOT             reduce using rule 126 (func_endElse -> .)
    IF              reduce using rule 126 (func_endElse -> .)
    WHILE           reduce using rule 126 (func_endElse -> .)
    DO              reduce using rule 126 (func_endElse -> .)
    CALL            reduce using rule 126 (func_endElse -> .)
    RETURN          reduce using rule 126 (func_endElse -> .)
    OPENPAREN       reduce using rule 126 (func_endElse -> .)
    ID              reduce using rule 126 (func_endElse -> .)
    BOOLCTE         reduce using rule 126 (func_endElse -> .)
    NUMBERCTE       reduce using rule 126 (func_endElse -> .)
    WORDCTE         reduce using rule 126 (func_endElse -> .)
    SENTENCECTE     reduce using rule 126 (func_endElse -> .)
    CLOSECURL       reduce using rule 126 (func_endElse -> .)

    func_endElse                   shift and go to state 276

state 272

    (74) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .

    READ            reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WRITE           reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    SET             reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    NOT             reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    IF              reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WHILE           reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    DO              reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    CALL            reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    RETURN          reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    OPENPAREN       reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    ID              reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    BOOLCTE         reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    NUMBERCTE       reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    WORDCTE         reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    SENTENCECTE     reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)
    CLOSECURL       reduce using rule 74 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN func_callSpecial ENDSTMT .)


state 273

    (69) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .

    CLOSEPAREN      reduce using rule 69 (parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .)


state 274

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .

    READ            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WRITE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SET             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NOT             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    IF              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WHILE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    DO              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CALL            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    RETURN          reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    OPENPAREN       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    ID              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    BOOLCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    NUMBERCTE       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    WORDCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    SENTENCECTE     reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)
    CLOSECURL       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT func_assign_array_end .)


state 275

    (26) assiaux -> exp func_assign_array COMA assiaux .

    CLOSECURL       reduce using rule 26 (assiaux -> exp func_assign_array COMA assiaux .)


state 276

    (61) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .

    READ            reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WRITE           reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SET             reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NOT             reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    IF              reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WHILE           reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    DO              reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CALL            reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    RETURN          reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    OPENPAREN       reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ID              reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    BOOLCTE         reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NUMBERCTE       reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WORDCTE         reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SENTENCECTE     reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CLOSECURL       reduce using rule 61 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)

