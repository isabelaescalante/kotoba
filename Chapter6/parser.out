Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> start
Rule 1     start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END
Rule 2     start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END
Rule 3     startaux -> function startaux
Rule 4     startaux -> empty
Rule 5     block -> OPENCURL blockaux CLOSECURL
Rule 6     blockaux -> action blockaux
Rule 7     blockaux -> empty
Rule 8     action -> input
Rule 9     action -> output
Rule 10    action -> statement
Rule 11    input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
Rule 12    output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
Rule 13    outputaux -> expression func_print
Rule 14    outputaux -> expression func_print COMA outputaux
Rule 15    declare -> DEC decaux
Rule 16    decaux -> type ID func_declare_var declareaux
Rule 17    decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
Rule 18    declareaux -> ENDSTMT
Rule 19    declareaux -> COMA decaux
Rule 20    assign -> ID func_constantID EQUAL func_assign assignaux
Rule 21    assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
Rule 22    assignaux -> exp func_assign_value ENDSTMT
Rule 23    assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT
Rule 24    assiaux -> exp
Rule 25    assiaux -> exp COMA assiaux
Rule 26    cte -> ID func_constantID
Rule 27    cte -> BOOLCTE func_constant func_boolCte
Rule 28    cte -> NUMBERCTE func_constant func_numberCte
Rule 29    cte -> WORDCTE func_constant func_wordCte
Rule 30    cte -> SENTENCECTE func_constant func_sentenceCte
Rule 31    type -> BOOL func_type
Rule 32    type -> NUMBER func_type
Rule 33    type -> WORD func_type
Rule 34    type -> SENTENCE func_type
Rule 35    statement -> assign
Rule 36    statement -> expression
Rule 37    statement -> condition
Rule 38    statement -> cycle
Rule 39    statement -> callfunction
Rule 40    expression -> logexpression
Rule 41    expression -> NOT func_logicOp_operation logexpression func_logicOP
Rule 42    logexpression -> relopexpression
Rule 43    logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP
Rule 44    logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP
Rule 45    relopexpression -> exp
Rule 46    relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop
Rule 47    exp -> term
Rule 48    exp -> term PLUS func_term_operation exp func_term
Rule 49    exp -> term MINUS func_term_operation exp func_term
Rule 50    term -> factor
Rule 51    term -> factor MULT func_factor_operation term func_factor
Rule 52    term -> factor DIV func_factor_operation term func_factor
Rule 53    factor -> OPENPAREN expression CLOSEPAREN
Rule 54    factor -> cte
Rule 55    condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
Rule 56    condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
Rule 57    cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
Rule 58    cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
Rule 59    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
Rule 60    function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
Rule 61    funcaux -> type
Rule 62    funcaux -> VOID
Rule 63    parameter -> type ID func_declare_par parameteraux
Rule 64    parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
Rule 65    parameteraux -> COMA parameter
Rule 66    parameteraux -> empty
Rule 67    returnaux -> RETURN ID func_return
Rule 68    returnaux -> empty
Rule 69    callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
Rule 70    callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
Rule 71    spaux -> cte func_callFuncParameter
Rule 72    spaux -> cte func_callFuncParameter COMA spaux
Rule 73    spaux -> empty
Rule 74    special -> LENGTH
Rule 75    special -> FREQUENCY
Rule 76    special -> SEARCH
Rule 77    special -> EXISTS
Rule 78    special -> MEAN
Rule 79    special -> MEDIAN
Rule 80    special -> MODE
Rule 81    special -> WORDCOUNT
Rule 82    special -> TOKENIZE
Rule 83    special -> REMOVE
Rule 84    empty -> <empty>
Rule 85    func_start -> <empty>
Rule 86    func_isSize -> <empty>
Rule 87    func_declare_var -> <empty>
Rule 88    func_declare_array -> <empty>
Rule 89    func_declare_par -> <empty>
Rule 90    func_declare_function -> <empty>
Rule 91    func_type -> <empty>
Rule 92    func_constant -> <empty>
Rule 93    func_constantID -> <empty>
Rule 94    func_boolCte -> <empty>
Rule 95    func_numberCte -> <empty>
Rule 96    func_wordCte -> <empty>
Rule 97    func_sentenceCte -> <empty>
Rule 98    func_begin_main -> <empty>
Rule 99    func_read -> <empty>
Rule 100   func_print -> <empty>
Rule 101   func_assign -> <empty>
Rule 102   func_assign_value -> <empty>
Rule 103   func_term_operation -> <empty>
Rule 104   func_term -> <empty>
Rule 105   func_factor_operation -> <empty>
Rule 106   func_factor -> <empty>
Rule 107   func_relop_operation -> <empty>
Rule 108   func_relop -> <empty>
Rule 109   func_logicOp_operation -> <empty>
Rule 110   func_logicOP -> <empty>
Rule 111   func_if -> <empty>
Rule 112   func_endIf -> <empty>
Rule 113   func_else -> <empty>
Rule 114   func_endElse -> <empty>
Rule 115   func_do -> <empty>
Rule 116   func_endDoWhile -> <empty>
Rule 117   func_while -> <empty>
Rule 118   func_whileExp -> <empty>
Rule 119   func_endWhile -> <empty>
Rule 120   func_callFunc -> <empty>
Rule 121   func_callFuncParameter -> <empty>
Rule 122   func_endCallFunction -> <empty>
Rule 123   func_return -> <empty>
Rule 124   func_clear -> <empty>

Terminals, with rules where they appear

AND                  : 43
BEGIN                : 1 2
BOOL                 : 31
BOOLCTE              : 27
CALL                 : 69 70
CLOSEBRAC            : 17 21 64
CLOSECURL            : 5 23 59 60
CLOSEPAREN           : 11 12 53 55 56 57 58 59 60 69 70
COMA                 : 14 19 25 65 72
DEC                  : 15
DIV                  : 52
DO                   : 58
DOT                  : 69
ELSE                 : 56
END                  : 1 2
ENDSTMT              : 1 2 11 12 18 22 23 58 59 60 69 70
EQUAL                : 20 21
EXISTS               : 77
FREQUENCY            : 75
FUNC                 : 59 60
ID                   : 1 2 11 16 17 20 21 26 59 60 63 64 67 69 70
IF                   : 55 56
KOTOBA               : 1 2
LENGTH               : 74
MEAN                 : 78
MEDIAN               : 79
MINUS                : 49
MODE                 : 80
MULT                 : 51
NOT                  : 41
NUMBER               : 32
NUMBERCTE            : 28
OPENBRAC             : 17 21 64
OPENCURL             : 5 23 59 60
OPENPAREN            : 11 12 53 55 56 57 58 59 60 69 70
OR                   : 44
PLUS                 : 48
READ                 : 11
RELOP                : 46
REMOVE               : 83
RETURN               : 67
SEARCH               : 76
SENTENCE             : 34
SENTENCECTE          : 30
TOKENIZE             : 82
VOID                 : 62
WHILE                : 57 58
WORD                 : 33
WORDCOUNT            : 81
WORDCTE              : 29
WRITE                : 12
error                : 

Nonterminals, with rules where they appear

action               : 6
assiaux              : 23 25
assign               : 35
assignaux            : 20 21
block                : 1 2 55 56 56 57 58
blockaux             : 5 6 59 60
callfunction         : 39
condition            : 37
cte                  : 17 21 54 64 71 72
cycle                : 38
decaux               : 15 19
declare              : 1 59
declareaux           : 16 17
empty                : 4 7 66 68 73
exp                  : 22 24 25 45 46 46 48 49
expression           : 13 14 36 53 55 56 57 58
factor               : 50 51 52
func_assign          : 20
func_assign_value    : 22
func_begin_main      : 1 2
func_boolCte         : 27
func_callFunc        : 70
func_callFuncParameter : 71 72
func_clear           : 59 60
func_constant        : 27 28 29 30
func_constantID      : 20 21 26
func_declare_array   : 17 64
func_declare_function : 59 60
func_declare_par     : 63
func_declare_var     : 16
func_do              : 58
func_else            : 56
func_endCallFunction : 70
func_endDoWhile      : 58
func_endElse         : 56
func_endIf           : 55
func_endWhile        : 57
func_factor          : 51 52
func_factor_operation : 51 52
func_if              : 55 56
func_isSize          : 17 21 64
func_logicOP         : 41 43 44
func_logicOp_operation : 41 43 44
func_numberCte       : 28
func_print           : 13 14
func_read            : 11
func_relop           : 46 46
func_relop_operation : 46
func_return          : 67
func_sentenceCte     : 30
func_start           : 1 2
func_term            : 48 49
func_term_operation  : 48 49
func_type            : 31 32 33 34
func_while           : 57
func_whileExp        : 57
func_wordCte         : 29
funcaux              : 59 60
function             : 3
input                : 8
logexpression        : 40 41 43 44
output               : 9
outputaux            : 12 14
parameter            : 59 60 65
parameteraux         : 63 64
relopexpression      : 42 43 44
returnaux            : 59 60
spaux                : 69 70 72
special              : 69
start                : 0
startaux             : 1 2 3
statement            : 10
term                 : 47 48 49 51 52
type                 : 16 17 61 63 64

Parsing method: LALR

state 0

    (0) S' -> . start
    (1) start -> . KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END
    (2) start -> . KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END

    KOTOBA          shift and go to state 2

    start                          shift and go to state 1

state 1

    (0) S' -> start .



state 2

    (1) start -> KOTOBA . ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END
    (2) start -> KOTOBA . ID func_start ENDSTMT startaux BEGIN func_begin_main block END

    ID              shift and go to state 3


state 3

    (1) start -> KOTOBA ID . func_start ENDSTMT declare startaux BEGIN func_begin_main block END
    (2) start -> KOTOBA ID . func_start ENDSTMT startaux BEGIN func_begin_main block END
    (85) func_start -> .

    ENDSTMT         reduce using rule 85 (func_start -> .)

    func_start                     shift and go to state 4

state 4

    (1) start -> KOTOBA ID func_start . ENDSTMT declare startaux BEGIN func_begin_main block END
    (2) start -> KOTOBA ID func_start . ENDSTMT startaux BEGIN func_begin_main block END

    ENDSTMT         shift and go to state 5


state 5

    (1) start -> KOTOBA ID func_start ENDSTMT . declare startaux BEGIN func_begin_main block END
    (2) start -> KOTOBA ID func_start ENDSTMT . startaux BEGIN func_begin_main block END
    (15) declare -> . DEC decaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (59) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (84) empty -> .

    DEC             shift and go to state 8
    FUNC            shift and go to state 11
    BEGIN           reduce using rule 84 (empty -> .)

    declare                        shift and go to state 6
    startaux                       shift and go to state 7
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 6

    (1) start -> KOTOBA ID func_start ENDSTMT declare . startaux BEGIN func_begin_main block END
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (59) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (84) empty -> .

    FUNC            shift and go to state 11
    BEGIN           reduce using rule 84 (empty -> .)

    startaux                       shift and go to state 12
    function                       shift and go to state 9
    empty                          shift and go to state 10

state 7

    (2) start -> KOTOBA ID func_start ENDSTMT startaux . BEGIN func_begin_main block END

    BEGIN           shift and go to state 13


state 8

    (15) declare -> DEC . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (31) type -> . BOOL func_type
    (32) type -> . NUMBER func_type
    (33) type -> . WORD func_type
    (34) type -> . SENTENCE func_type

    BOOL            shift and go to state 16
    NUMBER          shift and go to state 17
    WORD            shift and go to state 18
    SENTENCE        shift and go to state 19

    decaux                         shift and go to state 14
    type                           shift and go to state 15

state 9

    (3) startaux -> function . startaux
    (3) startaux -> . function startaux
    (4) startaux -> . empty
    (59) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> . FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (84) empty -> .

    FUNC            shift and go to state 11
    BEGIN           reduce using rule 84 (empty -> .)

    function                       shift and go to state 9
    startaux                       shift and go to state 20
    empty                          shift and go to state 10

state 10

    (4) startaux -> empty .

    BEGIN           reduce using rule 4 (startaux -> empty .)


state 11

    (59) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC . funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (61) funcaux -> . type
    (62) funcaux -> . VOID
    (31) type -> . BOOL func_type
    (32) type -> . NUMBER func_type
    (33) type -> . WORD func_type
    (34) type -> . SENTENCE func_type

    VOID            shift and go to state 23
    BOOL            shift and go to state 16
    NUMBER          shift and go to state 17
    WORD            shift and go to state 18
    SENTENCE        shift and go to state 19

    funcaux                        shift and go to state 21
    type                           shift and go to state 22

state 12

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux . BEGIN func_begin_main block END

    BEGIN           shift and go to state 24


state 13

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN . func_begin_main block END
    (98) func_begin_main -> .

    OPENCURL        reduce using rule 98 (func_begin_main -> .)

    func_begin_main                shift and go to state 25

state 14

    (15) declare -> DEC decaux .

    FUNC            reduce using rule 15 (declare -> DEC decaux .)
    BEGIN           reduce using rule 15 (declare -> DEC decaux .)
    READ            reduce using rule 15 (declare -> DEC decaux .)
    WRITE           reduce using rule 15 (declare -> DEC decaux .)
    ID              reduce using rule 15 (declare -> DEC decaux .)
    NOT             reduce using rule 15 (declare -> DEC decaux .)
    IF              reduce using rule 15 (declare -> DEC decaux .)
    WHILE           reduce using rule 15 (declare -> DEC decaux .)
    DO              reduce using rule 15 (declare -> DEC decaux .)
    CALL            reduce using rule 15 (declare -> DEC decaux .)
    OPENPAREN       reduce using rule 15 (declare -> DEC decaux .)
    BOOLCTE         reduce using rule 15 (declare -> DEC decaux .)
    NUMBERCTE       reduce using rule 15 (declare -> DEC decaux .)
    WORDCTE         reduce using rule 15 (declare -> DEC decaux .)
    SENTENCECTE     reduce using rule 15 (declare -> DEC decaux .)
    RETURN          reduce using rule 15 (declare -> DEC decaux .)
    ENDSTMT         reduce using rule 15 (declare -> DEC decaux .)


state 15

    (16) decaux -> type . ID func_declare_var declareaux
    (17) decaux -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux

    ID              shift and go to state 26


state 16

    (31) type -> BOOL . func_type
    (91) func_type -> .

    ID              reduce using rule 91 (func_type -> .)

    func_type                      shift and go to state 27

state 17

    (32) type -> NUMBER . func_type
    (91) func_type -> .

    ID              reduce using rule 91 (func_type -> .)

    func_type                      shift and go to state 28

state 18

    (33) type -> WORD . func_type
    (91) func_type -> .

    ID              reduce using rule 91 (func_type -> .)

    func_type                      shift and go to state 29

state 19

    (34) type -> SENTENCE . func_type
    (91) func_type -> .

    ID              reduce using rule 91 (func_type -> .)

    func_type                      shift and go to state 30

state 20

    (3) startaux -> function startaux .

    BEGIN           reduce using rule 3 (startaux -> function startaux .)


state 21

    (59) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux . ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    ID              shift and go to state 31


state 22

    (61) funcaux -> type .

    ID              reduce using rule 61 (funcaux -> type .)


state 23

    (62) funcaux -> VOID .

    ID              reduce using rule 62 (funcaux -> VOID .)


state 24

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN . func_begin_main block END
    (98) func_begin_main -> .

    OPENCURL        reduce using rule 98 (func_begin_main -> .)

    func_begin_main                shift and go to state 32

state 25

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main . block END
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 33

state 26

    (16) decaux -> type ID . func_declare_var declareaux
    (17) decaux -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (87) func_declare_var -> .

    OPENBRAC        shift and go to state 36
    ENDSTMT         reduce using rule 87 (func_declare_var -> .)
    COMA            reduce using rule 87 (func_declare_var -> .)

    func_declare_var               shift and go to state 35

state 27

    (31) type -> BOOL func_type .

    ID              reduce using rule 31 (type -> BOOL func_type .)


state 28

    (32) type -> NUMBER func_type .

    ID              reduce using rule 32 (type -> NUMBER func_type .)


state 29

    (33) type -> WORD func_type .

    ID              reduce using rule 33 (type -> WORD func_type .)


state 30

    (34) type -> SENTENCE func_type .

    ID              reduce using rule 34 (type -> SENTENCE func_type .)


state 31

    (59) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID . func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (90) func_declare_function -> .

    OPENPAREN       reduce using rule 90 (func_declare_function -> .)

    func_declare_function          shift and go to state 37

state 32

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main . block END
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 38

state 33

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block . END

    END             shift and go to state 39


state 34

    (5) block -> OPENCURL . blockaux CLOSECURL
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (84) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (35) statement -> . assign
    (36) statement -> . expression
    (37) statement -> . condition
    (38) statement -> . cycle
    (39) statement -> . callfunction
    (20) assign -> . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (55) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (57) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (58) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (69) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    CLOSECURL       reduce using rule 84 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 49
    ID              shift and go to state 48
    NOT             shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    CALL            shift and go to state 61
    OPENPAREN       shift and go to state 47
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    blockaux                       shift and go to state 40
    action                         shift and go to state 41
    empty                          shift and go to state 42
    input                          shift and go to state 43
    output                         shift and go to state 44
    statement                      shift and go to state 45
    assign                         shift and go to state 50
    expression                     shift and go to state 51
    condition                      shift and go to state 52
    cycle                          shift and go to state 53
    callfunction                   shift and go to state 54
    cte                            shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 35

    (16) decaux -> type ID func_declare_var . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 71
    COMA            shift and go to state 72

    declareaux                     shift and go to state 70

state 36

    (17) decaux -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array declareaux
    (86) func_isSize -> .

    ID              reduce using rule 86 (func_isSize -> .)
    BOOLCTE         reduce using rule 86 (func_isSize -> .)
    NUMBERCTE       reduce using rule 86 (func_isSize -> .)
    WORDCTE         reduce using rule 86 (func_isSize -> .)
    SENTENCECTE     reduce using rule 86 (func_isSize -> .)

    func_isSize                    shift and go to state 73

state 37

    (59) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID func_declare_function . OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    OPENPAREN       shift and go to state 74


state 38

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block . END

    END             shift and go to state 75


state 39

    (2) start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END .

    $end            reduce using rule 2 (start -> KOTOBA ID func_start ENDSTMT startaux BEGIN func_begin_main block END .)


state 40

    (5) block -> OPENCURL blockaux . CLOSECURL

    CLOSECURL       shift and go to state 76


state 41

    (6) blockaux -> action . blockaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (84) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (35) statement -> . assign
    (36) statement -> . expression
    (37) statement -> . condition
    (38) statement -> . cycle
    (39) statement -> . callfunction
    (20) assign -> . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (55) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (57) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (58) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (69) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    CLOSECURL       reduce using rule 84 (empty -> .)
    RETURN          reduce using rule 84 (empty -> .)
    ENDSTMT         reduce using rule 84 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 49
    ID              shift and go to state 48
    NOT             shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    CALL            shift and go to state 61
    OPENPAREN       shift and go to state 47
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    action                         shift and go to state 41
    blockaux                       shift and go to state 77
    empty                          shift and go to state 42
    input                          shift and go to state 43
    output                         shift and go to state 44
    statement                      shift and go to state 45
    assign                         shift and go to state 50
    expression                     shift and go to state 51
    condition                      shift and go to state 52
    cycle                          shift and go to state 53
    callfunction                   shift and go to state 54
    cte                            shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 42

    (7) blockaux -> empty .

    CLOSECURL       reduce using rule 7 (blockaux -> empty .)
    RETURN          reduce using rule 7 (blockaux -> empty .)
    ENDSTMT         reduce using rule 7 (blockaux -> empty .)


state 43

    (8) action -> input .

    READ            reduce using rule 8 (action -> input .)
    WRITE           reduce using rule 8 (action -> input .)
    ID              reduce using rule 8 (action -> input .)
    NOT             reduce using rule 8 (action -> input .)
    IF              reduce using rule 8 (action -> input .)
    WHILE           reduce using rule 8 (action -> input .)
    DO              reduce using rule 8 (action -> input .)
    CALL            reduce using rule 8 (action -> input .)
    OPENPAREN       reduce using rule 8 (action -> input .)
    BOOLCTE         reduce using rule 8 (action -> input .)
    NUMBERCTE       reduce using rule 8 (action -> input .)
    WORDCTE         reduce using rule 8 (action -> input .)
    SENTENCECTE     reduce using rule 8 (action -> input .)
    CLOSECURL       reduce using rule 8 (action -> input .)
    RETURN          reduce using rule 8 (action -> input .)
    ENDSTMT         reduce using rule 8 (action -> input .)


state 44

    (9) action -> output .

    READ            reduce using rule 9 (action -> output .)
    WRITE           reduce using rule 9 (action -> output .)
    ID              reduce using rule 9 (action -> output .)
    NOT             reduce using rule 9 (action -> output .)
    IF              reduce using rule 9 (action -> output .)
    WHILE           reduce using rule 9 (action -> output .)
    DO              reduce using rule 9 (action -> output .)
    CALL            reduce using rule 9 (action -> output .)
    OPENPAREN       reduce using rule 9 (action -> output .)
    BOOLCTE         reduce using rule 9 (action -> output .)
    NUMBERCTE       reduce using rule 9 (action -> output .)
    WORDCTE         reduce using rule 9 (action -> output .)
    SENTENCECTE     reduce using rule 9 (action -> output .)
    CLOSECURL       reduce using rule 9 (action -> output .)
    RETURN          reduce using rule 9 (action -> output .)
    ENDSTMT         reduce using rule 9 (action -> output .)


state 45

    (10) action -> statement .

    READ            reduce using rule 10 (action -> statement .)
    WRITE           reduce using rule 10 (action -> statement .)
    ID              reduce using rule 10 (action -> statement .)
    NOT             reduce using rule 10 (action -> statement .)
    IF              reduce using rule 10 (action -> statement .)
    WHILE           reduce using rule 10 (action -> statement .)
    DO              reduce using rule 10 (action -> statement .)
    CALL            reduce using rule 10 (action -> statement .)
    OPENPAREN       reduce using rule 10 (action -> statement .)
    BOOLCTE         reduce using rule 10 (action -> statement .)
    NUMBERCTE       reduce using rule 10 (action -> statement .)
    WORDCTE         reduce using rule 10 (action -> statement .)
    SENTENCECTE     reduce using rule 10 (action -> statement .)
    CLOSECURL       reduce using rule 10 (action -> statement .)
    RETURN          reduce using rule 10 (action -> statement .)
    ENDSTMT         reduce using rule 10 (action -> statement .)


state 46

    (11) input -> READ . OPENPAREN ID func_read CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 78


state 47

    (53) factor -> OPENPAREN . expression CLOSEPAREN
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    expression                     shift and go to state 79
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 48

    (20) assign -> ID . func_constantID EQUAL func_assign assignaux
    (21) assign -> ID . func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (26) cte -> ID . func_constantID
    (93) func_constantID -> .

    EQUAL           reduce using rule 93 (func_constantID -> .)
    OPENBRAC        reduce using rule 93 (func_constantID -> .)
    MULT            reduce using rule 93 (func_constantID -> .)
    DIV             reduce using rule 93 (func_constantID -> .)
    PLUS            reduce using rule 93 (func_constantID -> .)
    MINUS           reduce using rule 93 (func_constantID -> .)
    RELOP           reduce using rule 93 (func_constantID -> .)
    AND             reduce using rule 93 (func_constantID -> .)
    OR              reduce using rule 93 (func_constantID -> .)
    READ            reduce using rule 93 (func_constantID -> .)
    WRITE           reduce using rule 93 (func_constantID -> .)
    ID              reduce using rule 93 (func_constantID -> .)
    NOT             reduce using rule 93 (func_constantID -> .)
    IF              reduce using rule 93 (func_constantID -> .)
    WHILE           reduce using rule 93 (func_constantID -> .)
    DO              reduce using rule 93 (func_constantID -> .)
    CALL            reduce using rule 93 (func_constantID -> .)
    OPENPAREN       reduce using rule 93 (func_constantID -> .)
    BOOLCTE         reduce using rule 93 (func_constantID -> .)
    NUMBERCTE       reduce using rule 93 (func_constantID -> .)
    WORDCTE         reduce using rule 93 (func_constantID -> .)
    SENTENCECTE     reduce using rule 93 (func_constantID -> .)
    CLOSECURL       reduce using rule 93 (func_constantID -> .)
    RETURN          reduce using rule 93 (func_constantID -> .)
    ENDSTMT         reduce using rule 93 (func_constantID -> .)

    func_constantID                shift and go to state 81

state 49

    (12) output -> WRITE . OPENPAREN outputaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 82


state 50

    (35) statement -> assign .

    READ            reduce using rule 35 (statement -> assign .)
    WRITE           reduce using rule 35 (statement -> assign .)
    ID              reduce using rule 35 (statement -> assign .)
    NOT             reduce using rule 35 (statement -> assign .)
    IF              reduce using rule 35 (statement -> assign .)
    WHILE           reduce using rule 35 (statement -> assign .)
    DO              reduce using rule 35 (statement -> assign .)
    CALL            reduce using rule 35 (statement -> assign .)
    OPENPAREN       reduce using rule 35 (statement -> assign .)
    BOOLCTE         reduce using rule 35 (statement -> assign .)
    NUMBERCTE       reduce using rule 35 (statement -> assign .)
    WORDCTE         reduce using rule 35 (statement -> assign .)
    SENTENCECTE     reduce using rule 35 (statement -> assign .)
    CLOSECURL       reduce using rule 35 (statement -> assign .)
    RETURN          reduce using rule 35 (statement -> assign .)
    ENDSTMT         reduce using rule 35 (statement -> assign .)


state 51

    (36) statement -> expression .

    READ            reduce using rule 36 (statement -> expression .)
    WRITE           reduce using rule 36 (statement -> expression .)
    ID              reduce using rule 36 (statement -> expression .)
    NOT             reduce using rule 36 (statement -> expression .)
    IF              reduce using rule 36 (statement -> expression .)
    WHILE           reduce using rule 36 (statement -> expression .)
    DO              reduce using rule 36 (statement -> expression .)
    CALL            reduce using rule 36 (statement -> expression .)
    OPENPAREN       reduce using rule 36 (statement -> expression .)
    BOOLCTE         reduce using rule 36 (statement -> expression .)
    NUMBERCTE       reduce using rule 36 (statement -> expression .)
    WORDCTE         reduce using rule 36 (statement -> expression .)
    SENTENCECTE     reduce using rule 36 (statement -> expression .)
    CLOSECURL       reduce using rule 36 (statement -> expression .)
    RETURN          reduce using rule 36 (statement -> expression .)
    ENDSTMT         reduce using rule 36 (statement -> expression .)


state 52

    (37) statement -> condition .

    READ            reduce using rule 37 (statement -> condition .)
    WRITE           reduce using rule 37 (statement -> condition .)
    ID              reduce using rule 37 (statement -> condition .)
    NOT             reduce using rule 37 (statement -> condition .)
    IF              reduce using rule 37 (statement -> condition .)
    WHILE           reduce using rule 37 (statement -> condition .)
    DO              reduce using rule 37 (statement -> condition .)
    CALL            reduce using rule 37 (statement -> condition .)
    OPENPAREN       reduce using rule 37 (statement -> condition .)
    BOOLCTE         reduce using rule 37 (statement -> condition .)
    NUMBERCTE       reduce using rule 37 (statement -> condition .)
    WORDCTE         reduce using rule 37 (statement -> condition .)
    SENTENCECTE     reduce using rule 37 (statement -> condition .)
    CLOSECURL       reduce using rule 37 (statement -> condition .)
    RETURN          reduce using rule 37 (statement -> condition .)
    ENDSTMT         reduce using rule 37 (statement -> condition .)


state 53

    (38) statement -> cycle .

    READ            reduce using rule 38 (statement -> cycle .)
    WRITE           reduce using rule 38 (statement -> cycle .)
    ID              reduce using rule 38 (statement -> cycle .)
    NOT             reduce using rule 38 (statement -> cycle .)
    IF              reduce using rule 38 (statement -> cycle .)
    WHILE           reduce using rule 38 (statement -> cycle .)
    DO              reduce using rule 38 (statement -> cycle .)
    CALL            reduce using rule 38 (statement -> cycle .)
    OPENPAREN       reduce using rule 38 (statement -> cycle .)
    BOOLCTE         reduce using rule 38 (statement -> cycle .)
    NUMBERCTE       reduce using rule 38 (statement -> cycle .)
    WORDCTE         reduce using rule 38 (statement -> cycle .)
    SENTENCECTE     reduce using rule 38 (statement -> cycle .)
    CLOSECURL       reduce using rule 38 (statement -> cycle .)
    RETURN          reduce using rule 38 (statement -> cycle .)
    ENDSTMT         reduce using rule 38 (statement -> cycle .)


state 54

    (39) statement -> callfunction .

    READ            reduce using rule 39 (statement -> callfunction .)
    WRITE           reduce using rule 39 (statement -> callfunction .)
    ID              reduce using rule 39 (statement -> callfunction .)
    NOT             reduce using rule 39 (statement -> callfunction .)
    IF              reduce using rule 39 (statement -> callfunction .)
    WHILE           reduce using rule 39 (statement -> callfunction .)
    DO              reduce using rule 39 (statement -> callfunction .)
    CALL            reduce using rule 39 (statement -> callfunction .)
    OPENPAREN       reduce using rule 39 (statement -> callfunction .)
    BOOLCTE         reduce using rule 39 (statement -> callfunction .)
    NUMBERCTE       reduce using rule 39 (statement -> callfunction .)
    WORDCTE         reduce using rule 39 (statement -> callfunction .)
    SENTENCECTE     reduce using rule 39 (statement -> callfunction .)
    CLOSECURL       reduce using rule 39 (statement -> callfunction .)
    RETURN          reduce using rule 39 (statement -> callfunction .)
    ENDSTMT         reduce using rule 39 (statement -> callfunction .)


state 55

    (54) factor -> cte .

    MULT            reduce using rule 54 (factor -> cte .)
    DIV             reduce using rule 54 (factor -> cte .)
    PLUS            reduce using rule 54 (factor -> cte .)
    MINUS           reduce using rule 54 (factor -> cte .)
    RELOP           reduce using rule 54 (factor -> cte .)
    AND             reduce using rule 54 (factor -> cte .)
    OR              reduce using rule 54 (factor -> cte .)
    READ            reduce using rule 54 (factor -> cte .)
    WRITE           reduce using rule 54 (factor -> cte .)
    ID              reduce using rule 54 (factor -> cte .)
    NOT             reduce using rule 54 (factor -> cte .)
    IF              reduce using rule 54 (factor -> cte .)
    WHILE           reduce using rule 54 (factor -> cte .)
    DO              reduce using rule 54 (factor -> cte .)
    CALL            reduce using rule 54 (factor -> cte .)
    OPENPAREN       reduce using rule 54 (factor -> cte .)
    BOOLCTE         reduce using rule 54 (factor -> cte .)
    NUMBERCTE       reduce using rule 54 (factor -> cte .)
    WORDCTE         reduce using rule 54 (factor -> cte .)
    SENTENCECTE     reduce using rule 54 (factor -> cte .)
    CLOSECURL       reduce using rule 54 (factor -> cte .)
    RETURN          reduce using rule 54 (factor -> cte .)
    ENDSTMT         reduce using rule 54 (factor -> cte .)
    CLOSEPAREN      reduce using rule 54 (factor -> cte .)
    COMA            reduce using rule 54 (factor -> cte .)


state 56

    (40) expression -> logexpression .

    READ            reduce using rule 40 (expression -> logexpression .)
    WRITE           reduce using rule 40 (expression -> logexpression .)
    ID              reduce using rule 40 (expression -> logexpression .)
    NOT             reduce using rule 40 (expression -> logexpression .)
    IF              reduce using rule 40 (expression -> logexpression .)
    WHILE           reduce using rule 40 (expression -> logexpression .)
    DO              reduce using rule 40 (expression -> logexpression .)
    CALL            reduce using rule 40 (expression -> logexpression .)
    OPENPAREN       reduce using rule 40 (expression -> logexpression .)
    BOOLCTE         reduce using rule 40 (expression -> logexpression .)
    NUMBERCTE       reduce using rule 40 (expression -> logexpression .)
    WORDCTE         reduce using rule 40 (expression -> logexpression .)
    SENTENCECTE     reduce using rule 40 (expression -> logexpression .)
    CLOSECURL       reduce using rule 40 (expression -> logexpression .)
    RETURN          reduce using rule 40 (expression -> logexpression .)
    ENDSTMT         reduce using rule 40 (expression -> logexpression .)
    CLOSEPAREN      reduce using rule 40 (expression -> logexpression .)
    COMA            reduce using rule 40 (expression -> logexpression .)


state 57

    (41) expression -> NOT . func_logicOp_operation logexpression func_logicOP
    (109) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 109 (func_logicOp_operation -> .)
    ID              reduce using rule 109 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 109 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 109 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 109 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 109 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 83

state 58

    (55) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (56) condition -> IF . OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse

    OPENPAREN       shift and go to state 84


state 59

    (57) cycle -> WHILE . func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (117) func_while -> .

    OPENPAREN       reduce using rule 117 (func_while -> .)

    func_while                     shift and go to state 85

state 60

    (58) cycle -> DO . func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (115) func_do -> .

    OPENCURL        reduce using rule 115 (func_do -> .)

    func_do                        shift and go to state 86

state 61

    (69) callfunction -> CALL . ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> CALL . ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    ID              shift and go to state 87


state 62

    (42) logexpression -> relopexpression .
    (43) logexpression -> relopexpression . AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> relopexpression . OR func_logicOp_operation logexpression func_logicOP

    READ            reduce using rule 42 (logexpression -> relopexpression .)
    WRITE           reduce using rule 42 (logexpression -> relopexpression .)
    ID              reduce using rule 42 (logexpression -> relopexpression .)
    NOT             reduce using rule 42 (logexpression -> relopexpression .)
    IF              reduce using rule 42 (logexpression -> relopexpression .)
    WHILE           reduce using rule 42 (logexpression -> relopexpression .)
    DO              reduce using rule 42 (logexpression -> relopexpression .)
    CALL            reduce using rule 42 (logexpression -> relopexpression .)
    OPENPAREN       reduce using rule 42 (logexpression -> relopexpression .)
    BOOLCTE         reduce using rule 42 (logexpression -> relopexpression .)
    NUMBERCTE       reduce using rule 42 (logexpression -> relopexpression .)
    WORDCTE         reduce using rule 42 (logexpression -> relopexpression .)
    SENTENCECTE     reduce using rule 42 (logexpression -> relopexpression .)
    CLOSECURL       reduce using rule 42 (logexpression -> relopexpression .)
    RETURN          reduce using rule 42 (logexpression -> relopexpression .)
    ENDSTMT         reduce using rule 42 (logexpression -> relopexpression .)
    CLOSEPAREN      reduce using rule 42 (logexpression -> relopexpression .)
    COMA            reduce using rule 42 (logexpression -> relopexpression .)
    AND             shift and go to state 88
    OR              shift and go to state 89


state 63

    (45) relopexpression -> exp .
    (46) relopexpression -> exp . func_relop RELOP func_relop_operation exp func_relop
    (108) func_relop -> .

    AND             reduce using rule 45 (relopexpression -> exp .)
    OR              reduce using rule 45 (relopexpression -> exp .)
    READ            reduce using rule 45 (relopexpression -> exp .)
    WRITE           reduce using rule 45 (relopexpression -> exp .)
    ID              reduce using rule 45 (relopexpression -> exp .)
    NOT             reduce using rule 45 (relopexpression -> exp .)
    IF              reduce using rule 45 (relopexpression -> exp .)
    WHILE           reduce using rule 45 (relopexpression -> exp .)
    DO              reduce using rule 45 (relopexpression -> exp .)
    CALL            reduce using rule 45 (relopexpression -> exp .)
    OPENPAREN       reduce using rule 45 (relopexpression -> exp .)
    BOOLCTE         reduce using rule 45 (relopexpression -> exp .)
    NUMBERCTE       reduce using rule 45 (relopexpression -> exp .)
    WORDCTE         reduce using rule 45 (relopexpression -> exp .)
    SENTENCECTE     reduce using rule 45 (relopexpression -> exp .)
    CLOSECURL       reduce using rule 45 (relopexpression -> exp .)
    RETURN          reduce using rule 45 (relopexpression -> exp .)
    ENDSTMT         reduce using rule 45 (relopexpression -> exp .)
    CLOSEPAREN      reduce using rule 45 (relopexpression -> exp .)
    COMA            reduce using rule 45 (relopexpression -> exp .)
    RELOP           reduce using rule 108 (func_relop -> .)

    func_relop                     shift and go to state 90

state 64

    (47) exp -> term .
    (48) exp -> term . PLUS func_term_operation exp func_term
    (49) exp -> term . MINUS func_term_operation exp func_term

    RELOP           reduce using rule 47 (exp -> term .)
    AND             reduce using rule 47 (exp -> term .)
    OR              reduce using rule 47 (exp -> term .)
    READ            reduce using rule 47 (exp -> term .)
    WRITE           reduce using rule 47 (exp -> term .)
    ID              reduce using rule 47 (exp -> term .)
    NOT             reduce using rule 47 (exp -> term .)
    IF              reduce using rule 47 (exp -> term .)
    WHILE           reduce using rule 47 (exp -> term .)
    DO              reduce using rule 47 (exp -> term .)
    CALL            reduce using rule 47 (exp -> term .)
    OPENPAREN       reduce using rule 47 (exp -> term .)
    BOOLCTE         reduce using rule 47 (exp -> term .)
    NUMBERCTE       reduce using rule 47 (exp -> term .)
    WORDCTE         reduce using rule 47 (exp -> term .)
    SENTENCECTE     reduce using rule 47 (exp -> term .)
    CLOSECURL       reduce using rule 47 (exp -> term .)
    RETURN          reduce using rule 47 (exp -> term .)
    ENDSTMT         reduce using rule 47 (exp -> term .)
    CLOSEPAREN      reduce using rule 47 (exp -> term .)
    COMA            reduce using rule 47 (exp -> term .)
    PLUS            shift and go to state 91
    MINUS           shift and go to state 92


state 65

    (50) term -> factor .
    (51) term -> factor . MULT func_factor_operation term func_factor
    (52) term -> factor . DIV func_factor_operation term func_factor

    PLUS            reduce using rule 50 (term -> factor .)
    MINUS           reduce using rule 50 (term -> factor .)
    RELOP           reduce using rule 50 (term -> factor .)
    AND             reduce using rule 50 (term -> factor .)
    OR              reduce using rule 50 (term -> factor .)
    READ            reduce using rule 50 (term -> factor .)
    WRITE           reduce using rule 50 (term -> factor .)
    ID              reduce using rule 50 (term -> factor .)
    NOT             reduce using rule 50 (term -> factor .)
    IF              reduce using rule 50 (term -> factor .)
    WHILE           reduce using rule 50 (term -> factor .)
    DO              reduce using rule 50 (term -> factor .)
    CALL            reduce using rule 50 (term -> factor .)
    OPENPAREN       reduce using rule 50 (term -> factor .)
    BOOLCTE         reduce using rule 50 (term -> factor .)
    NUMBERCTE       reduce using rule 50 (term -> factor .)
    WORDCTE         reduce using rule 50 (term -> factor .)
    SENTENCECTE     reduce using rule 50 (term -> factor .)
    CLOSECURL       reduce using rule 50 (term -> factor .)
    RETURN          reduce using rule 50 (term -> factor .)
    ENDSTMT         reduce using rule 50 (term -> factor .)
    CLOSEPAREN      reduce using rule 50 (term -> factor .)
    COMA            reduce using rule 50 (term -> factor .)
    MULT            shift and go to state 93
    DIV             shift and go to state 94


state 66

    (27) cte -> BOOLCTE . func_constant func_boolCte
    (92) func_constant -> .

    MULT            reduce using rule 92 (func_constant -> .)
    DIV             reduce using rule 92 (func_constant -> .)
    PLUS            reduce using rule 92 (func_constant -> .)
    MINUS           reduce using rule 92 (func_constant -> .)
    RELOP           reduce using rule 92 (func_constant -> .)
    AND             reduce using rule 92 (func_constant -> .)
    OR              reduce using rule 92 (func_constant -> .)
    READ            reduce using rule 92 (func_constant -> .)
    WRITE           reduce using rule 92 (func_constant -> .)
    ID              reduce using rule 92 (func_constant -> .)
    NOT             reduce using rule 92 (func_constant -> .)
    IF              reduce using rule 92 (func_constant -> .)
    WHILE           reduce using rule 92 (func_constant -> .)
    DO              reduce using rule 92 (func_constant -> .)
    CALL            reduce using rule 92 (func_constant -> .)
    OPENPAREN       reduce using rule 92 (func_constant -> .)
    BOOLCTE         reduce using rule 92 (func_constant -> .)
    NUMBERCTE       reduce using rule 92 (func_constant -> .)
    WORDCTE         reduce using rule 92 (func_constant -> .)
    SENTENCECTE     reduce using rule 92 (func_constant -> .)
    CLOSECURL       reduce using rule 92 (func_constant -> .)
    RETURN          reduce using rule 92 (func_constant -> .)
    ENDSTMT         reduce using rule 92 (func_constant -> .)
    CLOSEPAREN      reduce using rule 92 (func_constant -> .)
    CLOSEBRAC       reduce using rule 92 (func_constant -> .)
    COMA            reduce using rule 92 (func_constant -> .)

    func_constant                  shift and go to state 95

state 67

    (28) cte -> NUMBERCTE . func_constant func_numberCte
    (92) func_constant -> .

    MULT            reduce using rule 92 (func_constant -> .)
    DIV             reduce using rule 92 (func_constant -> .)
    PLUS            reduce using rule 92 (func_constant -> .)
    MINUS           reduce using rule 92 (func_constant -> .)
    RELOP           reduce using rule 92 (func_constant -> .)
    AND             reduce using rule 92 (func_constant -> .)
    OR              reduce using rule 92 (func_constant -> .)
    READ            reduce using rule 92 (func_constant -> .)
    WRITE           reduce using rule 92 (func_constant -> .)
    ID              reduce using rule 92 (func_constant -> .)
    NOT             reduce using rule 92 (func_constant -> .)
    IF              reduce using rule 92 (func_constant -> .)
    WHILE           reduce using rule 92 (func_constant -> .)
    DO              reduce using rule 92 (func_constant -> .)
    CALL            reduce using rule 92 (func_constant -> .)
    OPENPAREN       reduce using rule 92 (func_constant -> .)
    BOOLCTE         reduce using rule 92 (func_constant -> .)
    NUMBERCTE       reduce using rule 92 (func_constant -> .)
    WORDCTE         reduce using rule 92 (func_constant -> .)
    SENTENCECTE     reduce using rule 92 (func_constant -> .)
    CLOSECURL       reduce using rule 92 (func_constant -> .)
    RETURN          reduce using rule 92 (func_constant -> .)
    ENDSTMT         reduce using rule 92 (func_constant -> .)
    CLOSEPAREN      reduce using rule 92 (func_constant -> .)
    CLOSEBRAC       reduce using rule 92 (func_constant -> .)
    COMA            reduce using rule 92 (func_constant -> .)

    func_constant                  shift and go to state 96

state 68

    (29) cte -> WORDCTE . func_constant func_wordCte
    (92) func_constant -> .

    MULT            reduce using rule 92 (func_constant -> .)
    DIV             reduce using rule 92 (func_constant -> .)
    PLUS            reduce using rule 92 (func_constant -> .)
    MINUS           reduce using rule 92 (func_constant -> .)
    RELOP           reduce using rule 92 (func_constant -> .)
    AND             reduce using rule 92 (func_constant -> .)
    OR              reduce using rule 92 (func_constant -> .)
    READ            reduce using rule 92 (func_constant -> .)
    WRITE           reduce using rule 92 (func_constant -> .)
    ID              reduce using rule 92 (func_constant -> .)
    NOT             reduce using rule 92 (func_constant -> .)
    IF              reduce using rule 92 (func_constant -> .)
    WHILE           reduce using rule 92 (func_constant -> .)
    DO              reduce using rule 92 (func_constant -> .)
    CALL            reduce using rule 92 (func_constant -> .)
    OPENPAREN       reduce using rule 92 (func_constant -> .)
    BOOLCTE         reduce using rule 92 (func_constant -> .)
    NUMBERCTE       reduce using rule 92 (func_constant -> .)
    WORDCTE         reduce using rule 92 (func_constant -> .)
    SENTENCECTE     reduce using rule 92 (func_constant -> .)
    CLOSECURL       reduce using rule 92 (func_constant -> .)
    RETURN          reduce using rule 92 (func_constant -> .)
    ENDSTMT         reduce using rule 92 (func_constant -> .)
    CLOSEPAREN      reduce using rule 92 (func_constant -> .)
    CLOSEBRAC       reduce using rule 92 (func_constant -> .)
    COMA            reduce using rule 92 (func_constant -> .)

    func_constant                  shift and go to state 97

state 69

    (30) cte -> SENTENCECTE . func_constant func_sentenceCte
    (92) func_constant -> .

    MULT            reduce using rule 92 (func_constant -> .)
    DIV             reduce using rule 92 (func_constant -> .)
    PLUS            reduce using rule 92 (func_constant -> .)
    MINUS           reduce using rule 92 (func_constant -> .)
    RELOP           reduce using rule 92 (func_constant -> .)
    AND             reduce using rule 92 (func_constant -> .)
    OR              reduce using rule 92 (func_constant -> .)
    READ            reduce using rule 92 (func_constant -> .)
    WRITE           reduce using rule 92 (func_constant -> .)
    ID              reduce using rule 92 (func_constant -> .)
    NOT             reduce using rule 92 (func_constant -> .)
    IF              reduce using rule 92 (func_constant -> .)
    WHILE           reduce using rule 92 (func_constant -> .)
    DO              reduce using rule 92 (func_constant -> .)
    CALL            reduce using rule 92 (func_constant -> .)
    OPENPAREN       reduce using rule 92 (func_constant -> .)
    BOOLCTE         reduce using rule 92 (func_constant -> .)
    NUMBERCTE       reduce using rule 92 (func_constant -> .)
    WORDCTE         reduce using rule 92 (func_constant -> .)
    SENTENCECTE     reduce using rule 92 (func_constant -> .)
    CLOSECURL       reduce using rule 92 (func_constant -> .)
    RETURN          reduce using rule 92 (func_constant -> .)
    ENDSTMT         reduce using rule 92 (func_constant -> .)
    CLOSEPAREN      reduce using rule 92 (func_constant -> .)
    CLOSEBRAC       reduce using rule 92 (func_constant -> .)
    COMA            reduce using rule 92 (func_constant -> .)

    func_constant                  shift and go to state 98

state 70

    (16) decaux -> type ID func_declare_var declareaux .

    FUNC            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BEGIN           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    READ            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WRITE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ID              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NOT             reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    IF              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WHILE           reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    DO              reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    CALL            reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    OPENPAREN       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    BOOLCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    NUMBERCTE       reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    WORDCTE         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    SENTENCECTE     reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    RETURN          reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)
    ENDSTMT         reduce using rule 16 (decaux -> type ID func_declare_var declareaux .)


state 71

    (18) declareaux -> ENDSTMT .

    FUNC            reduce using rule 18 (declareaux -> ENDSTMT .)
    BEGIN           reduce using rule 18 (declareaux -> ENDSTMT .)
    READ            reduce using rule 18 (declareaux -> ENDSTMT .)
    WRITE           reduce using rule 18 (declareaux -> ENDSTMT .)
    ID              reduce using rule 18 (declareaux -> ENDSTMT .)
    NOT             reduce using rule 18 (declareaux -> ENDSTMT .)
    IF              reduce using rule 18 (declareaux -> ENDSTMT .)
    WHILE           reduce using rule 18 (declareaux -> ENDSTMT .)
    DO              reduce using rule 18 (declareaux -> ENDSTMT .)
    CALL            reduce using rule 18 (declareaux -> ENDSTMT .)
    OPENPAREN       reduce using rule 18 (declareaux -> ENDSTMT .)
    BOOLCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    NUMBERCTE       reduce using rule 18 (declareaux -> ENDSTMT .)
    WORDCTE         reduce using rule 18 (declareaux -> ENDSTMT .)
    SENTENCECTE     reduce using rule 18 (declareaux -> ENDSTMT .)
    RETURN          reduce using rule 18 (declareaux -> ENDSTMT .)
    ENDSTMT         reduce using rule 18 (declareaux -> ENDSTMT .)


state 72

    (19) declareaux -> COMA . decaux
    (16) decaux -> . type ID func_declare_var declareaux
    (17) decaux -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux
    (31) type -> . BOOL func_type
    (32) type -> . NUMBER func_type
    (33) type -> . WORD func_type
    (34) type -> . SENTENCE func_type

    BOOL            shift and go to state 16
    NUMBER          shift and go to state 17
    WORD            shift and go to state 18
    SENTENCE        shift and go to state 19

    decaux                         shift and go to state 99
    type                           shift and go to state 15

state 73

    (17) decaux -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array declareaux
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    cte                            shift and go to state 100

state 74

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN . parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear
    (63) parameter -> . type ID func_declare_par parameteraux
    (64) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (31) type -> . BOOL func_type
    (32) type -> . NUMBER func_type
    (33) type -> . WORD func_type
    (34) type -> . SENTENCE func_type

    BOOL            shift and go to state 16
    NUMBER          shift and go to state 17
    WORD            shift and go to state 18
    SENTENCE        shift and go to state 19

    parameter                      shift and go to state 101
    type                           shift and go to state 102

state 75

    (1) start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END .

    $end            reduce using rule 1 (start -> KOTOBA ID func_start ENDSTMT declare startaux BEGIN func_begin_main block END .)


state 76

    (5) block -> OPENCURL blockaux CLOSECURL .

    END             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WHILE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ELSE            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    READ            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WRITE           reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ID              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NOT             reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    IF              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    DO              reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CALL            reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    OPENPAREN       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    BOOLCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    NUMBERCTE       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    WORDCTE         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    SENTENCECTE     reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    CLOSECURL       reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    RETURN          reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)
    ENDSTMT         reduce using rule 5 (block -> OPENCURL blockaux CLOSECURL .)


state 77

    (6) blockaux -> action blockaux .

    CLOSECURL       reduce using rule 6 (blockaux -> action blockaux .)
    RETURN          reduce using rule 6 (blockaux -> action blockaux .)
    ENDSTMT         reduce using rule 6 (blockaux -> action blockaux .)


state 78

    (11) input -> READ OPENPAREN . ID func_read CLOSEPAREN ENDSTMT

    ID              shift and go to state 103


state 79

    (53) factor -> OPENPAREN expression . CLOSEPAREN

    CLOSEPAREN      shift and go to state 104


state 80

    (26) cte -> ID . func_constantID
    (93) func_constantID -> .

    MULT            reduce using rule 93 (func_constantID -> .)
    DIV             reduce using rule 93 (func_constantID -> .)
    PLUS            reduce using rule 93 (func_constantID -> .)
    MINUS           reduce using rule 93 (func_constantID -> .)
    RELOP           reduce using rule 93 (func_constantID -> .)
    AND             reduce using rule 93 (func_constantID -> .)
    OR              reduce using rule 93 (func_constantID -> .)
    CLOSEPAREN      reduce using rule 93 (func_constantID -> .)
    CLOSEBRAC       reduce using rule 93 (func_constantID -> .)
    COMA            reduce using rule 93 (func_constantID -> .)
    READ            reduce using rule 93 (func_constantID -> .)
    WRITE           reduce using rule 93 (func_constantID -> .)
    ID              reduce using rule 93 (func_constantID -> .)
    NOT             reduce using rule 93 (func_constantID -> .)
    IF              reduce using rule 93 (func_constantID -> .)
    WHILE           reduce using rule 93 (func_constantID -> .)
    DO              reduce using rule 93 (func_constantID -> .)
    CALL            reduce using rule 93 (func_constantID -> .)
    OPENPAREN       reduce using rule 93 (func_constantID -> .)
    BOOLCTE         reduce using rule 93 (func_constantID -> .)
    NUMBERCTE       reduce using rule 93 (func_constantID -> .)
    WORDCTE         reduce using rule 93 (func_constantID -> .)
    SENTENCECTE     reduce using rule 93 (func_constantID -> .)
    CLOSECURL       reduce using rule 93 (func_constantID -> .)
    RETURN          reduce using rule 93 (func_constantID -> .)
    ENDSTMT         reduce using rule 93 (func_constantID -> .)

    func_constantID                shift and go to state 105

state 81

    (20) assign -> ID func_constantID . EQUAL func_assign assignaux
    (21) assign -> ID func_constantID . OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (26) cte -> ID func_constantID .

    EQUAL           shift and go to state 106
    OPENBRAC        shift and go to state 107
    MULT            reduce using rule 26 (cte -> ID func_constantID .)
    DIV             reduce using rule 26 (cte -> ID func_constantID .)
    PLUS            reduce using rule 26 (cte -> ID func_constantID .)
    MINUS           reduce using rule 26 (cte -> ID func_constantID .)
    RELOP           reduce using rule 26 (cte -> ID func_constantID .)
    AND             reduce using rule 26 (cte -> ID func_constantID .)
    OR              reduce using rule 26 (cte -> ID func_constantID .)
    READ            reduce using rule 26 (cte -> ID func_constantID .)
    WRITE           reduce using rule 26 (cte -> ID func_constantID .)
    ID              reduce using rule 26 (cte -> ID func_constantID .)
    NOT             reduce using rule 26 (cte -> ID func_constantID .)
    IF              reduce using rule 26 (cte -> ID func_constantID .)
    WHILE           reduce using rule 26 (cte -> ID func_constantID .)
    DO              reduce using rule 26 (cte -> ID func_constantID .)
    CALL            reduce using rule 26 (cte -> ID func_constantID .)
    OPENPAREN       reduce using rule 26 (cte -> ID func_constantID .)
    BOOLCTE         reduce using rule 26 (cte -> ID func_constantID .)
    NUMBERCTE       reduce using rule 26 (cte -> ID func_constantID .)
    WORDCTE         reduce using rule 26 (cte -> ID func_constantID .)
    SENTENCECTE     reduce using rule 26 (cte -> ID func_constantID .)
    CLOSECURL       reduce using rule 26 (cte -> ID func_constantID .)
    RETURN          reduce using rule 26 (cte -> ID func_constantID .)
    ENDSTMT         reduce using rule 26 (cte -> ID func_constantID .)


state 82

    (12) output -> WRITE OPENPAREN . outputaux CLOSEPAREN ENDSTMT
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    outputaux                      shift and go to state 108
    expression                     shift and go to state 109
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 83

    (41) expression -> NOT func_logicOp_operation . logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    logexpression                  shift and go to state 110
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 84

    (55) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block func_endIf
    (56) condition -> IF OPENPAREN . expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    expression                     shift and go to state 111
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 85

    (57) cycle -> WHILE func_while . OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile

    OPENPAREN       shift and go to state 112


state 86

    (58) cycle -> DO func_do . block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 113

state 87

    (69) callfunction -> CALL ID . DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> CALL ID . func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (120) func_callFunc -> .

    DOT             shift and go to state 114
    OPENPAREN       reduce using rule 120 (func_callFunc -> .)

    func_callFunc                  shift and go to state 115

state 88

    (43) logexpression -> relopexpression AND . func_logicOp_operation logexpression func_logicOP
    (109) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 109 (func_logicOp_operation -> .)
    ID              reduce using rule 109 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 109 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 109 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 109 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 109 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 116

state 89

    (44) logexpression -> relopexpression OR . func_logicOp_operation logexpression func_logicOP
    (109) func_logicOp_operation -> .

    OPENPAREN       reduce using rule 109 (func_logicOp_operation -> .)
    ID              reduce using rule 109 (func_logicOp_operation -> .)
    BOOLCTE         reduce using rule 109 (func_logicOp_operation -> .)
    NUMBERCTE       reduce using rule 109 (func_logicOp_operation -> .)
    WORDCTE         reduce using rule 109 (func_logicOp_operation -> .)
    SENTENCECTE     reduce using rule 109 (func_logicOp_operation -> .)

    func_logicOp_operation         shift and go to state 117

state 90

    (46) relopexpression -> exp func_relop . RELOP func_relop_operation exp func_relop

    RELOP           shift and go to state 118


state 91

    (48) exp -> term PLUS . func_term_operation exp func_term
    (103) func_term_operation -> .

    OPENPAREN       reduce using rule 103 (func_term_operation -> .)
    ID              reduce using rule 103 (func_term_operation -> .)
    BOOLCTE         reduce using rule 103 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 103 (func_term_operation -> .)
    WORDCTE         reduce using rule 103 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 103 (func_term_operation -> .)

    func_term_operation            shift and go to state 119

state 92

    (49) exp -> term MINUS . func_term_operation exp func_term
    (103) func_term_operation -> .

    OPENPAREN       reduce using rule 103 (func_term_operation -> .)
    ID              reduce using rule 103 (func_term_operation -> .)
    BOOLCTE         reduce using rule 103 (func_term_operation -> .)
    NUMBERCTE       reduce using rule 103 (func_term_operation -> .)
    WORDCTE         reduce using rule 103 (func_term_operation -> .)
    SENTENCECTE     reduce using rule 103 (func_term_operation -> .)

    func_term_operation            shift and go to state 120

state 93

    (51) term -> factor MULT . func_factor_operation term func_factor
    (105) func_factor_operation -> .

    OPENPAREN       reduce using rule 105 (func_factor_operation -> .)
    ID              reduce using rule 105 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 105 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 105 (func_factor_operation -> .)
    WORDCTE         reduce using rule 105 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 105 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 121

state 94

    (52) term -> factor DIV . func_factor_operation term func_factor
    (105) func_factor_operation -> .

    OPENPAREN       reduce using rule 105 (func_factor_operation -> .)
    ID              reduce using rule 105 (func_factor_operation -> .)
    BOOLCTE         reduce using rule 105 (func_factor_operation -> .)
    NUMBERCTE       reduce using rule 105 (func_factor_operation -> .)
    WORDCTE         reduce using rule 105 (func_factor_operation -> .)
    SENTENCECTE     reduce using rule 105 (func_factor_operation -> .)

    func_factor_operation          shift and go to state 122

state 95

    (27) cte -> BOOLCTE func_constant . func_boolCte
    (94) func_boolCte -> .

    MULT            reduce using rule 94 (func_boolCte -> .)
    DIV             reduce using rule 94 (func_boolCte -> .)
    PLUS            reduce using rule 94 (func_boolCte -> .)
    MINUS           reduce using rule 94 (func_boolCte -> .)
    RELOP           reduce using rule 94 (func_boolCte -> .)
    AND             reduce using rule 94 (func_boolCte -> .)
    OR              reduce using rule 94 (func_boolCte -> .)
    READ            reduce using rule 94 (func_boolCte -> .)
    WRITE           reduce using rule 94 (func_boolCte -> .)
    ID              reduce using rule 94 (func_boolCte -> .)
    NOT             reduce using rule 94 (func_boolCte -> .)
    IF              reduce using rule 94 (func_boolCte -> .)
    WHILE           reduce using rule 94 (func_boolCte -> .)
    DO              reduce using rule 94 (func_boolCte -> .)
    CALL            reduce using rule 94 (func_boolCte -> .)
    OPENPAREN       reduce using rule 94 (func_boolCte -> .)
    BOOLCTE         reduce using rule 94 (func_boolCte -> .)
    NUMBERCTE       reduce using rule 94 (func_boolCte -> .)
    WORDCTE         reduce using rule 94 (func_boolCte -> .)
    SENTENCECTE     reduce using rule 94 (func_boolCte -> .)
    CLOSECURL       reduce using rule 94 (func_boolCte -> .)
    RETURN          reduce using rule 94 (func_boolCte -> .)
    ENDSTMT         reduce using rule 94 (func_boolCte -> .)
    CLOSEPAREN      reduce using rule 94 (func_boolCte -> .)
    CLOSEBRAC       reduce using rule 94 (func_boolCte -> .)
    COMA            reduce using rule 94 (func_boolCte -> .)

    func_boolCte                   shift and go to state 123

state 96

    (28) cte -> NUMBERCTE func_constant . func_numberCte
    (95) func_numberCte -> .

    MULT            reduce using rule 95 (func_numberCte -> .)
    DIV             reduce using rule 95 (func_numberCte -> .)
    PLUS            reduce using rule 95 (func_numberCte -> .)
    MINUS           reduce using rule 95 (func_numberCte -> .)
    RELOP           reduce using rule 95 (func_numberCte -> .)
    AND             reduce using rule 95 (func_numberCte -> .)
    OR              reduce using rule 95 (func_numberCte -> .)
    READ            reduce using rule 95 (func_numberCte -> .)
    WRITE           reduce using rule 95 (func_numberCte -> .)
    ID              reduce using rule 95 (func_numberCte -> .)
    NOT             reduce using rule 95 (func_numberCte -> .)
    IF              reduce using rule 95 (func_numberCte -> .)
    WHILE           reduce using rule 95 (func_numberCte -> .)
    DO              reduce using rule 95 (func_numberCte -> .)
    CALL            reduce using rule 95 (func_numberCte -> .)
    OPENPAREN       reduce using rule 95 (func_numberCte -> .)
    BOOLCTE         reduce using rule 95 (func_numberCte -> .)
    NUMBERCTE       reduce using rule 95 (func_numberCte -> .)
    WORDCTE         reduce using rule 95 (func_numberCte -> .)
    SENTENCECTE     reduce using rule 95 (func_numberCte -> .)
    CLOSECURL       reduce using rule 95 (func_numberCte -> .)
    RETURN          reduce using rule 95 (func_numberCte -> .)
    ENDSTMT         reduce using rule 95 (func_numberCte -> .)
    CLOSEPAREN      reduce using rule 95 (func_numberCte -> .)
    CLOSEBRAC       reduce using rule 95 (func_numberCte -> .)
    COMA            reduce using rule 95 (func_numberCte -> .)

    func_numberCte                 shift and go to state 124

state 97

    (29) cte -> WORDCTE func_constant . func_wordCte
    (96) func_wordCte -> .

    MULT            reduce using rule 96 (func_wordCte -> .)
    DIV             reduce using rule 96 (func_wordCte -> .)
    PLUS            reduce using rule 96 (func_wordCte -> .)
    MINUS           reduce using rule 96 (func_wordCte -> .)
    RELOP           reduce using rule 96 (func_wordCte -> .)
    AND             reduce using rule 96 (func_wordCte -> .)
    OR              reduce using rule 96 (func_wordCte -> .)
    READ            reduce using rule 96 (func_wordCte -> .)
    WRITE           reduce using rule 96 (func_wordCte -> .)
    ID              reduce using rule 96 (func_wordCte -> .)
    NOT             reduce using rule 96 (func_wordCte -> .)
    IF              reduce using rule 96 (func_wordCte -> .)
    WHILE           reduce using rule 96 (func_wordCte -> .)
    DO              reduce using rule 96 (func_wordCte -> .)
    CALL            reduce using rule 96 (func_wordCte -> .)
    OPENPAREN       reduce using rule 96 (func_wordCte -> .)
    BOOLCTE         reduce using rule 96 (func_wordCte -> .)
    NUMBERCTE       reduce using rule 96 (func_wordCte -> .)
    WORDCTE         reduce using rule 96 (func_wordCte -> .)
    SENTENCECTE     reduce using rule 96 (func_wordCte -> .)
    CLOSECURL       reduce using rule 96 (func_wordCte -> .)
    RETURN          reduce using rule 96 (func_wordCte -> .)
    ENDSTMT         reduce using rule 96 (func_wordCte -> .)
    CLOSEPAREN      reduce using rule 96 (func_wordCte -> .)
    CLOSEBRAC       reduce using rule 96 (func_wordCte -> .)
    COMA            reduce using rule 96 (func_wordCte -> .)

    func_wordCte                   shift and go to state 125

state 98

    (30) cte -> SENTENCECTE func_constant . func_sentenceCte
    (97) func_sentenceCte -> .

    MULT            reduce using rule 97 (func_sentenceCte -> .)
    DIV             reduce using rule 97 (func_sentenceCte -> .)
    PLUS            reduce using rule 97 (func_sentenceCte -> .)
    MINUS           reduce using rule 97 (func_sentenceCte -> .)
    RELOP           reduce using rule 97 (func_sentenceCte -> .)
    AND             reduce using rule 97 (func_sentenceCte -> .)
    OR              reduce using rule 97 (func_sentenceCte -> .)
    READ            reduce using rule 97 (func_sentenceCte -> .)
    WRITE           reduce using rule 97 (func_sentenceCte -> .)
    ID              reduce using rule 97 (func_sentenceCte -> .)
    NOT             reduce using rule 97 (func_sentenceCte -> .)
    IF              reduce using rule 97 (func_sentenceCte -> .)
    WHILE           reduce using rule 97 (func_sentenceCte -> .)
    DO              reduce using rule 97 (func_sentenceCte -> .)
    CALL            reduce using rule 97 (func_sentenceCte -> .)
    OPENPAREN       reduce using rule 97 (func_sentenceCte -> .)
    BOOLCTE         reduce using rule 97 (func_sentenceCte -> .)
    NUMBERCTE       reduce using rule 97 (func_sentenceCte -> .)
    WORDCTE         reduce using rule 97 (func_sentenceCte -> .)
    SENTENCECTE     reduce using rule 97 (func_sentenceCte -> .)
    CLOSECURL       reduce using rule 97 (func_sentenceCte -> .)
    RETURN          reduce using rule 97 (func_sentenceCte -> .)
    ENDSTMT         reduce using rule 97 (func_sentenceCte -> .)
    CLOSEPAREN      reduce using rule 97 (func_sentenceCte -> .)
    CLOSEBRAC       reduce using rule 97 (func_sentenceCte -> .)
    COMA            reduce using rule 97 (func_sentenceCte -> .)

    func_sentenceCte               shift and go to state 126

state 99

    (19) declareaux -> COMA decaux .

    FUNC            reduce using rule 19 (declareaux -> COMA decaux .)
    BEGIN           reduce using rule 19 (declareaux -> COMA decaux .)
    READ            reduce using rule 19 (declareaux -> COMA decaux .)
    WRITE           reduce using rule 19 (declareaux -> COMA decaux .)
    ID              reduce using rule 19 (declareaux -> COMA decaux .)
    NOT             reduce using rule 19 (declareaux -> COMA decaux .)
    IF              reduce using rule 19 (declareaux -> COMA decaux .)
    WHILE           reduce using rule 19 (declareaux -> COMA decaux .)
    DO              reduce using rule 19 (declareaux -> COMA decaux .)
    CALL            reduce using rule 19 (declareaux -> COMA decaux .)
    OPENPAREN       reduce using rule 19 (declareaux -> COMA decaux .)
    BOOLCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    NUMBERCTE       reduce using rule 19 (declareaux -> COMA decaux .)
    WORDCTE         reduce using rule 19 (declareaux -> COMA decaux .)
    SENTENCECTE     reduce using rule 19 (declareaux -> COMA decaux .)
    RETURN          reduce using rule 19 (declareaux -> COMA decaux .)
    ENDSTMT         reduce using rule 19 (declareaux -> COMA decaux .)


state 100

    (17) decaux -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array declareaux

    CLOSEBRAC       shift and go to state 127


state 101

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter . CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    CLOSEPAREN      shift and go to state 128


state 102

    (63) parameter -> type . ID func_declare_par parameteraux
    (64) parameter -> type . ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux

    ID              shift and go to state 129


state 103

    (11) input -> READ OPENPAREN ID . func_read CLOSEPAREN ENDSTMT
    (99) func_read -> .

    CLOSEPAREN      reduce using rule 99 (func_read -> .)

    func_read                      shift and go to state 130

state 104

    (53) factor -> OPENPAREN expression CLOSEPAREN .

    MULT            reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    DIV             reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    PLUS            reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    MINUS           reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    RELOP           reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    AND             reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    OR              reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    READ            reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    WRITE           reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    ID              reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    NOT             reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    IF              reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    WHILE           reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    DO              reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    CALL            reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    OPENPAREN       reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    BOOLCTE         reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    NUMBERCTE       reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    WORDCTE         reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    SENTENCECTE     reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSECURL       reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    RETURN          reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    ENDSTMT         reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    CLOSEPAREN      reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)
    COMA            reduce using rule 53 (factor -> OPENPAREN expression CLOSEPAREN .)


state 105

    (26) cte -> ID func_constantID .

    MULT            reduce using rule 26 (cte -> ID func_constantID .)
    DIV             reduce using rule 26 (cte -> ID func_constantID .)
    PLUS            reduce using rule 26 (cte -> ID func_constantID .)
    MINUS           reduce using rule 26 (cte -> ID func_constantID .)
    RELOP           reduce using rule 26 (cte -> ID func_constantID .)
    AND             reduce using rule 26 (cte -> ID func_constantID .)
    OR              reduce using rule 26 (cte -> ID func_constantID .)
    CLOSEPAREN      reduce using rule 26 (cte -> ID func_constantID .)
    CLOSEBRAC       reduce using rule 26 (cte -> ID func_constantID .)
    COMA            reduce using rule 26 (cte -> ID func_constantID .)
    READ            reduce using rule 26 (cte -> ID func_constantID .)
    WRITE           reduce using rule 26 (cte -> ID func_constantID .)
    ID              reduce using rule 26 (cte -> ID func_constantID .)
    NOT             reduce using rule 26 (cte -> ID func_constantID .)
    IF              reduce using rule 26 (cte -> ID func_constantID .)
    WHILE           reduce using rule 26 (cte -> ID func_constantID .)
    DO              reduce using rule 26 (cte -> ID func_constantID .)
    CALL            reduce using rule 26 (cte -> ID func_constantID .)
    OPENPAREN       reduce using rule 26 (cte -> ID func_constantID .)
    BOOLCTE         reduce using rule 26 (cte -> ID func_constantID .)
    NUMBERCTE       reduce using rule 26 (cte -> ID func_constantID .)
    WORDCTE         reduce using rule 26 (cte -> ID func_constantID .)
    SENTENCECTE     reduce using rule 26 (cte -> ID func_constantID .)
    CLOSECURL       reduce using rule 26 (cte -> ID func_constantID .)
    RETURN          reduce using rule 26 (cte -> ID func_constantID .)
    ENDSTMT         reduce using rule 26 (cte -> ID func_constantID .)


state 106

    (20) assign -> ID func_constantID EQUAL . func_assign assignaux
    (101) func_assign -> .

    OPENCURL        reduce using rule 101 (func_assign -> .)
    OPENPAREN       reduce using rule 101 (func_assign -> .)
    ID              reduce using rule 101 (func_assign -> .)
    BOOLCTE         reduce using rule 101 (func_assign -> .)
    NUMBERCTE       reduce using rule 101 (func_assign -> .)
    WORDCTE         reduce using rule 101 (func_assign -> .)
    SENTENCECTE     reduce using rule 101 (func_assign -> .)

    func_assign                    shift and go to state 131

state 107

    (21) assign -> ID func_constantID OPENBRAC . func_isSize cte CLOSEBRAC EQUAL assignaux
    (86) func_isSize -> .

    ID              reduce using rule 86 (func_isSize -> .)
    BOOLCTE         reduce using rule 86 (func_isSize -> .)
    NUMBERCTE       reduce using rule 86 (func_isSize -> .)
    WORDCTE         reduce using rule 86 (func_isSize -> .)
    SENTENCECTE     reduce using rule 86 (func_isSize -> .)

    func_isSize                    shift and go to state 132

state 108

    (12) output -> WRITE OPENPAREN outputaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 133


state 109

    (13) outputaux -> expression . func_print
    (14) outputaux -> expression . func_print COMA outputaux
    (100) func_print -> .

    COMA            reduce using rule 100 (func_print -> .)
    CLOSEPAREN      reduce using rule 100 (func_print -> .)

    func_print                     shift and go to state 134

state 110

    (41) expression -> NOT func_logicOp_operation logexpression . func_logicOP
    (110) func_logicOP -> .

    READ            reduce using rule 110 (func_logicOP -> .)
    WRITE           reduce using rule 110 (func_logicOP -> .)
    ID              reduce using rule 110 (func_logicOP -> .)
    NOT             reduce using rule 110 (func_logicOP -> .)
    IF              reduce using rule 110 (func_logicOP -> .)
    WHILE           reduce using rule 110 (func_logicOP -> .)
    DO              reduce using rule 110 (func_logicOP -> .)
    CALL            reduce using rule 110 (func_logicOP -> .)
    OPENPAREN       reduce using rule 110 (func_logicOP -> .)
    BOOLCTE         reduce using rule 110 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 110 (func_logicOP -> .)
    WORDCTE         reduce using rule 110 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 110 (func_logicOP -> .)
    CLOSECURL       reduce using rule 110 (func_logicOP -> .)
    RETURN          reduce using rule 110 (func_logicOP -> .)
    ENDSTMT         reduce using rule 110 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 110 (func_logicOP -> .)
    COMA            reduce using rule 110 (func_logicOP -> .)

    func_logicOP                   shift and go to state 135

state 111

    (55) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block func_endIf
    (56) condition -> IF OPENPAREN expression . CLOSEPAREN func_if block ELSE func_else block func_endElse

    CLOSEPAREN      shift and go to state 136


state 112

    (57) cycle -> WHILE func_while OPENPAREN . expression CLOSEPAREN func_whileExp block func_endWhile
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    expression                     shift and go to state 137
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 113

    (58) cycle -> DO func_do block . WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    WHILE           shift and go to state 138


state 114

    (69) callfunction -> CALL ID DOT . special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (74) special -> . LENGTH
    (75) special -> . FREQUENCY
    (76) special -> . SEARCH
    (77) special -> . EXISTS
    (78) special -> . MEAN
    (79) special -> . MEDIAN
    (80) special -> . MODE
    (81) special -> . WORDCOUNT
    (82) special -> . TOKENIZE
    (83) special -> . REMOVE

    LENGTH          shift and go to state 140
    FREQUENCY       shift and go to state 141
    SEARCH          shift and go to state 142
    EXISTS          shift and go to state 143
    MEAN            shift and go to state 144
    MEDIAN          shift and go to state 145
    MODE            shift and go to state 146
    WORDCOUNT       shift and go to state 147
    TOKENIZE        shift and go to state 148
    REMOVE          shift and go to state 149

    special                        shift and go to state 139

state 115

    (70) callfunction -> CALL ID func_callFunc . OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT

    OPENPAREN       shift and go to state 150


state 116

    (43) logexpression -> relopexpression AND func_logicOp_operation . logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    relopexpression                shift and go to state 62
    logexpression                  shift and go to state 151
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 117

    (44) logexpression -> relopexpression OR func_logicOp_operation . logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    relopexpression                shift and go to state 62
    logexpression                  shift and go to state 152
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 118

    (46) relopexpression -> exp func_relop RELOP . func_relop_operation exp func_relop
    (107) func_relop_operation -> .

    OPENPAREN       reduce using rule 107 (func_relop_operation -> .)
    ID              reduce using rule 107 (func_relop_operation -> .)
    BOOLCTE         reduce using rule 107 (func_relop_operation -> .)
    NUMBERCTE       reduce using rule 107 (func_relop_operation -> .)
    WORDCTE         reduce using rule 107 (func_relop_operation -> .)
    SENTENCECTE     reduce using rule 107 (func_relop_operation -> .)

    func_relop_operation           shift and go to state 153

state 119

    (48) exp -> term PLUS func_term_operation . exp func_term
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    term                           shift and go to state 64
    exp                            shift and go to state 154
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 120

    (49) exp -> term MINUS func_term_operation . exp func_term
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    term                           shift and go to state 64
    exp                            shift and go to state 155
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 121

    (51) term -> factor MULT func_factor_operation . term func_factor
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    factor                         shift and go to state 65
    term                           shift and go to state 156
    cte                            shift and go to state 55

state 122

    (52) term -> factor DIV func_factor_operation . term func_factor
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    factor                         shift and go to state 65
    term                           shift and go to state 157
    cte                            shift and go to state 55

state 123

    (27) cte -> BOOLCTE func_constant func_boolCte .

    MULT            reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    DIV             reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    PLUS            reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    MINUS           reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    RELOP           reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    AND             reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    OR              reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    READ            reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    WRITE           reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    ID              reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    NOT             reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    IF              reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    WHILE           reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    DO              reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    CALL            reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    OPENPAREN       reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    BOOLCTE         reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    NUMBERCTE       reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    WORDCTE         reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    SENTENCECTE     reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    CLOSECURL       reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    RETURN          reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    ENDSTMT         reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    CLOSEPAREN      reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    CLOSEBRAC       reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)
    COMA            reduce using rule 27 (cte -> BOOLCTE func_constant func_boolCte .)


state 124

    (28) cte -> NUMBERCTE func_constant func_numberCte .

    MULT            reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    DIV             reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    PLUS            reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    MINUS           reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    RELOP           reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    AND             reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    OR              reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    READ            reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    WRITE           reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    ID              reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    NOT             reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    IF              reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    WHILE           reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    DO              reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    CALL            reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    OPENPAREN       reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    BOOLCTE         reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    NUMBERCTE       reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    WORDCTE         reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    SENTENCECTE     reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    CLOSECURL       reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    RETURN          reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    ENDSTMT         reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    CLOSEPAREN      reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    CLOSEBRAC       reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)
    COMA            reduce using rule 28 (cte -> NUMBERCTE func_constant func_numberCte .)


state 125

    (29) cte -> WORDCTE func_constant func_wordCte .

    MULT            reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    DIV             reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    PLUS            reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    MINUS           reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    RELOP           reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    AND             reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    OR              reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    READ            reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    WRITE           reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    ID              reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    NOT             reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    IF              reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    WHILE           reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    DO              reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    CALL            reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    OPENPAREN       reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    BOOLCTE         reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    NUMBERCTE       reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    WORDCTE         reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    SENTENCECTE     reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    CLOSECURL       reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    RETURN          reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    ENDSTMT         reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    CLOSEPAREN      reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    CLOSEBRAC       reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)
    COMA            reduce using rule 29 (cte -> WORDCTE func_constant func_wordCte .)


state 126

    (30) cte -> SENTENCECTE func_constant func_sentenceCte .

    MULT            reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    DIV             reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    PLUS            reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    MINUS           reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    RELOP           reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    AND             reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    OR              reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    READ            reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    WRITE           reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    ID              reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    NOT             reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    IF              reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    WHILE           reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    DO              reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    CALL            reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    OPENPAREN       reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    BOOLCTE         reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    NUMBERCTE       reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    WORDCTE         reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    SENTENCECTE     reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    CLOSECURL       reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    RETURN          reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    ENDSTMT         reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    CLOSEPAREN      reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    CLOSEBRAC       reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)
    COMA            reduce using rule 30 (cte -> SENTENCECTE func_constant func_sentenceCte .)


state 127

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array declareaux
    (88) func_declare_array -> .

    ENDSTMT         reduce using rule 88 (func_declare_array -> .)
    COMA            reduce using rule 88 (func_declare_array -> .)

    func_declare_array             shift and go to state 158

state 128

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN . OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear

    OPENCURL        shift and go to state 159


state 129

    (63) parameter -> type ID . func_declare_par parameteraux
    (64) parameter -> type ID . OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (89) func_declare_par -> .

    OPENBRAC        shift and go to state 161
    COMA            reduce using rule 89 (func_declare_par -> .)
    CLOSEPAREN      reduce using rule 89 (func_declare_par -> .)

    func_declare_par               shift and go to state 160

state 130

    (11) input -> READ OPENPAREN ID func_read . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 162


state 131

    (20) assign -> ID func_constantID EQUAL func_assign . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENCURL        shift and go to state 165
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    assignaux                      shift and go to state 163
    exp                            shift and go to state 164
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 132

    (21) assign -> ID func_constantID OPENBRAC func_isSize . cte CLOSEBRAC EQUAL assignaux
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    cte                            shift and go to state 166

state 133

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 167


state 134

    (13) outputaux -> expression func_print .
    (14) outputaux -> expression func_print . COMA outputaux

    CLOSEPAREN      reduce using rule 13 (outputaux -> expression func_print .)
    COMA            shift and go to state 168


state 135

    (41) expression -> NOT func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 41 (expression -> NOT func_logicOp_operation logexpression func_logicOP .)


state 136

    (55) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block func_endIf
    (56) condition -> IF OPENPAREN expression CLOSEPAREN . func_if block ELSE func_else block func_endElse
    (111) func_if -> .

    OPENCURL        reduce using rule 111 (func_if -> .)

    func_if                        shift and go to state 169

state 137

    (57) cycle -> WHILE func_while OPENPAREN expression . CLOSEPAREN func_whileExp block func_endWhile

    CLOSEPAREN      shift and go to state 170


state 138

    (58) cycle -> DO func_do block WHILE . OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT

    OPENPAREN       shift and go to state 171


state 139

    (69) callfunction -> CALL ID DOT special . OPENPAREN spaux CLOSEPAREN ENDSTMT

    OPENPAREN       shift and go to state 172


state 140

    (74) special -> LENGTH .

    OPENPAREN       reduce using rule 74 (special -> LENGTH .)


state 141

    (75) special -> FREQUENCY .

    OPENPAREN       reduce using rule 75 (special -> FREQUENCY .)


state 142

    (76) special -> SEARCH .

    OPENPAREN       reduce using rule 76 (special -> SEARCH .)


state 143

    (77) special -> EXISTS .

    OPENPAREN       reduce using rule 77 (special -> EXISTS .)


state 144

    (78) special -> MEAN .

    OPENPAREN       reduce using rule 78 (special -> MEAN .)


state 145

    (79) special -> MEDIAN .

    OPENPAREN       reduce using rule 79 (special -> MEDIAN .)


state 146

    (80) special -> MODE .

    OPENPAREN       reduce using rule 80 (special -> MODE .)


state 147

    (81) special -> WORDCOUNT .

    OPENPAREN       reduce using rule 81 (special -> WORDCOUNT .)


state 148

    (82) special -> TOKENIZE .

    OPENPAREN       reduce using rule 82 (special -> TOKENIZE .)


state 149

    (83) special -> REMOVE .

    OPENPAREN       reduce using rule 83 (special -> REMOVE .)


state 150

    (70) callfunction -> CALL ID func_callFunc OPENPAREN . spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (71) spaux -> . cte func_callFuncParameter
    (72) spaux -> . cte func_callFuncParameter COMA spaux
    (73) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte
    (84) empty -> .

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69
    CLOSEPAREN      reduce using rule 84 (empty -> .)

    spaux                          shift and go to state 173
    cte                            shift and go to state 174
    empty                          shift and go to state 175

state 151

    (43) logexpression -> relopexpression AND func_logicOp_operation logexpression . func_logicOP
    (110) func_logicOP -> .

    READ            reduce using rule 110 (func_logicOP -> .)
    WRITE           reduce using rule 110 (func_logicOP -> .)
    ID              reduce using rule 110 (func_logicOP -> .)
    NOT             reduce using rule 110 (func_logicOP -> .)
    IF              reduce using rule 110 (func_logicOP -> .)
    WHILE           reduce using rule 110 (func_logicOP -> .)
    DO              reduce using rule 110 (func_logicOP -> .)
    CALL            reduce using rule 110 (func_logicOP -> .)
    OPENPAREN       reduce using rule 110 (func_logicOP -> .)
    BOOLCTE         reduce using rule 110 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 110 (func_logicOP -> .)
    WORDCTE         reduce using rule 110 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 110 (func_logicOP -> .)
    CLOSECURL       reduce using rule 110 (func_logicOP -> .)
    RETURN          reduce using rule 110 (func_logicOP -> .)
    ENDSTMT         reduce using rule 110 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 110 (func_logicOP -> .)
    COMA            reduce using rule 110 (func_logicOP -> .)

    func_logicOP                   shift and go to state 176

state 152

    (44) logexpression -> relopexpression OR func_logicOp_operation logexpression . func_logicOP
    (110) func_logicOP -> .

    READ            reduce using rule 110 (func_logicOP -> .)
    WRITE           reduce using rule 110 (func_logicOP -> .)
    ID              reduce using rule 110 (func_logicOP -> .)
    NOT             reduce using rule 110 (func_logicOP -> .)
    IF              reduce using rule 110 (func_logicOP -> .)
    WHILE           reduce using rule 110 (func_logicOP -> .)
    DO              reduce using rule 110 (func_logicOP -> .)
    CALL            reduce using rule 110 (func_logicOP -> .)
    OPENPAREN       reduce using rule 110 (func_logicOP -> .)
    BOOLCTE         reduce using rule 110 (func_logicOP -> .)
    NUMBERCTE       reduce using rule 110 (func_logicOP -> .)
    WORDCTE         reduce using rule 110 (func_logicOP -> .)
    SENTENCECTE     reduce using rule 110 (func_logicOP -> .)
    CLOSECURL       reduce using rule 110 (func_logicOP -> .)
    RETURN          reduce using rule 110 (func_logicOP -> .)
    ENDSTMT         reduce using rule 110 (func_logicOP -> .)
    CLOSEPAREN      reduce using rule 110 (func_logicOP -> .)
    COMA            reduce using rule 110 (func_logicOP -> .)

    func_logicOP                   shift and go to state 177

state 153

    (46) relopexpression -> exp func_relop RELOP func_relop_operation . exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    exp                            shift and go to state 178
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 154

    (48) exp -> term PLUS func_term_operation exp . func_term
    (104) func_term -> .

    RELOP           reduce using rule 104 (func_term -> .)
    AND             reduce using rule 104 (func_term -> .)
    OR              reduce using rule 104 (func_term -> .)
    READ            reduce using rule 104 (func_term -> .)
    WRITE           reduce using rule 104 (func_term -> .)
    ID              reduce using rule 104 (func_term -> .)
    NOT             reduce using rule 104 (func_term -> .)
    IF              reduce using rule 104 (func_term -> .)
    WHILE           reduce using rule 104 (func_term -> .)
    DO              reduce using rule 104 (func_term -> .)
    CALL            reduce using rule 104 (func_term -> .)
    OPENPAREN       reduce using rule 104 (func_term -> .)
    BOOLCTE         reduce using rule 104 (func_term -> .)
    NUMBERCTE       reduce using rule 104 (func_term -> .)
    WORDCTE         reduce using rule 104 (func_term -> .)
    SENTENCECTE     reduce using rule 104 (func_term -> .)
    CLOSECURL       reduce using rule 104 (func_term -> .)
    RETURN          reduce using rule 104 (func_term -> .)
    ENDSTMT         reduce using rule 104 (func_term -> .)
    CLOSEPAREN      reduce using rule 104 (func_term -> .)
    COMA            reduce using rule 104 (func_term -> .)

    func_term                      shift and go to state 179

state 155

    (49) exp -> term MINUS func_term_operation exp . func_term
    (104) func_term -> .

    RELOP           reduce using rule 104 (func_term -> .)
    AND             reduce using rule 104 (func_term -> .)
    OR              reduce using rule 104 (func_term -> .)
    READ            reduce using rule 104 (func_term -> .)
    WRITE           reduce using rule 104 (func_term -> .)
    ID              reduce using rule 104 (func_term -> .)
    NOT             reduce using rule 104 (func_term -> .)
    IF              reduce using rule 104 (func_term -> .)
    WHILE           reduce using rule 104 (func_term -> .)
    DO              reduce using rule 104 (func_term -> .)
    CALL            reduce using rule 104 (func_term -> .)
    OPENPAREN       reduce using rule 104 (func_term -> .)
    BOOLCTE         reduce using rule 104 (func_term -> .)
    NUMBERCTE       reduce using rule 104 (func_term -> .)
    WORDCTE         reduce using rule 104 (func_term -> .)
    SENTENCECTE     reduce using rule 104 (func_term -> .)
    CLOSECURL       reduce using rule 104 (func_term -> .)
    RETURN          reduce using rule 104 (func_term -> .)
    ENDSTMT         reduce using rule 104 (func_term -> .)
    CLOSEPAREN      reduce using rule 104 (func_term -> .)
    COMA            reduce using rule 104 (func_term -> .)

    func_term                      shift and go to state 180

state 156

    (51) term -> factor MULT func_factor_operation term . func_factor
    (106) func_factor -> .

    PLUS            reduce using rule 106 (func_factor -> .)
    MINUS           reduce using rule 106 (func_factor -> .)
    RELOP           reduce using rule 106 (func_factor -> .)
    AND             reduce using rule 106 (func_factor -> .)
    OR              reduce using rule 106 (func_factor -> .)
    READ            reduce using rule 106 (func_factor -> .)
    WRITE           reduce using rule 106 (func_factor -> .)
    ID              reduce using rule 106 (func_factor -> .)
    NOT             reduce using rule 106 (func_factor -> .)
    IF              reduce using rule 106 (func_factor -> .)
    WHILE           reduce using rule 106 (func_factor -> .)
    DO              reduce using rule 106 (func_factor -> .)
    CALL            reduce using rule 106 (func_factor -> .)
    OPENPAREN       reduce using rule 106 (func_factor -> .)
    BOOLCTE         reduce using rule 106 (func_factor -> .)
    NUMBERCTE       reduce using rule 106 (func_factor -> .)
    WORDCTE         reduce using rule 106 (func_factor -> .)
    SENTENCECTE     reduce using rule 106 (func_factor -> .)
    CLOSECURL       reduce using rule 106 (func_factor -> .)
    RETURN          reduce using rule 106 (func_factor -> .)
    ENDSTMT         reduce using rule 106 (func_factor -> .)
    CLOSEPAREN      reduce using rule 106 (func_factor -> .)
    COMA            reduce using rule 106 (func_factor -> .)

    func_factor                    shift and go to state 181

state 157

    (52) term -> factor DIV func_factor_operation term . func_factor
    (106) func_factor -> .

    PLUS            reduce using rule 106 (func_factor -> .)
    MINUS           reduce using rule 106 (func_factor -> .)
    RELOP           reduce using rule 106 (func_factor -> .)
    AND             reduce using rule 106 (func_factor -> .)
    OR              reduce using rule 106 (func_factor -> .)
    READ            reduce using rule 106 (func_factor -> .)
    WRITE           reduce using rule 106 (func_factor -> .)
    ID              reduce using rule 106 (func_factor -> .)
    NOT             reduce using rule 106 (func_factor -> .)
    IF              reduce using rule 106 (func_factor -> .)
    WHILE           reduce using rule 106 (func_factor -> .)
    DO              reduce using rule 106 (func_factor -> .)
    CALL            reduce using rule 106 (func_factor -> .)
    OPENPAREN       reduce using rule 106 (func_factor -> .)
    BOOLCTE         reduce using rule 106 (func_factor -> .)
    NUMBERCTE       reduce using rule 106 (func_factor -> .)
    WORDCTE         reduce using rule 106 (func_factor -> .)
    SENTENCECTE     reduce using rule 106 (func_factor -> .)
    CLOSECURL       reduce using rule 106 (func_factor -> .)
    RETURN          reduce using rule 106 (func_factor -> .)
    ENDSTMT         reduce using rule 106 (func_factor -> .)
    CLOSEPAREN      reduce using rule 106 (func_factor -> .)
    COMA            reduce using rule 106 (func_factor -> .)

    func_factor                    shift and go to state 182

state 158

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . declareaux
    (18) declareaux -> . ENDSTMT
    (19) declareaux -> . COMA decaux

    ENDSTMT         shift and go to state 71
    COMA            shift and go to state 72

    declareaux                     shift and go to state 183

state 159

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . declare blockaux returnaux ENDSTMT CLOSECURL func_clear
    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL . blockaux returnaux ENDSTMT CLOSECURL func_clear
    (15) declare -> . DEC decaux
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (84) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (35) statement -> . assign
    (36) statement -> . expression
    (37) statement -> . condition
    (38) statement -> . cycle
    (39) statement -> . callfunction
    (20) assign -> . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (55) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (57) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (58) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (69) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    DEC             shift and go to state 8
    RETURN          reduce using rule 84 (empty -> .)
    ENDSTMT         reduce using rule 84 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 49
    ID              shift and go to state 48
    NOT             shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    CALL            shift and go to state 61
    OPENPAREN       shift and go to state 47
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    declare                        shift and go to state 184
    blockaux                       shift and go to state 185
    action                         shift and go to state 41
    empty                          shift and go to state 42
    input                          shift and go to state 43
    output                         shift and go to state 44
    statement                      shift and go to state 45
    assign                         shift and go to state 50
    expression                     shift and go to state 51
    condition                      shift and go to state 52
    cycle                          shift and go to state 53
    callfunction                   shift and go to state 54
    cte                            shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 160

    (63) parameter -> type ID func_declare_par . parameteraux
    (65) parameteraux -> . COMA parameter
    (66) parameteraux -> . empty
    (84) empty -> .

    COMA            shift and go to state 187
    CLOSEPAREN      reduce using rule 84 (empty -> .)

    parameteraux                   shift and go to state 186
    empty                          shift and go to state 188

state 161

    (64) parameter -> type ID OPENBRAC . func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (86) func_isSize -> .

    ID              reduce using rule 86 (func_isSize -> .)
    BOOLCTE         reduce using rule 86 (func_isSize -> .)
    NUMBERCTE       reduce using rule 86 (func_isSize -> .)
    WORDCTE         reduce using rule 86 (func_isSize -> .)
    SENTENCECTE     reduce using rule 86 (func_isSize -> .)

    func_isSize                    shift and go to state 189

state 162

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 190


state 163

    (20) assign -> ID func_constantID EQUAL func_assign assignaux .

    READ            reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    WRITE           reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    ID              reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    NOT             reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    IF              reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    WHILE           reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    DO              reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    CALL            reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    OPENPAREN       reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    BOOLCTE         reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    NUMBERCTE       reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    WORDCTE         reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    SENTENCECTE     reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    CLOSECURL       reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    RETURN          reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)
    ENDSTMT         reduce using rule 20 (assign -> ID func_constantID EQUAL func_assign assignaux .)


state 164

    (22) assignaux -> exp . func_assign_value ENDSTMT
    (102) func_assign_value -> .

    ENDSTMT         reduce using rule 102 (func_assign_value -> .)

    func_assign_value              shift and go to state 191

state 165

    (23) assignaux -> OPENCURL . assiaux CLOSECURL ENDSTMT
    (24) assiaux -> . exp
    (25) assiaux -> . exp COMA assiaux
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    assiaux                        shift and go to state 192
    exp                            shift and go to state 193
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 166

    (21) assign -> ID func_constantID OPENBRAC func_isSize cte . CLOSEBRAC EQUAL assignaux

    CLOSEBRAC       shift and go to state 194


state 167

    (12) output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 12 (output -> WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT .)


state 168

    (14) outputaux -> expression func_print COMA . outputaux
    (13) outputaux -> . expression func_print
    (14) outputaux -> . expression func_print COMA outputaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    expression                     shift and go to state 109
    outputaux                      shift and go to state 195
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 169

    (55) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block func_endIf
    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if . block ELSE func_else block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 196

state 170

    (57) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN . func_whileExp block func_endWhile
    (118) func_whileExp -> .

    OPENCURL        reduce using rule 118 (func_whileExp -> .)

    func_whileExp                  shift and go to state 197

state 171

    (58) cycle -> DO func_do block WHILE OPENPAREN . expression CLOSEPAREN func_endDoWhile ENDSTMT
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    NOT             shift and go to state 57
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    expression                     shift and go to state 198
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 172

    (69) callfunction -> CALL ID DOT special OPENPAREN . spaux CLOSEPAREN ENDSTMT
    (71) spaux -> . cte func_callFuncParameter
    (72) spaux -> . cte func_callFuncParameter COMA spaux
    (73) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte
    (84) empty -> .

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69
    CLOSEPAREN      reduce using rule 84 (empty -> .)

    spaux                          shift and go to state 199
    cte                            shift and go to state 174
    empty                          shift and go to state 175

state 173

    (70) callfunction -> CALL ID func_callFunc OPENPAREN spaux . CLOSEPAREN func_endCallFunction ENDSTMT

    CLOSEPAREN      shift and go to state 200


state 174

    (71) spaux -> cte . func_callFuncParameter
    (72) spaux -> cte . func_callFuncParameter COMA spaux
    (121) func_callFuncParameter -> .

    COMA            reduce using rule 121 (func_callFuncParameter -> .)
    CLOSEPAREN      reduce using rule 121 (func_callFuncParameter -> .)

    func_callFuncParameter         shift and go to state 201

state 175

    (73) spaux -> empty .

    CLOSEPAREN      reduce using rule 73 (spaux -> empty .)


state 176

    (43) logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 43 (logexpression -> relopexpression AND func_logicOp_operation logexpression func_logicOP .)


state 177

    (44) logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .

    READ            reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WRITE           reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ID              reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NOT             reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    IF              reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WHILE           reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    DO              reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CALL            reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    OPENPAREN       reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    BOOLCTE         reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    NUMBERCTE       reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    WORDCTE         reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    SENTENCECTE     reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSECURL       reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    RETURN          reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    ENDSTMT         reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    CLOSEPAREN      reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)
    COMA            reduce using rule 44 (logexpression -> relopexpression OR func_logicOp_operation logexpression func_logicOP .)


state 178

    (46) relopexpression -> exp func_relop RELOP func_relop_operation exp . func_relop
    (108) func_relop -> .

    AND             reduce using rule 108 (func_relop -> .)
    OR              reduce using rule 108 (func_relop -> .)
    READ            reduce using rule 108 (func_relop -> .)
    WRITE           reduce using rule 108 (func_relop -> .)
    ID              reduce using rule 108 (func_relop -> .)
    NOT             reduce using rule 108 (func_relop -> .)
    IF              reduce using rule 108 (func_relop -> .)
    WHILE           reduce using rule 108 (func_relop -> .)
    DO              reduce using rule 108 (func_relop -> .)
    CALL            reduce using rule 108 (func_relop -> .)
    OPENPAREN       reduce using rule 108 (func_relop -> .)
    BOOLCTE         reduce using rule 108 (func_relop -> .)
    NUMBERCTE       reduce using rule 108 (func_relop -> .)
    WORDCTE         reduce using rule 108 (func_relop -> .)
    SENTENCECTE     reduce using rule 108 (func_relop -> .)
    CLOSECURL       reduce using rule 108 (func_relop -> .)
    RETURN          reduce using rule 108 (func_relop -> .)
    ENDSTMT         reduce using rule 108 (func_relop -> .)
    CLOSEPAREN      reduce using rule 108 (func_relop -> .)
    COMA            reduce using rule 108 (func_relop -> .)

    func_relop                     shift and go to state 202

state 179

    (48) exp -> term PLUS func_term_operation exp func_term .

    RELOP           reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    AND             reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    OR              reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    READ            reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    WRITE           reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    ID              reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    NOT             reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    IF              reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    WHILE           reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    DO              reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    CALL            reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    RETURN          reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)
    COMA            reduce using rule 48 (exp -> term PLUS func_term_operation exp func_term .)


state 180

    (49) exp -> term MINUS func_term_operation exp func_term .

    RELOP           reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    AND             reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    OR              reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    READ            reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    WRITE           reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    ID              reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    NOT             reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    IF              reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    WHILE           reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    DO              reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    CALL            reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    OPENPAREN       reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    BOOLCTE         reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    NUMBERCTE       reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    WORDCTE         reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    SENTENCECTE     reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSECURL       reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    RETURN          reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    ENDSTMT         reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    CLOSEPAREN      reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)
    COMA            reduce using rule 49 (exp -> term MINUS func_term_operation exp func_term .)


state 181

    (51) term -> factor MULT func_factor_operation term func_factor .

    PLUS            reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    MINUS           reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    RELOP           reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    AND             reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    OR              reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    READ            reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    WRITE           reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    ID              reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    NOT             reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    IF              reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    WHILE           reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    DO              reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    CALL            reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    RETURN          reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)
    COMA            reduce using rule 51 (term -> factor MULT func_factor_operation term func_factor .)


state 182

    (52) term -> factor DIV func_factor_operation term func_factor .

    PLUS            reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    MINUS           reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    RELOP           reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    AND             reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    OR              reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    READ            reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    WRITE           reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    ID              reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    NOT             reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    IF              reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    WHILE           reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    DO              reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    CALL            reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    OPENPAREN       reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    BOOLCTE         reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    NUMBERCTE       reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    WORDCTE         reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    SENTENCECTE     reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSECURL       reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    RETURN          reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    ENDSTMT         reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    CLOSEPAREN      reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)
    COMA            reduce using rule 52 (term -> factor DIV func_factor_operation term func_factor .)


state 183

    (17) decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .

    FUNC            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BEGIN           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    READ            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WRITE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ID              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NOT             reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    IF              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WHILE           reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    DO              reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    CALL            reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    OPENPAREN       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    BOOLCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    NUMBERCTE       reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    WORDCTE         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    SENTENCECTE     reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    RETURN          reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)
    ENDSTMT         reduce using rule 17 (decaux -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array declareaux .)


state 184

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare . blockaux returnaux ENDSTMT CLOSECURL func_clear
    (6) blockaux -> . action blockaux
    (7) blockaux -> . empty
    (8) action -> . input
    (9) action -> . output
    (10) action -> . statement
    (84) empty -> .
    (11) input -> . READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT
    (12) output -> . WRITE OPENPAREN outputaux CLOSEPAREN ENDSTMT
    (35) statement -> . assign
    (36) statement -> . expression
    (37) statement -> . condition
    (38) statement -> . cycle
    (39) statement -> . callfunction
    (20) assign -> . ID func_constantID EQUAL func_assign assignaux
    (21) assign -> . ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux
    (40) expression -> . logexpression
    (41) expression -> . NOT func_logicOp_operation logexpression func_logicOP
    (55) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block func_endIf
    (56) condition -> . IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse
    (57) cycle -> . WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile
    (58) cycle -> . DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT
    (69) callfunction -> . CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT
    (70) callfunction -> . CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT
    (42) logexpression -> . relopexpression
    (43) logexpression -> . relopexpression AND func_logicOp_operation logexpression func_logicOP
    (44) logexpression -> . relopexpression OR func_logicOp_operation logexpression func_logicOP
    (45) relopexpression -> . exp
    (46) relopexpression -> . exp func_relop RELOP func_relop_operation exp func_relop
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    RETURN          reduce using rule 84 (empty -> .)
    ENDSTMT         reduce using rule 84 (empty -> .)
    READ            shift and go to state 46
    WRITE           shift and go to state 49
    ID              shift and go to state 48
    NOT             shift and go to state 57
    IF              shift and go to state 58
    WHILE           shift and go to state 59
    DO              shift and go to state 60
    CALL            shift and go to state 61
    OPENPAREN       shift and go to state 47
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    blockaux                       shift and go to state 203
    action                         shift and go to state 41
    empty                          shift and go to state 42
    input                          shift and go to state 43
    output                         shift and go to state 44
    statement                      shift and go to state 45
    assign                         shift and go to state 50
    expression                     shift and go to state 51
    condition                      shift and go to state 52
    cycle                          shift and go to state 53
    callfunction                   shift and go to state 54
    cte                            shift and go to state 55
    logexpression                  shift and go to state 56
    relopexpression                shift and go to state 62
    exp                            shift and go to state 63
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 185

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux . returnaux ENDSTMT CLOSECURL func_clear
    (67) returnaux -> . RETURN ID func_return
    (68) returnaux -> . empty
    (84) empty -> .

    RETURN          shift and go to state 205
    ENDSTMT         reduce using rule 84 (empty -> .)

    returnaux                      shift and go to state 204
    empty                          shift and go to state 206

state 186

    (63) parameter -> type ID func_declare_par parameteraux .

    CLOSEPAREN      reduce using rule 63 (parameter -> type ID func_declare_par parameteraux .)


state 187

    (65) parameteraux -> COMA . parameter
    (63) parameter -> . type ID func_declare_par parameteraux
    (64) parameter -> . type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux
    (31) type -> . BOOL func_type
    (32) type -> . NUMBER func_type
    (33) type -> . WORD func_type
    (34) type -> . SENTENCE func_type

    BOOL            shift and go to state 16
    NUMBER          shift and go to state 17
    WORD            shift and go to state 18
    SENTENCE        shift and go to state 19

    parameter                      shift and go to state 207
    type                           shift and go to state 102

state 188

    (66) parameteraux -> empty .

    CLOSEPAREN      reduce using rule 66 (parameteraux -> empty .)


state 189

    (64) parameter -> type ID OPENBRAC func_isSize . cte CLOSEBRAC func_declare_array parameteraux
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    cte                            shift and go to state 208

state 190

    (11) input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .

    READ            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 11 (input -> READ OPENPAREN ID func_read CLOSEPAREN ENDSTMT .)


state 191

    (22) assignaux -> exp func_assign_value . ENDSTMT

    ENDSTMT         shift and go to state 209


state 192

    (23) assignaux -> OPENCURL assiaux . CLOSECURL ENDSTMT

    CLOSECURL       shift and go to state 210


state 193

    (24) assiaux -> exp .
    (25) assiaux -> exp . COMA assiaux

    CLOSECURL       reduce using rule 24 (assiaux -> exp .)
    COMA            shift and go to state 211


state 194

    (21) assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC . EQUAL assignaux

    EQUAL           shift and go to state 212


state 195

    (14) outputaux -> expression func_print COMA outputaux .

    CLOSEPAREN      reduce using rule 14 (outputaux -> expression func_print COMA outputaux .)


state 196

    (55) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . func_endIf
    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block . ELSE func_else block func_endElse
    (112) func_endIf -> .

    ELSE            shift and go to state 214
    READ            reduce using rule 112 (func_endIf -> .)
    WRITE           reduce using rule 112 (func_endIf -> .)
    ID              reduce using rule 112 (func_endIf -> .)
    NOT             reduce using rule 112 (func_endIf -> .)
    IF              reduce using rule 112 (func_endIf -> .)
    WHILE           reduce using rule 112 (func_endIf -> .)
    DO              reduce using rule 112 (func_endIf -> .)
    CALL            reduce using rule 112 (func_endIf -> .)
    OPENPAREN       reduce using rule 112 (func_endIf -> .)
    BOOLCTE         reduce using rule 112 (func_endIf -> .)
    NUMBERCTE       reduce using rule 112 (func_endIf -> .)
    WORDCTE         reduce using rule 112 (func_endIf -> .)
    SENTENCECTE     reduce using rule 112 (func_endIf -> .)
    CLOSECURL       reduce using rule 112 (func_endIf -> .)
    RETURN          reduce using rule 112 (func_endIf -> .)
    ENDSTMT         reduce using rule 112 (func_endIf -> .)

    func_endIf                     shift and go to state 213

state 197

    (57) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp . block func_endWhile
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 215

state 198

    (58) cycle -> DO func_do block WHILE OPENPAREN expression . CLOSEPAREN func_endDoWhile ENDSTMT

    CLOSEPAREN      shift and go to state 216


state 199

    (69) callfunction -> CALL ID DOT special OPENPAREN spaux . CLOSEPAREN ENDSTMT

    CLOSEPAREN      shift and go to state 217


state 200

    (70) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN . func_endCallFunction ENDSTMT
    (122) func_endCallFunction -> .

    ENDSTMT         reduce using rule 122 (func_endCallFunction -> .)

    func_endCallFunction           shift and go to state 218

state 201

    (71) spaux -> cte func_callFuncParameter .
    (72) spaux -> cte func_callFuncParameter . COMA spaux

    CLOSEPAREN      reduce using rule 71 (spaux -> cte func_callFuncParameter .)
    COMA            shift and go to state 219


state 202

    (46) relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .

    AND             reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OR              reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    READ            reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WRITE           reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ID              reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NOT             reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    IF              reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WHILE           reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    DO              reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CALL            reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    OPENPAREN       reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    BOOLCTE         reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    NUMBERCTE       reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    WORDCTE         reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    SENTENCECTE     reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSECURL       reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    RETURN          reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    ENDSTMT         reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    CLOSEPAREN      reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)
    COMA            reduce using rule 46 (relopexpression -> exp func_relop RELOP func_relop_operation exp func_relop .)


state 203

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux . returnaux ENDSTMT CLOSECURL func_clear
    (67) returnaux -> . RETURN ID func_return
    (68) returnaux -> . empty
    (84) empty -> .

    RETURN          shift and go to state 205
    ENDSTMT         reduce using rule 84 (empty -> .)

    returnaux                      shift and go to state 220
    empty                          shift and go to state 206

state 204

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux . ENDSTMT CLOSECURL func_clear

    ENDSTMT         shift and go to state 221


state 205

    (67) returnaux -> RETURN . ID func_return

    ID              shift and go to state 222


state 206

    (68) returnaux -> empty .

    ENDSTMT         reduce using rule 68 (returnaux -> empty .)


state 207

    (65) parameteraux -> COMA parameter .

    CLOSEPAREN      reduce using rule 65 (parameteraux -> COMA parameter .)


state 208

    (64) parameter -> type ID OPENBRAC func_isSize cte . CLOSEBRAC func_declare_array parameteraux

    CLOSEBRAC       shift and go to state 223


state 209

    (22) assignaux -> exp func_assign_value ENDSTMT .

    READ            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WRITE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ID              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NOT             reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    IF              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WHILE           reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    DO              reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CALL            reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    OPENPAREN       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    BOOLCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    NUMBERCTE       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    WORDCTE         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    SENTENCECTE     reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    CLOSECURL       reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    RETURN          reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)
    ENDSTMT         reduce using rule 22 (assignaux -> exp func_assign_value ENDSTMT .)


state 210

    (23) assignaux -> OPENCURL assiaux CLOSECURL . ENDSTMT

    ENDSTMT         shift and go to state 224


state 211

    (25) assiaux -> exp COMA . assiaux
    (24) assiaux -> . exp
    (25) assiaux -> . exp COMA assiaux
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    exp                            shift and go to state 193
    assiaux                        shift and go to state 225
    term                           shift and go to state 64
    factor                         shift and go to state 65
    cte                            shift and go to state 55

state 212

    (21) assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL . assignaux
    (22) assignaux -> . exp func_assign_value ENDSTMT
    (23) assignaux -> . OPENCURL assiaux CLOSECURL ENDSTMT
    (47) exp -> . term
    (48) exp -> . term PLUS func_term_operation exp func_term
    (49) exp -> . term MINUS func_term_operation exp func_term
    (50) term -> . factor
    (51) term -> . factor MULT func_factor_operation term func_factor
    (52) term -> . factor DIV func_factor_operation term func_factor
    (53) factor -> . OPENPAREN expression CLOSEPAREN
    (54) factor -> . cte
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte

    OPENCURL        shift and go to state 165
    OPENPAREN       shift and go to state 47
    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69

    cte                            shift and go to state 55
    assignaux                      shift and go to state 226
    exp                            shift and go to state 164
    term                           shift and go to state 64
    factor                         shift and go to state 65

state 213

    (55) condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .

    READ            reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WRITE           reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ID              reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NOT             reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    IF              reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WHILE           reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    DO              reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CALL            reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    OPENPAREN       reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    BOOLCTE         reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    NUMBERCTE       reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    WORDCTE         reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    SENTENCECTE     reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    CLOSECURL       reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    RETURN          reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)
    ENDSTMT         reduce using rule 55 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block func_endIf .)


state 214

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE . func_else block func_endElse
    (113) func_else -> .

    OPENCURL        reduce using rule 113 (func_else -> .)

    func_else                      shift and go to state 227

state 215

    (57) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block . func_endWhile
    (119) func_endWhile -> .

    READ            reduce using rule 119 (func_endWhile -> .)
    WRITE           reduce using rule 119 (func_endWhile -> .)
    ID              reduce using rule 119 (func_endWhile -> .)
    NOT             reduce using rule 119 (func_endWhile -> .)
    IF              reduce using rule 119 (func_endWhile -> .)
    WHILE           reduce using rule 119 (func_endWhile -> .)
    DO              reduce using rule 119 (func_endWhile -> .)
    CALL            reduce using rule 119 (func_endWhile -> .)
    OPENPAREN       reduce using rule 119 (func_endWhile -> .)
    BOOLCTE         reduce using rule 119 (func_endWhile -> .)
    NUMBERCTE       reduce using rule 119 (func_endWhile -> .)
    WORDCTE         reduce using rule 119 (func_endWhile -> .)
    SENTENCECTE     reduce using rule 119 (func_endWhile -> .)
    CLOSECURL       reduce using rule 119 (func_endWhile -> .)
    RETURN          reduce using rule 119 (func_endWhile -> .)
    ENDSTMT         reduce using rule 119 (func_endWhile -> .)

    func_endWhile                  shift and go to state 228

state 216

    (58) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN . func_endDoWhile ENDSTMT
    (116) func_endDoWhile -> .

    ENDSTMT         reduce using rule 116 (func_endDoWhile -> .)

    func_endDoWhile                shift and go to state 229

state 217

    (69) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN . ENDSTMT

    ENDSTMT         shift and go to state 230


state 218

    (70) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction . ENDSTMT

    ENDSTMT         shift and go to state 231


state 219

    (72) spaux -> cte func_callFuncParameter COMA . spaux
    (71) spaux -> . cte func_callFuncParameter
    (72) spaux -> . cte func_callFuncParameter COMA spaux
    (73) spaux -> . empty
    (26) cte -> . ID func_constantID
    (27) cte -> . BOOLCTE func_constant func_boolCte
    (28) cte -> . NUMBERCTE func_constant func_numberCte
    (29) cte -> . WORDCTE func_constant func_wordCte
    (30) cte -> . SENTENCECTE func_constant func_sentenceCte
    (84) empty -> .

    ID              shift and go to state 80
    BOOLCTE         shift and go to state 66
    NUMBERCTE       shift and go to state 67
    WORDCTE         shift and go to state 68
    SENTENCECTE     shift and go to state 69
    CLOSEPAREN      reduce using rule 84 (empty -> .)

    cte                            shift and go to state 174
    spaux                          shift and go to state 232
    empty                          shift and go to state 175

state 220

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux . ENDSTMT CLOSECURL func_clear

    ENDSTMT         shift and go to state 233


state 221

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT . CLOSECURL func_clear

    CLOSECURL       shift and go to state 234


state 222

    (67) returnaux -> RETURN ID . func_return
    (123) func_return -> .

    ENDSTMT         reduce using rule 123 (func_return -> .)

    func_return                    shift and go to state 235

state 223

    (64) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC . func_declare_array parameteraux
    (88) func_declare_array -> .

    COMA            reduce using rule 88 (func_declare_array -> .)
    CLOSEPAREN      reduce using rule 88 (func_declare_array -> .)

    func_declare_array             shift and go to state 236

state 224

    (23) assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .

    READ            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    WRITE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    ID              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    NOT             reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    IF              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    WHILE           reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    DO              reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    CALL            reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    OPENPAREN       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    BOOLCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    NUMBERCTE       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    WORDCTE         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    SENTENCECTE     reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    CLOSECURL       reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    RETURN          reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)
    ENDSTMT         reduce using rule 23 (assignaux -> OPENCURL assiaux CLOSECURL ENDSTMT .)


state 225

    (25) assiaux -> exp COMA assiaux .

    CLOSECURL       reduce using rule 25 (assiaux -> exp COMA assiaux .)


state 226

    (21) assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .

    READ            reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    WRITE           reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    ID              reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    NOT             reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    IF              reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    WHILE           reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    DO              reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    CALL            reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    OPENPAREN       reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    BOOLCTE         reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    NUMBERCTE       reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    WORDCTE         reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    SENTENCECTE     reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    CLOSECURL       reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    RETURN          reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)
    ENDSTMT         reduce using rule 21 (assign -> ID func_constantID OPENBRAC func_isSize cte CLOSEBRAC EQUAL assignaux .)


state 227

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else . block func_endElse
    (5) block -> . OPENCURL blockaux CLOSECURL

    OPENCURL        shift and go to state 34

    block                          shift and go to state 237

state 228

    (57) cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .

    READ            reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WRITE           reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ID              reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NOT             reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    IF              reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WHILE           reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    DO              reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CALL            reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    OPENPAREN       reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    BOOLCTE         reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    NUMBERCTE       reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    WORDCTE         reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    SENTENCECTE     reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    CLOSECURL       reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    RETURN          reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)
    ENDSTMT         reduce using rule 57 (cycle -> WHILE func_while OPENPAREN expression CLOSEPAREN func_whileExp block func_endWhile .)


state 229

    (58) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile . ENDSTMT

    ENDSTMT         shift and go to state 238


state 230

    (69) callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .

    READ            reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WRITE           reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    ID              reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    NOT             reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    IF              reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WHILE           reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    DO              reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    CALL            reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    OPENPAREN       reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    BOOLCTE         reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    NUMBERCTE       reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    WORDCTE         reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    SENTENCECTE     reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    CLOSECURL       reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    RETURN          reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)
    ENDSTMT         reduce using rule 69 (callfunction -> CALL ID DOT special OPENPAREN spaux CLOSEPAREN ENDSTMT .)


state 231

    (70) callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .

    READ            reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WRITE           reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ID              reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NOT             reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    IF              reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WHILE           reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    DO              reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CALL            reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    OPENPAREN       reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    BOOLCTE         reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    NUMBERCTE       reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    WORDCTE         reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    SENTENCECTE     reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    CLOSECURL       reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    RETURN          reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)
    ENDSTMT         reduce using rule 70 (callfunction -> CALL ID func_callFunc OPENPAREN spaux CLOSEPAREN func_endCallFunction ENDSTMT .)


state 232

    (72) spaux -> cte func_callFuncParameter COMA spaux .

    CLOSEPAREN      reduce using rule 72 (spaux -> cte func_callFuncParameter COMA spaux .)


state 233

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT . CLOSECURL func_clear

    CLOSECURL       shift and go to state 239


state 234

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL . func_clear
    (124) func_clear -> .

    FUNC            reduce using rule 124 (func_clear -> .)
    BEGIN           reduce using rule 124 (func_clear -> .)

    func_clear                     shift and go to state 240

state 235

    (67) returnaux -> RETURN ID func_return .

    ENDSTMT         reduce using rule 67 (returnaux -> RETURN ID func_return .)


state 236

    (64) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array . parameteraux
    (65) parameteraux -> . COMA parameter
    (66) parameteraux -> . empty
    (84) empty -> .

    COMA            shift and go to state 187
    CLOSEPAREN      reduce using rule 84 (empty -> .)

    parameteraux                   shift and go to state 241
    empty                          shift and go to state 188

state 237

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block . func_endElse
    (114) func_endElse -> .

    READ            reduce using rule 114 (func_endElse -> .)
    WRITE           reduce using rule 114 (func_endElse -> .)
    ID              reduce using rule 114 (func_endElse -> .)
    NOT             reduce using rule 114 (func_endElse -> .)
    IF              reduce using rule 114 (func_endElse -> .)
    WHILE           reduce using rule 114 (func_endElse -> .)
    DO              reduce using rule 114 (func_endElse -> .)
    CALL            reduce using rule 114 (func_endElse -> .)
    OPENPAREN       reduce using rule 114 (func_endElse -> .)
    BOOLCTE         reduce using rule 114 (func_endElse -> .)
    NUMBERCTE       reduce using rule 114 (func_endElse -> .)
    WORDCTE         reduce using rule 114 (func_endElse -> .)
    SENTENCECTE     reduce using rule 114 (func_endElse -> .)
    CLOSECURL       reduce using rule 114 (func_endElse -> .)
    RETURN          reduce using rule 114 (func_endElse -> .)
    ENDSTMT         reduce using rule 114 (func_endElse -> .)

    func_endElse                   shift and go to state 242

state 238

    (58) cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .

    READ            reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WRITE           reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ID              reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NOT             reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    IF              reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WHILE           reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    DO              reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CALL            reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    OPENPAREN       reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    BOOLCTE         reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    NUMBERCTE       reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    WORDCTE         reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    SENTENCECTE     reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    CLOSECURL       reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    RETURN          reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)
    ENDSTMT         reduce using rule 58 (cycle -> DO func_do block WHILE OPENPAREN expression CLOSEPAREN func_endDoWhile ENDSTMT .)


state 239

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL . func_clear
    (124) func_clear -> .

    FUNC            reduce using rule 124 (func_clear -> .)
    BEGIN           reduce using rule 124 (func_clear -> .)

    func_clear                     shift and go to state 243

state 240

    (60) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .

    FUNC            reduce using rule 60 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .)
    BEGIN           reduce using rule 60 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL blockaux returnaux ENDSTMT CLOSECURL func_clear .)


state 241

    (64) parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .

    CLOSEPAREN      reduce using rule 64 (parameter -> type ID OPENBRAC func_isSize cte CLOSEBRAC func_declare_array parameteraux .)


state 242

    (56) condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .

    READ            reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WRITE           reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ID              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NOT             reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    IF              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WHILE           reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    DO              reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CALL            reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    OPENPAREN       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    BOOLCTE         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    NUMBERCTE       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    WORDCTE         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    SENTENCECTE     reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    CLOSECURL       reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    RETURN          reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)
    ENDSTMT         reduce using rule 56 (condition -> IF OPENPAREN expression CLOSEPAREN func_if block ELSE func_else block func_endElse .)


state 243

    (59) function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .

    FUNC            reduce using rule 59 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .)
    BEGIN           reduce using rule 59 (function -> FUNC funcaux ID func_declare_function OPENPAREN parameter CLOSEPAREN OPENCURL declare blockaux returnaux ENDSTMT CLOSECURL func_clear .)

